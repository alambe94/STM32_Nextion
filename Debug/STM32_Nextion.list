
STM32_Nextion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08005dd8  08005dd8  00015dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009c0  20000000  0800611c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  200009c0  08006adc  000209c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c28  08006adc  00020c28  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000111cb  00000000  00000000  000209e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b28  00000000  00000000  00031bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003a95  00000000  00000000  000346dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000760  00000000  00000000  00038178  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ad8  00000000  00000000  000388d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004f4a  00000000  00000000  000393b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006b516  00000000  00000000  0003e2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  000a9810  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001fe4  00000000  00000000  000a9908  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00012cbd  00000000  00000000  000ab8ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009c0 	.word	0x200009c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005dc0 	.word	0x08005dc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009c4 	.word	0x200009c4
 800014c:	08005dc0 	.word	0x08005dc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a9c:	f000 b974 	b.w	8000d88 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	468c      	mov	ip, r1
 8000abe:	4604      	mov	r4, r0
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d14b      	bne.n	8000b5e <__udivmoddi4+0xa6>
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	4615      	mov	r5, r2
 8000aca:	d967      	bls.n	8000b9c <__udivmoddi4+0xe4>
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0720 	rsb	r7, r2, #32
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	fa20 f707 	lsr.w	r7, r0, r7
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ae4:	4094      	lsls	r4, r2
 8000ae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aea:	fbbc f7fe 	udiv	r7, ip, lr
 8000aee:	fa1f f885 	uxth.w	r8, r5
 8000af2:	fb0e c317 	mls	r3, lr, r7, ip
 8000af6:	fb07 f908 	mul.w	r9, r7, r8
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b00:	4599      	cmp	r9, r3
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x60>
 8000b04:	18eb      	adds	r3, r5, r3
 8000b06:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000b0a:	f080 811c 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b0e:	4599      	cmp	r9, r3
 8000b10:	f240 8119 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	3f02      	subs	r7, #2
 8000b16:	442b      	add	r3, r5
 8000b18:	eba3 0309 	sub.w	r3, r3, r9
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	fb00 f108 	mul.w	r1, r0, r8
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2e:	42a1      	cmp	r1, r4
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0x8e>
 8000b32:	192c      	adds	r4, r5, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b38:	f080 8107 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b3c:	42a1      	cmp	r1, r4
 8000b3e:	f240 8104 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	3802      	subs	r0, #2
 8000b44:	442c      	add	r4, r5
 8000b46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	1a64      	subs	r4, r4, r1
 8000b4e:	b11e      	cbz	r6, 8000b58 <__udivmoddi4+0xa0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	e9c6 4300 	strd	r4, r3, [r6]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xbe>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b68:	2700      	movs	r7, #0
 8000b6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6e:	4638      	mov	r0, r7
 8000b70:	4639      	mov	r1, r7
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f783 	clz	r7, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d148      	bne.n	8000c10 <__udivmoddi4+0x158>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd0>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80fb 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469c      	mov	ip, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa0>
 8000b96:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xe8>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 808f 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000baa:	2701      	movs	r7, #1
 8000bac:	1b49      	subs	r1, r1, r5
 8000bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bb2:	fa1f f985 	uxth.w	r9, r5
 8000bb6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bba:	fb08 111e 	mls	r1, r8, lr, r1
 8000bbe:	fb09 f00e 	mul.w	r0, r9, lr
 8000bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bc6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bce:	18eb      	adds	r3, r5, r3
 8000bd0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	f200 80cd 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bdc:	468e      	mov	lr, r1
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	fb09 f900 	mul.w	r9, r9, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x14e>
 8000bf6:	192c      	adds	r4, r5, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x14c>
 8000bfe:	45a1      	cmp	r9, r4
 8000c00:	f200 80b6 	bhi.w	8000d70 <__udivmoddi4+0x2b8>
 8000c04:	4618      	mov	r0, r3
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c0e:	e79e      	b.n	8000b4e <__udivmoddi4+0x96>
 8000c10:	f1c7 0520 	rsb	r5, r7, #32
 8000c14:	40bb      	lsls	r3, r7
 8000c16:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c26:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c2a:	fa1f f88c 	uxth.w	r8, ip
 8000c2e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c32:	fa20 f305 	lsr.w	r3, r0, r5
 8000c36:	40b9      	lsls	r1, r7
 8000c38:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	45a2      	cmp	sl, r4
 8000c46:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x1b0>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c58:	f080 8088 	bcs.w	8000d6c <__udivmoddi4+0x2b4>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	f240 8085 	bls.w	8000d6c <__udivmoddi4+0x2b4>
 8000c62:	f1a9 0902 	sub.w	r9, r9, #2
 8000c66:	4464      	add	r4, ip
 8000c68:	eba4 040a 	sub.w	r4, r4, sl
 8000c6c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c70:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c74:	fb00 fa08 	mul.w	sl, r0, r8
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c8a:	d26b      	bcs.n	8000d64 <__udivmoddi4+0x2ac>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0x2ac>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c98:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ca0:	454c      	cmp	r4, r9
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d069      	beq.n	8000d82 <__udivmoddi4+0x2ca>
 8000cae:	1a5a      	subs	r2, r3, r1
 8000cb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cb8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cbc:	40fc      	lsrs	r4, r7
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	fa21 f003 	lsr.w	r0, r1, r3
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000cda:	fa1f f985 	uxth.w	r9, r5
 8000cde:	fb08 0017 	mls	r0, r8, r7, r0
 8000ce2:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fb07 fc09 	mul.w	ip, r7, r9
 8000cec:	430b      	orrs	r3, r1
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x254>
 8000cfc:	1869      	adds	r1, r5, r1
 8000cfe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d02:	d231      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d04:	458c      	cmp	ip, r1
 8000d06:	d92f      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	4429      	add	r1, r5
 8000d0c:	eba1 010c 	sub.w	r1, r1, ip
 8000d10:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d14:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d18:	fb00 fe09 	mul.w	lr, r0, r9
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x27e>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	d218      	bcs.n	8000d60 <__udivmoddi4+0x2a8>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d916      	bls.n	8000d60 <__udivmoddi4+0x2a8>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4637      	mov	r7, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e708      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d46:	460f      	mov	r7, r1
 8000d48:	e6e6      	b.n	8000b18 <__udivmoddi4+0x60>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	e6fb      	b.n	8000b46 <__udivmoddi4+0x8e>
 8000d4e:	4543      	cmp	r3, r8
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb8 0102 	subs.w	r1, r8, r2
 8000d56:	eb69 020c 	sbc.w	r2, r9, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	4696      	mov	lr, r2
 8000d5e:	e7a4      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e7e8      	b.n	8000d36 <__udivmoddi4+0x27e>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e795      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e7cf      	b.n	8000d0c <__udivmoddi4+0x254>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e77b      	b.n	8000c68 <__udivmoddi4+0x1b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	e747      	b.n	8000c06 <__udivmoddi4+0x14e>
 8000d76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	e72f      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e707      	b.n	8000b92 <__udivmoddi4+0xda>
 8000d82:	4637      	mov	r7, r6
 8000d84:	e6e8      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <HAL_InitTick+0x3c>)
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_InitTick+0x40>)
 8000d96:	7809      	ldrb	r1, [r1, #0]
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000d9e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	fbb2 f0f3 	udiv	r0, r2, r3
 8000da4:	f000 f8a0 	bl	8000ee8 <HAL_SYSTICK_Config>
 8000da8:	b908      	cbnz	r0, 8000dae <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	2d0f      	cmp	r5, #15
 8000dac:	d901      	bls.n	8000db2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000dae:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	4602      	mov	r2, r0
 8000db6:	4629      	mov	r1, r5
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dbc:	f000 f852 	bl	8000e64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_InitTick+0x44>)
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	601d      	str	r5, [r3, #0]
 8000dc6:	bd38      	pop	{r3, r4, r5, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	2000000c 	.word	0x2000000c
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x20>)
{
 8000dd6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dda:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	f000 f82d 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff ffd0 	bl	8000d8c <HAL_InitTick>
  HAL_MspInit();
 8000dec:	f001 fc96 	bl	800271c <HAL_MspInit>
}
 8000df0:	2000      	movs	r0, #0
 8000df2:	bd08      	pop	{r3, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_IncTick+0x10>)
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_IncTick+0x14>)
 8000dfc:	6811      	ldr	r1, [r2, #0]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	440b      	add	r3, r1
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000b7c 	.word	0x20000b7c
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <HAL_GetTick+0x8>)
 8000e12:	6818      	ldr	r0, [r3, #0]
}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000b7c 	.word	0x20000b7c

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b538      	push	{r3, r4, r5, lr}
 8000e1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff6 	bl	8000e10 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e24:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e26:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000e28:	d002      	beq.n	8000e30 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_Delay+0x20>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	4284      	cmp	r4, r0
 8000e38:	d8fa      	bhi.n	8000e30 <HAL_Delay+0x14>
  {
  }
}
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e40:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e46:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	400b      	ands	r3, r1
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e58:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e5a:	60d3      	str	r3, [r2, #12]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b470      	push	{r4, r5, r6}
 8000e68:	68dc      	ldr	r4, [r3, #12]
 8000e6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6e:	f1c4 0607 	rsb	r6, r4, #7
 8000e72:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e74:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	bf28      	it	cs
 8000e7a:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7c:	2b06      	cmp	r3, #6
 8000e7e:	d917      	bls.n	8000eb0 <HAL_NVIC_SetPriority+0x4c>
 8000e80:	2501      	movs	r5, #1
 8000e82:	3c03      	subs	r4, #3
 8000e84:	40a5      	lsls	r5, r4
 8000e86:	3d01      	subs	r5, #1
 8000e88:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	4019      	ands	r1, r3
 8000e92:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000e94:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e96:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000e9a:	db0c      	blt.n	8000eb6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	0109      	lsls	r1, r1, #4
 8000e9e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ea2:	b2c9      	uxtb	r1, r1
 8000ea4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ea8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eac:	bc70      	pop	{r4, r5, r6}
 8000eae:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	e7e9      	b.n	8000e8a <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_NVIC_SetPriority+0x68>)
 8000eb8:	f000 000f 	and.w	r0, r0, #15
 8000ebc:	0109      	lsls	r1, r1, #4
 8000ebe:	b2c9      	uxtb	r1, r1
 8000ec0:	4403      	add	r3, r0
 8000ec2:	7619      	strb	r1, [r3, #24]
 8000ec4:	bc70      	pop	{r4, r5, r6}
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	e000ecfc 	.word	0xe000ecfc

08000ed0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f000 011f 	and.w	r1, r0, #31
 8000ed6:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_NVIC_EnableIRQ+0x14>)
 8000ed8:	0940      	lsrs	r0, r0, #5
 8000eda:	408b      	lsls	r3, r1
 8000edc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	3801      	subs	r0, #1
 8000eea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eee:	d20d      	bcs.n	8000f0c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef0:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	4c06      	ldr	r4, [pc, #24]	; (8000f14 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f02:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000f04:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f08:	6019      	str	r1, [r3, #0]
 8000f0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f0c:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000f0e:	4770      	bx	lr
 8000f10:	e000e010 	.word	0xe000e010
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f18:	b350      	cbz	r0, 8000f70 <HAL_DMA_Init+0x58>
 8000f1a:	4602      	mov	r2, r0
{
 8000f1c:	b4f0      	push	{r4, r5, r6, r7}

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f1e:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f20:	2601      	movs	r6, #1
  tmp |=  hdma->Init.Direction        |
 8000f22:	6887      	ldr	r7, [r0, #8]
 8000f24:	6843      	ldr	r3, [r0, #4]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f26:	6805      	ldr	r5, [r0, #0]
 8000f28:	4912      	ldr	r1, [pc, #72]	; (8000f74 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2a:	68c0      	ldr	r0, [r0, #12]
  tmp |=  hdma->Init.Direction        |
 8000f2c:	433b      	orrs	r3, r7
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f2e:	4f12      	ldr	r7, [pc, #72]	; (8000f78 <HAL_DMA_Init+0x60>)
 8000f30:	4429      	add	r1, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f32:	4303      	orrs	r3, r0
 8000f34:	6910      	ldr	r0, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f36:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3a:	6957      	ldr	r7, [r2, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f3c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3e:	433b      	orrs	r3, r7
 8000f40:	6997      	ldr	r7, [r2, #24]
  tmp = hdma->Instance->CCR;
 8000f42:	6828      	ldr	r0, [r5, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f44:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f46:	69d7      	ldr	r7, [r2, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f48:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f4c:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f4e:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  hdma->DmaBaseAddress = DMA1;
 8000f52:	4f0a      	ldr	r7, [pc, #40]	; (8000f7c <HAL_DMA_Init+0x64>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f54:	0909      	lsrs	r1, r1, #4
  tmp |=  hdma->Init.Direction        |
 8000f56:	4303      	orrs	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f58:	0089      	lsls	r1, r1, #2
  hdma->DmaBaseAddress = DMA1;
 8000f5a:	63d7      	str	r7, [r2, #60]	; 0x3c
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8000f5c:	4620      	mov	r0, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f5e:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->Instance->CCR = tmp;
 8000f60:	602b      	str	r3, [r5, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f62:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000f64:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8000f68:	f882 6021 	strb.w	r6, [r2, #33]	; 0x21
}
 8000f6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000f6e:	4770      	bx	lr
    return HAL_ERROR;
 8000f70:	2001      	movs	r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	bffdfff8 	.word	0xbffdfff8
 8000f78:	cccccccd 	.word	0xcccccccd
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f82:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000f86:	2c01      	cmp	r4, #1
 8000f88:	d00c      	beq.n	8000fa4 <HAL_DMA_Start_IT+0x24>
 8000f8a:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f8c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000f90:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d008      	beq.n	8000faa <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f98:	2200      	movs	r2, #0

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f9a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8000f9c:	f880 2020 	strb.w	r2, [r0, #32]
  }    
  return status;
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8000fa4:	2302      	movs	r3, #2
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000faa:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	6805      	ldr	r5, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000fb4:	682e      	ldr	r6, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fb6:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8000fb8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8000fbc:	40bc      	lsls	r4, r7
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fc2:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc4:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fca:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 8000fce:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8000fd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd2:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fd4:	bf0b      	itete	eq
 8000fd6:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000fd8:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000fda:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000fdc:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000fde:	b14b      	cbz	r3, 8000ff4 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	f043 030e 	orr.w	r3, r3, #14
 8000fe6:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8000fe8:	682a      	ldr	r2, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8000fec:	f042 0201 	orr.w	r2, r2, #1
 8000ff0:	602a      	str	r2, [r5, #0]
 8000ff2:	e7d5      	b.n	8000fa0 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	f023 0304 	bic.w	r3, r3, #4
 8000ffa:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	f043 030a 	orr.w	r3, r3, #10
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	e7f0      	b.n	8000fe8 <HAL_DMA_Start_IT+0x68>
 8001006:	bf00      	nop

08001008 <HAL_DMA_Abort_IT>:
{  
 8001008:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800100a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800100e:	2b02      	cmp	r3, #2
 8001010:	d004      	beq.n	800101c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8001014:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001016:	6382      	str	r2, [r0, #56]	; 0x38
}
 8001018:	4620      	mov	r0, r4
 800101a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101c:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800101e:	491d      	ldr	r1, [pc, #116]	; (8001094 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001020:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001022:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001024:	f022 020e 	bic.w	r2, r2, #14
 8001028:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001032:	d021      	beq.n	8001078 <HAL_DMA_Abort_IT+0x70>
 8001034:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_DMA_Abort_IT+0x90>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01c      	beq.n	8001074 <HAL_DMA_Abort_IT+0x6c>
 800103a:	3214      	adds	r2, #20
 800103c:	4293      	cmp	r3, r2
 800103e:	d01f      	beq.n	8001080 <HAL_DMA_Abort_IT+0x78>
 8001040:	3214      	adds	r2, #20
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_DMA_Abort_IT+0x7e>
 8001046:	3214      	adds	r2, #20
 8001048:	4293      	cmp	r3, r2
 800104a:	d01f      	beq.n	800108c <HAL_DMA_Abort_IT+0x84>
 800104c:	3214      	adds	r2, #20
 800104e:	4293      	cmp	r3, r2
 8001050:	bf0c      	ite	eq
 8001052:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001056:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 800105a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 800105c:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800105e:	4d0f      	ldr	r5, [pc, #60]	; (800109c <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 8001060:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001062:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001064:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001068:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800106c:	b132      	cbz	r2, 800107c <HAL_DMA_Abort_IT+0x74>
      hdma->XferAbortCallback(hdma);
 800106e:	4790      	blx	r2
}
 8001070:	4620      	mov	r0, r4
 8001072:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001074:	2310      	movs	r3, #16
 8001076:	e7f0      	b.n	800105a <HAL_DMA_Abort_IT+0x52>
 8001078:	2301      	movs	r3, #1
 800107a:	e7ee      	b.n	800105a <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800107c:	4614      	mov	r4, r2
 800107e:	e7cb      	b.n	8001018 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001084:	e7e9      	b.n	800105a <HAL_DMA_Abort_IT+0x52>
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	e7e6      	b.n	800105a <HAL_DMA_Abort_IT+0x52>
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	e7e3      	b.n	800105a <HAL_DMA_Abort_IT+0x52>
 8001092:	bf00      	nop
 8001094:	40020008 	.word	0x40020008
 8001098:	4002001c 	.word	0x4002001c
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010a0:	2204      	movs	r2, #4
{
 80010a2:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010a4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010a8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80010aa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010ac:	408a      	lsls	r2, r1
 80010ae:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80010b0:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010b2:	d01f      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x54>
 80010b4:	076f      	lsls	r7, r5, #29
 80010b6:	d51d      	bpl.n	80010f4 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	0692      	lsls	r2, r2, #26
 80010bc:	d403      	bmi.n	80010c6 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f022 0204 	bic.w	r2, r2, #4
 80010c4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010c6:	4a3f      	ldr	r2, [pc, #252]	; (80011c4 <HAL_DMA_IRQHandler+0x124>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d05d      	beq.n	8001188 <HAL_DMA_IRQHandler+0xe8>
 80010cc:	3214      	adds	r2, #20
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d062      	beq.n	8001198 <HAL_DMA_IRQHandler+0xf8>
 80010d2:	3214      	adds	r2, #20
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d069      	beq.n	80011ac <HAL_DMA_IRQHandler+0x10c>
 80010d8:	3214      	adds	r2, #20
 80010da:	4293      	cmp	r3, r2
 80010dc:	d06c      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x118>
 80010de:	3214      	adds	r2, #20
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d05b      	beq.n	800119c <HAL_DMA_IRQHandler+0xfc>
 80010e4:	3214      	adds	r2, #20
 80010e6:	4293      	cmp	r3, r2
 80010e8:	bf0c      	ite	eq
 80010ea:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80010ee:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80010f2:	e04a      	b.n	800118a <HAL_DMA_IRQHandler+0xea>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010f4:	2202      	movs	r2, #2
 80010f6:	408a      	lsls	r2, r1
 80010f8:	4222      	tst	r2, r4
 80010fa:	d022      	beq.n	8001142 <HAL_DMA_IRQHandler+0xa2>
 80010fc:	07af      	lsls	r7, r5, #30
 80010fe:	d520      	bpl.n	8001142 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	0691      	lsls	r1, r2, #26
 8001104:	d406      	bmi.n	8001114 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8001106:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f022 020a 	bic.w	r2, r2, #10
 800110e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001110:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001114:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <HAL_DMA_IRQHandler+0x124>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02c      	beq.n	8001174 <HAL_DMA_IRQHandler+0xd4>
 800111a:	3214      	adds	r2, #20
 800111c:	4293      	cmp	r3, r2
 800111e:	d043      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x108>
 8001120:	3214      	adds	r2, #20
 8001122:	4293      	cmp	r3, r2
 8001124:	d045      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x112>
 8001126:	3214      	adds	r2, #20
 8001128:	4293      	cmp	r3, r2
 800112a:	d048      	beq.n	80011be <HAL_DMA_IRQHandler+0x11e>
 800112c:	3214      	adds	r2, #20
 800112e:	4293      	cmp	r3, r2
 8001130:	d037      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x102>
 8001132:	3214      	adds	r2, #20
 8001134:	4293      	cmp	r3, r2
 8001136:	bf0c      	ite	eq
 8001138:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800113c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001140:	e019      	b.n	8001176 <HAL_DMA_IRQHandler+0xd6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001142:	2208      	movs	r2, #8
 8001144:	408a      	lsls	r2, r1
 8001146:	4222      	tst	r2, r4
 8001148:	d01c      	beq.n	8001184 <HAL_DMA_IRQHandler+0xe4>
 800114a:	072a      	lsls	r2, r5, #28
 800114c:	d51a      	bpl.n	8001184 <HAL_DMA_IRQHandler+0xe4>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800114e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8001150:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001152:	681c      	ldr	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8001154:	6b05      	ldr	r5, [r0, #48]	; 0x30
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001156:	f024 040e 	bic.w	r4, r4, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800115a:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001160:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001162:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001164:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001168:	f880 7020 	strb.w	r7, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800116c:	b155      	cbz	r5, 8001184 <HAL_DMA_IRQHandler+0xe4>
      hdma->XferErrorCallback(hdma);
 800116e:	462b      	mov	r3, r5
}
 8001170:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001172:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001174:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8001176:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001178:	4c13      	ldr	r4, [pc, #76]	; (80011c8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 800117a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800117c:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 800117e:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001182:	b93a      	cbnz	r2, 8001194 <HAL_DMA_IRQHandler+0xf4>
}
 8001184:	bcf0      	pop	{r4, r5, r6, r7}
 8001186:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001188:	2304      	movs	r3, #4
 800118a:	490f      	ldr	r1, [pc, #60]	; (80011c8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 800118c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800118e:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001190:	2a00      	cmp	r2, #0
 8001192:	d0f7      	beq.n	8001184 <HAL_DMA_IRQHandler+0xe4>
}
 8001194:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferCpltCallback(hdma);
 8001196:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001198:	2340      	movs	r3, #64	; 0x40
 800119a:	e7f6      	b.n	800118a <HAL_DMA_IRQHandler+0xea>
 800119c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011a0:	e7f3      	b.n	800118a <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	e7e6      	b.n	8001176 <HAL_DMA_IRQHandler+0xd6>
 80011a8:	2320      	movs	r3, #32
 80011aa:	e7e4      	b.n	8001176 <HAL_DMA_IRQHandler+0xd6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b0:	e7eb      	b.n	800118a <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b6:	e7de      	b.n	8001176 <HAL_DMA_IRQHandler+0xd6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011bc:	e7e5      	b.n	800118a <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c2:	e7d8      	b.n	8001176 <HAL_DMA_IRQHandler+0xd6>
 80011c4:	40020008 	.word	0x40020008
 80011c8:	40020000 	.word	0x40020000

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80011d0:	f04f 0800 	mov.w	r8, #0
{
 80011d4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	4643      	mov	r3, r8
{
 80011d8:	f06f 061f 	mvn.w	r6, #31
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011dc:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 80013bc <HAL_GPIO_Init+0x1f0>
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e0:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80013c0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e4:	4f6f      	ldr	r7, [pc, #444]	; (80013a4 <HAL_GPIO_Init+0x1d8>)
      switch (GPIO_Init->Mode)
 80011e6:	9000      	str	r0, [sp, #0]
 80011e8:	e005      	b.n	80011f6 <HAL_GPIO_Init+0x2a>
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	3301      	adds	r3, #1
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	f106 0604 	add.w	r6, r6, #4
 80011f2:	f000 8089 	beq.w	8001308 <HAL_GPIO_Init+0x13c>
    ioposition = (0x01U << position);
 80011f6:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f8:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80011fa:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fc:	4014      	ands	r4, r2
    if (iocurrent == ioposition)
 80011fe:	42a2      	cmp	r2, r4
 8001200:	d1f3      	bne.n	80011ea <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001202:	684d      	ldr	r5, [r1, #4]
 8001204:	2d12      	cmp	r5, #18
 8001206:	f000 80a3 	beq.w	8001350 <HAL_GPIO_Init+0x184>
 800120a:	f200 808c 	bhi.w	8001326 <HAL_GPIO_Init+0x15a>
 800120e:	2d02      	cmp	r5, #2
 8001210:	f000 80a5 	beq.w	800135e <HAL_GPIO_Init+0x192>
 8001214:	f240 8081 	bls.w	800131a <HAL_GPIO_Init+0x14e>
 8001218:	2d03      	cmp	r5, #3
 800121a:	f000 809d 	beq.w	8001358 <HAL_GPIO_Init+0x18c>
 800121e:	2d11      	cmp	r5, #17
 8001220:	d102      	bne.n	8001228 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001222:	68ca      	ldr	r2, [r1, #12]
 8001224:	f102 0804 	add.w	r8, r2, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001228:	2cff      	cmp	r4, #255	; 0xff
 800122a:	d870      	bhi.n	800130e <HAL_GPIO_Init+0x142>
 800122c:	9a00      	ldr	r2, [sp, #0]
 800122e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001232:	4691      	mov	r9, r2
 8001234:	6812      	ldr	r2, [r2, #0]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001236:	250f      	movs	r5, #15
 8001238:	fa05 fb0a 	lsl.w	fp, r5, sl
 800123c:	ea22 020b 	bic.w	r2, r2, fp
 8001240:	fa08 fa0a 	lsl.w	sl, r8, sl
 8001244:	ea42 020a 	orr.w	r2, r2, sl
 8001248:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001250:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001254:	d0c9      	beq.n	80011ea <HAL_GPIO_Init+0x1e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001256:	f8de 9018 	ldr.w	r9, [lr, #24]
 800125a:	f023 0203 	bic.w	r2, r3, #3
 800125e:	f049 0901 	orr.w	r9, r9, #1
 8001262:	f8ce 9018 	str.w	r9, [lr, #24]
 8001266:	f8de 9018 	ldr.w	r9, [lr, #24]
 800126a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800126e:	f009 0901 	and.w	r9, r9, #1
 8001272:	f8cd 900c 	str.w	r9, [sp, #12]
 8001276:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800127a:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127e:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001282:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001286:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800128a:	fa05 f509 	lsl.w	r5, r5, r9
 800128e:	ea2b 0005 	bic.w	r0, fp, r5
 8001292:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001294:	9800      	ldr	r0, [sp, #0]
 8001296:	4560      	cmp	r0, ip
 8001298:	d077      	beq.n	800138a <HAL_GPIO_Init+0x1be>
 800129a:	4d43      	ldr	r5, [pc, #268]	; (80013a8 <HAL_GPIO_Init+0x1dc>)
 800129c:	42a8      	cmp	r0, r5
 800129e:	d077      	beq.n	8001390 <HAL_GPIO_Init+0x1c4>
 80012a0:	4d42      	ldr	r5, [pc, #264]	; (80013ac <HAL_GPIO_Init+0x1e0>)
 80012a2:	42a8      	cmp	r0, r5
 80012a4:	d079      	beq.n	800139a <HAL_GPIO_Init+0x1ce>
 80012a6:	4d42      	ldr	r5, [pc, #264]	; (80013b0 <HAL_GPIO_Init+0x1e4>)
 80012a8:	42a8      	cmp	r0, r5
 80012aa:	bf0c      	ite	eq
 80012ac:	f04f 0b03 	moveq.w	fp, #3
 80012b0:	f04f 0b04 	movne.w	fp, #4
 80012b4:	fa0b f909 	lsl.w	r9, fp, r9
 80012b8:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ba:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	ea40 0509 	orr.w	r5, r0, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80012c2:	6095      	str	r5, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80012c4:	683a      	ldr	r2, [r7, #0]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	f103 0301 	add.w	r3, r3, #1
          SET_BIT(EXTI->IMR, iocurrent);
 80012ca:	bf14      	ite	ne
 80012cc:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ce:	43a2      	biceq	r2, r4
 80012d0:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80012d2:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80012d8:	bf14      	ite	ne
 80012da:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012dc:	43a2      	biceq	r2, r4
 80012de:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e6:	bf14      	ite	ne
 80012e8:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ea:	43a2      	biceq	r2, r4
 80012ec:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ee:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f4:	bf14      	ite	ne
 80012f6:	4314      	orrne	r4, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012f8:	ea22 0404 	biceq.w	r4, r2, r4
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012fc:	2b10      	cmp	r3, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fe:	60fc      	str	r4, [r7, #12]
 8001300:	f106 0604 	add.w	r6, r6, #4
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001304:	f47f af77 	bne.w	80011f6 <HAL_GPIO_Init+0x2a>
        }
      }
    }
  }
}
 8001308:	b005      	add	sp, #20
 800130a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800130e:	9800      	ldr	r0, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001310:	46b2      	mov	sl, r6
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001312:	6842      	ldr	r2, [r0, #4]
 8001314:	f100 0904 	add.w	r9, r0, #4
 8001318:	e78d      	b.n	8001236 <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 800131a:	b1a5      	cbz	r5, 8001346 <HAL_GPIO_Init+0x17a>
 800131c:	2d01      	cmp	r5, #1
 800131e:	d183      	bne.n	8001228 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001320:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 8001324:	e780      	b.n	8001228 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 8001326:	4823      	ldr	r0, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x1e8>)
 8001328:	4285      	cmp	r5, r0
 800132a:	d00c      	beq.n	8001346 <HAL_GPIO_Init+0x17a>
 800132c:	d91b      	bls.n	8001366 <HAL_GPIO_Init+0x19a>
 800132e:	4822      	ldr	r0, [pc, #136]	; (80013b8 <HAL_GPIO_Init+0x1ec>)
 8001330:	4285      	cmp	r5, r0
 8001332:	d008      	beq.n	8001346 <HAL_GPIO_Init+0x17a>
 8001334:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001338:	4285      	cmp	r5, r0
 800133a:	d004      	beq.n	8001346 <HAL_GPIO_Init+0x17a>
 800133c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80013c4 <HAL_GPIO_Init+0x1f8>
 8001340:	454d      	cmp	r5, r9
 8001342:	f47f af71 	bne.w	8001228 <HAL_GPIO_Init+0x5c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001346:	688d      	ldr	r5, [r1, #8]
 8001348:	b9bd      	cbnz	r5, 800137a <HAL_GPIO_Init+0x1ae>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134a:	f04f 0804 	mov.w	r8, #4
 800134e:	e76b      	b.n	8001228 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001350:	68ca      	ldr	r2, [r1, #12]
 8001352:	f102 080c 	add.w	r8, r2, #12
          break;
 8001356:	e767      	b.n	8001228 <HAL_GPIO_Init+0x5c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001358:	f04f 0800 	mov.w	r8, #0
 800135c:	e764      	b.n	8001228 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135e:	68ca      	ldr	r2, [r1, #12]
 8001360:	f102 0808 	add.w	r8, r2, #8
          break;
 8001364:	e760      	b.n	8001228 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 8001366:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80013c8 <HAL_GPIO_Init+0x1fc>
 800136a:	454d      	cmp	r5, r9
 800136c:	d0eb      	beq.n	8001346 <HAL_GPIO_Init+0x17a>
 800136e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001372:	454d      	cmp	r5, r9
 8001374:	f47f af58 	bne.w	8001228 <HAL_GPIO_Init+0x5c>
 8001378:	e7e5      	b.n	8001346 <HAL_GPIO_Init+0x17a>
            GPIOx->BSRR = ioposition;
 800137a:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800137c:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 800137e:	bf0c      	ite	eq
 8001380:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001382:	6142      	strne	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001384:	f04f 0808 	mov.w	r8, #8
 8001388:	e74e      	b.n	8001228 <HAL_GPIO_Init+0x5c>
 800138a:	f04f 0900 	mov.w	r9, #0
 800138e:	e793      	b.n	80012b8 <HAL_GPIO_Init+0xec>
 8001390:	f04f 0b01 	mov.w	fp, #1
 8001394:	fa0b f909 	lsl.w	r9, fp, r9
 8001398:	e78e      	b.n	80012b8 <HAL_GPIO_Init+0xec>
 800139a:	f04f 0b02 	mov.w	fp, #2
 800139e:	fa0b f909 	lsl.w	r9, fp, r9
 80013a2:	e789      	b.n	80012b8 <HAL_GPIO_Init+0xec>
 80013a4:	40010400 	.word	0x40010400
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	10210000 	.word	0x10210000
 80013b8:	10310000 	.word	0x10310000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800
 80013c4:	10220000 	.word	0x10220000
 80013c8:	10110000 	.word	0x10110000

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d0:	6803      	ldr	r3, [r0, #0]
{
 80013d2:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d4:	07dd      	lsls	r5, r3, #31
{
 80013d6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d8:	d530      	bpl.n	800143c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013da:	49ad      	ldr	r1, [pc, #692]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 80013dc:	684a      	ldr	r2, [r1, #4]
 80013de:	f002 020c 	and.w	r2, r2, #12
 80013e2:	2a04      	cmp	r2, #4
 80013e4:	f000 80fa 	beq.w	80015dc <HAL_RCC_OscConfig+0x210>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e8:	684a      	ldr	r2, [r1, #4]
 80013ea:	f002 020c 	and.w	r2, r2, #12
 80013ee:	2a08      	cmp	r2, #8
 80013f0:	f000 80f0 	beq.w	80015d4 <HAL_RCC_OscConfig+0x208>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	6863      	ldr	r3, [r4, #4]
 80013f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fa:	f000 8174 	beq.w	80016e6 <HAL_RCC_OscConfig+0x31a>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8104 	beq.w	800160c <HAL_RCC_OscConfig+0x240>
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001408:	f000 81a9 	beq.w	800175e <HAL_RCC_OscConfig+0x392>
 800140c:	4ba0      	ldr	r3, [pc, #640]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800141c:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fcf7 	bl	8000e10 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4d9b      	ldr	r5, [pc, #620]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001424:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x68>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fcf2 	bl	8000e10 <HAL_GetTick>
 800142c:	1b80      	subs	r0, r0, r6
 800142e:	2864      	cmp	r0, #100	; 0x64
 8001430:	f200 8117 	bhi.w	8001662 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	039a      	lsls	r2, r3, #14
 8001438:	d5f6      	bpl.n	8001428 <HAL_RCC_OscConfig+0x5c>
 800143a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143c:	079f      	lsls	r7, r3, #30
 800143e:	d528      	bpl.n	8001492 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001440:	4a93      	ldr	r2, [pc, #588]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 8001442:	6851      	ldr	r1, [r2, #4]
 8001444:	f011 0f0c 	tst.w	r1, #12
 8001448:	f000 80a9 	beq.w	800159e <HAL_RCC_OscConfig+0x1d2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800144c:	6851      	ldr	r1, [r2, #4]
 800144e:	f001 010c 	and.w	r1, r1, #12
 8001452:	2908      	cmp	r1, #8
 8001454:	f000 809f 	beq.w	8001596 <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001458:	6923      	ldr	r3, [r4, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8132 	beq.w	80016c4 <HAL_RCC_OscConfig+0x2f8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	2201      	movs	r2, #1
 8001462:	4b8c      	ldr	r3, [pc, #560]	; (8001694 <HAL_RCC_OscConfig+0x2c8>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4d8a      	ldr	r5, [pc, #552]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8001466:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001468:	f7ff fcd2 	bl	8000e10 <HAL_GetTick>
 800146c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	e005      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001470:	f7ff fcce 	bl	8000e10 <HAL_GetTick>
 8001474:	1b80      	subs	r0, r0, r6
 8001476:	2802      	cmp	r0, #2
 8001478:	f200 80f3 	bhi.w	8001662 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	0798      	lsls	r0, r3, #30
 8001480:	d5f6      	bpl.n	8001470 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	6962      	ldr	r2, [r4, #20]
 8001486:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800148a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800148e:	602b      	str	r3, [r5, #0]
 8001490:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	071a      	lsls	r2, r3, #28
 8001494:	d45d      	bmi.n	8001552 <HAL_RCC_OscConfig+0x186>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001496:	075d      	lsls	r5, r3, #29
 8001498:	d53a      	bpl.n	8001510 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	00d0      	lsls	r0, r2, #3
 80014a0:	f100 80a6 	bmi.w	80015f0 <HAL_RCC_OscConfig+0x224>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80014a4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	69da      	ldr	r2, [r3, #28]
 80014a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ac:	61da      	str	r2, [r3, #28]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	9b00      	ldr	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b77      	ldr	r3, [pc, #476]	; (8001698 <HAL_RCC_OscConfig+0x2cc>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	05d1      	lsls	r1, r2, #23
 80014be:	f140 80bf 	bpl.w	8001640 <HAL_RCC_OscConfig+0x274>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c2:	68e3      	ldr	r3, [r4, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	f000 8114 	beq.w	80016f2 <HAL_RCC_OscConfig+0x326>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80cd 	beq.w	800166a <HAL_RCC_OscConfig+0x29e>
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	f000 814f 	beq.w	8001778 <HAL_RCC_OscConfig+0x3ac>
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	6a1a      	ldr	r2, [r3, #32]
 80014e2:	f022 0204 	bic.w	r2, r2, #4
 80014e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fc92 	bl	8000e10 <HAL_GetTick>

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	4e68      	ldr	r6, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 80014ee:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e006      	b.n	8001504 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fc8b 	bl	8000e10 <HAL_GetTick>
 80014fa:	eba0 0008 	sub.w	r0, r0, r8
 80014fe:	42b8      	cmp	r0, r7
 8001500:	f200 80af 	bhi.w	8001662 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	6a33      	ldr	r3, [r6, #32]
 8001506:	079b      	lsls	r3, r3, #30
 8001508:	d5f5      	bpl.n	80014f6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800150a:	2d00      	cmp	r5, #0
 800150c:	f040 80f7 	bne.w	80016fe <HAL_RCC_OscConfig+0x332>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001510:	69e3      	ldr	r3, [r4, #28]
 8001512:	b1d3      	cbz	r3, 800154a <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4d5e      	ldr	r5, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 8001516:	686a      	ldr	r2, [r5, #4]
 8001518:	f002 020c 	and.w	r2, r2, #12
 800151c:	2a08      	cmp	r2, #8
 800151e:	d045      	beq.n	80015ac <HAL_RCC_OscConfig+0x1e0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	2b02      	cmp	r3, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <HAL_RCC_OscConfig+0x2d0>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001528:	f000 80ef 	beq.w	800170a <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fc6f 	bl	8000e10 <HAL_GetTick>

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001534:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	e005      	b.n	8001544 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fc6a 	bl	8000e10 <HAL_GetTick>
 800153c:	1b40      	subs	r0, r0, r5
 800153e:	2802      	cmp	r0, #2
 8001540:	f200 808f 	bhi.w	8001662 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	d4f6      	bmi.n	8001538 <HAL_RCC_OscConfig+0x16c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800154a:	2000      	movs	r0, #0
}
 800154c:	b002      	add	sp, #8
 800154e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	69a3      	ldr	r3, [r4, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d02d      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_LSI_ENABLE();
 8001558:	2201      	movs	r2, #1
 800155a:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155c:	4d4c      	ldr	r5, [pc, #304]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 800155e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001560:	f7ff fc56 	bl	8000e10 <HAL_GetTick>
 8001564:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e004      	b.n	8001572 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc52 	bl	8000e10 <HAL_GetTick>
 800156c:	1b80      	subs	r0, r0, r6
 800156e:	2802      	cmp	r0, #2
 8001570:	d877      	bhi.n	8001662 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001574:	079b      	lsls	r3, r3, #30
 8001576:	d5f7      	bpl.n	8001568 <HAL_RCC_OscConfig+0x19c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001578:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HAL_RCC_OscConfig+0x2d8>)
 800157a:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <HAL_RCC_OscConfig+0x2dc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0a5b      	lsrs	r3, r3, #9
 8001584:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001586:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001588:	9b01      	ldr	r3, [sp, #4]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	9201      	str	r2, [sp, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_RCC_OscConfig+0x1ba>
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	e77f      	b.n	8001496 <HAL_RCC_OscConfig+0xca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001596:	6852      	ldr	r2, [r2, #4]
 8001598:	03d6      	lsls	r6, r2, #15
 800159a:	f53f af5d 	bmi.w	8001458 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4a3c      	ldr	r2, [pc, #240]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	0795      	lsls	r5, r2, #30
 80015a4:	d526      	bpl.n	80015f4 <HAL_RCC_OscConfig+0x228>
 80015a6:	6922      	ldr	r2, [r4, #16]
 80015a8:	2a01      	cmp	r2, #1
 80015aa:	d023      	beq.n	80015f4 <HAL_RCC_OscConfig+0x228>
        return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
}
 80015ae:	b002      	add	sp, #8
 80015b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80015b4:	4a3a      	ldr	r2, [pc, #232]	; (80016a0 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b6:	4d36      	ldr	r5, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 80015b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015ba:	f7ff fc29 	bl	8000e10 <HAL_GetTick>
 80015be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	e004      	b.n	80015cc <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc25 	bl	8000e10 <HAL_GetTick>
 80015c6:	1b80      	subs	r0, r0, r6
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d84a      	bhi.n	8001662 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015ce:	079f      	lsls	r7, r3, #30
 80015d0:	d4f7      	bmi.n	80015c2 <HAL_RCC_OscConfig+0x1f6>
 80015d2:	e7de      	b.n	8001592 <HAL_RCC_OscConfig+0x1c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d4:	684a      	ldr	r2, [r1, #4]
 80015d6:	03d0      	lsls	r0, r2, #15
 80015d8:	f57f af0c 	bpl.w	80013f4 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	0391      	lsls	r1, r2, #14
 80015e2:	f57f af2b 	bpl.w	800143c <HAL_RCC_OscConfig+0x70>
 80015e6:	6862      	ldr	r2, [r4, #4]
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	f47f af27 	bne.w	800143c <HAL_RCC_OscConfig+0x70>
 80015ee:	e7dd      	b.n	80015ac <HAL_RCC_OscConfig+0x1e0>
    FlagStatus       pwrclkchanged = RESET;
 80015f0:	2500      	movs	r5, #0
 80015f2:	e761      	b.n	80014b8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4926      	ldr	r1, [pc, #152]	; (8001690 <HAL_RCC_OscConfig+0x2c4>)
 80015f6:	6960      	ldr	r0, [r4, #20]
 80015f8:	680a      	ldr	r2, [r1, #0]
 80015fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015fe:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001602:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001604:	071a      	lsls	r2, r3, #28
 8001606:	f57f af46 	bpl.w	8001496 <HAL_RCC_OscConfig+0xca>
 800160a:	e7a2      	b.n	8001552 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001610:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001614:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001618:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001624:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001626:	f7ff fbf3 	bl	8000e10 <HAL_GetTick>
 800162a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162c:	e004      	b.n	8001638 <HAL_RCC_OscConfig+0x26c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162e:	f7ff fbef 	bl	8000e10 <HAL_GetTick>
 8001632:	1b80      	subs	r0, r0, r6
 8001634:	2864      	cmp	r0, #100	; 0x64
 8001636:	d814      	bhi.n	8001662 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	039b      	lsls	r3, r3, #14
 800163c:	d4f7      	bmi.n	800162e <HAL_RCC_OscConfig+0x262>
 800163e:	e6fc      	b.n	800143a <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001640:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001648:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800164a:	f7ff fbe1 	bl	8000e10 <HAL_GetTick>
 800164e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	6833      	ldr	r3, [r6, #0]
 8001652:	05da      	lsls	r2, r3, #23
 8001654:	f53f af35 	bmi.w	80014c2 <HAL_RCC_OscConfig+0xf6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7ff fbda 	bl	8000e10 <HAL_GetTick>
 800165c:	1bc0      	subs	r0, r0, r7
 800165e:	2864      	cmp	r0, #100	; 0x64
 8001660:	d9f6      	bls.n	8001650 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8001662:	2003      	movs	r0, #3
}
 8001664:	b002      	add	sp, #8
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800166e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001672:	6a1a      	ldr	r2, [r3, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	621a      	str	r2, [r3, #32]
 800167c:	6a1a      	ldr	r2, [r3, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001682:	f022 0204 	bic.w	r2, r2, #4
 8001686:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001688:	f7ff fbc2 	bl	8000e10 <HAL_GetTick>
 800168c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	e012      	b.n	80016b6 <HAL_RCC_OscConfig+0x2ea>
 8001690:	40021000 	.word	0x40021000
 8001694:	42420000 	.word	0x42420000
 8001698:	40007000 	.word	0x40007000
 800169c:	42420060 	.word	0x42420060
 80016a0:	42420480 	.word	0x42420480
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	10624dd3 	.word	0x10624dd3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fbb0 	bl	8000e10 <HAL_GetTick>
 80016b0:	1bc0      	subs	r0, r0, r7
 80016b2:	4540      	cmp	r0, r8
 80016b4:	d8d5      	bhi.n	8001662 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	6a33      	ldr	r3, [r6, #32]
 80016b8:	0798      	lsls	r0, r3, #30
 80016ba:	d4f7      	bmi.n	80016ac <HAL_RCC_OscConfig+0x2e0>
    if(pwrclkchanged == SET)
 80016bc:	2d00      	cmp	r5, #0
 80016be:	f43f af27 	beq.w	8001510 <HAL_RCC_OscConfig+0x144>
 80016c2:	e01c      	b.n	80016fe <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_DISABLE();
 80016c4:	4a34      	ldr	r2, [pc, #208]	; (8001798 <HAL_RCC_OscConfig+0x3cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	4d35      	ldr	r5, [pc, #212]	; (800179c <HAL_RCC_OscConfig+0x3d0>)
        __HAL_RCC_HSI_DISABLE();
 80016c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016ca:	f7ff fba1 	bl	8000e10 <HAL_GetTick>
 80016ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d0:	e004      	b.n	80016dc <HAL_RCC_OscConfig+0x310>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb9d 	bl	8000e10 <HAL_GetTick>
 80016d6:	1b80      	subs	r0, r0, r6
 80016d8:	2802      	cmp	r0, #2
 80016da:	d8c2      	bhi.n	8001662 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	0799      	lsls	r1, r3, #30
 80016e0:	d4f7      	bmi.n	80016d2 <HAL_RCC_OscConfig+0x306>
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	e6d5      	b.n	8001492 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e6:	4a2d      	ldr	r2, [pc, #180]	; (800179c <HAL_RCC_OscConfig+0x3d0>)
 80016e8:	6813      	ldr	r3, [r2, #0]
 80016ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e695      	b.n	800141e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f2:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x3d0>)
 80016f4:	6a13      	ldr	r3, [r2, #32]
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	e6f4      	b.n	80014e8 <HAL_RCC_OscConfig+0x11c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fe:	4a27      	ldr	r2, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x3d0>)
 8001700:	69d3      	ldr	r3, [r2, #28]
 8001702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001706:	61d3      	str	r3, [r2, #28]
 8001708:	e702      	b.n	8001510 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_PLL_DISABLE();
 800170a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800170c:	f7ff fb80 	bl	8000e10 <HAL_GetTick>
 8001710:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001712:	e004      	b.n	800171e <HAL_RCC_OscConfig+0x352>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb7c 	bl	8000e10 <HAL_GetTick>
 8001718:	1b80      	subs	r0, r0, r6
 800171a:	2802      	cmp	r0, #2
 800171c:	d8a1      	bhi.n	8001662 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	0199      	lsls	r1, r3, #6
 8001722:	d4f7      	bmi.n	8001714 <HAL_RCC_OscConfig+0x348>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001724:	6a22      	ldr	r2, [r4, #32]
 8001726:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800172a:	d02d      	beq.n	8001788 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_PLL_ENABLE();
 800172c:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x3d0>)
 8001730:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	4302      	orrs	r2, r0
 8001736:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800173a:	4819      	ldr	r0, [pc, #100]	; (80017a0 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001740:	6005      	str	r5, [r0, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001742:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8001744:	f7ff fb64 	bl	8000e10 <HAL_GetTick>
 8001748:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174a:	e004      	b.n	8001756 <HAL_RCC_OscConfig+0x38a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fb60 	bl	8000e10 <HAL_GetTick>
 8001750:	1b40      	subs	r0, r0, r5
 8001752:	2802      	cmp	r0, #2
 8001754:	d885      	bhi.n	8001662 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	019a      	lsls	r2, r3, #6
 800175a:	d5f7      	bpl.n	800174c <HAL_RCC_OscConfig+0x380>
 800175c:	e6f5      	b.n	800154a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001762:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e652      	b.n	800141e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	f042 0204 	orr.w	r2, r2, #4
 800177c:	621a      	str	r2, [r3, #32]
 800177e:	6a1a      	ldr	r2, [r3, #32]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	621a      	str	r2, [r3, #32]
 8001786:	e6af      	b.n	80014e8 <HAL_RCC_OscConfig+0x11c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001788:	686b      	ldr	r3, [r5, #4]
 800178a:	68a1      	ldr	r1, [r4, #8]
 800178c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001790:	430b      	orrs	r3, r1
 8001792:	606b      	str	r3, [r5, #4]
 8001794:	e7ca      	b.n	800172c <HAL_RCC_OscConfig+0x360>
 8001796:	bf00      	nop
 8001798:	42420000 	.word	0x42420000
 800179c:	40021000 	.word	0x40021000
 80017a0:	42420060 	.word	0x42420060

080017a4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017a4:	4a6c      	ldr	r2, [pc, #432]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	428b      	cmp	r3, r1
 80017ae:	d20b      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	f023 0307 	bic.w	r3, r3, #7
 80017b6:	430b      	orrs	r3, r1
 80017b8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ba:	6813      	ldr	r3, [r2, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	4299      	cmp	r1, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
}
 80017c6:	4770      	bx	lr
{
 80017c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	6803      	ldr	r3, [r0, #0]
{
 80017ce:	b086      	sub	sp, #24
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	079d      	lsls	r5, r3, #30
 80017d2:	d514      	bpl.n	80017fe <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	075c      	lsls	r4, r3, #29
 80017d6:	d504      	bpl.n	80017e2 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d8:	4c60      	ldr	r4, [pc, #384]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	6862      	ldr	r2, [r4, #4]
 80017dc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017e0:	6062      	str	r2, [r4, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	071a      	lsls	r2, r3, #28
 80017e4:	d504      	bpl.n	80017f0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e6:	4c5d      	ldr	r4, [pc, #372]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	6862      	ldr	r2, [r4, #4]
 80017ea:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80017ee:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4c5a      	ldr	r4, [pc, #360]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	6885      	ldr	r5, [r0, #8]
 80017f4:	6862      	ldr	r2, [r4, #4]
 80017f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017fa:	432a      	orrs	r2, r5
 80017fc:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	07db      	lsls	r3, r3, #31
 8001800:	4606      	mov	r6, r0
 8001802:	460c      	mov	r4, r1
 8001804:	d524      	bpl.n	8001850 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	f000 8092 	beq.w	8001936 <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001812:	2a02      	cmp	r2, #2
 8001814:	f000 8087 	beq.w	8001926 <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	0798      	lsls	r0, r3, #30
 800181a:	d529      	bpl.n	8001870 <HAL_RCC_ClockConfig+0xcc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181c:	4d4f      	ldr	r5, [pc, #316]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	686b      	ldr	r3, [r5, #4]
 8001824:	f023 0303 	bic.w	r3, r3, #3
 8001828:	4313      	orrs	r3, r2
 800182a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800182c:	f7ff faf0 	bl	8000e10 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001830:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001832:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001834:	2b01      	cmp	r3, #1
 8001836:	d065      	beq.n	8001904 <HAL_RCC_ClockConfig+0x160>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001838:	2b02      	cmp	r3, #2
 800183a:	d105      	bne.n	8001848 <HAL_RCC_ClockConfig+0xa4>
 800183c:	e06d      	b.n	800191a <HAL_RCC_ClockConfig+0x176>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7ff fae7 	bl	8000e10 <HAL_GetTick>
 8001842:	1bc0      	subs	r0, r0, r7
 8001844:	4540      	cmp	r0, r8
 8001846:	d872      	bhi.n	800192e <HAL_RCC_ClockConfig+0x18a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001848:	686b      	ldr	r3, [r5, #4]
 800184a:	f013 0f0c 	tst.w	r3, #12
 800184e:	d1f6      	bne.n	800183e <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001850:	4a41      	ldr	r2, [pc, #260]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 8001852:	6813      	ldr	r3, [r2, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	429c      	cmp	r4, r3
 800185a:	d20d      	bcs.n	8001878 <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f023 0307 	bic.w	r3, r3, #7
 8001862:	4323      	orrs	r3, r4
 8001864:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	429c      	cmp	r4, r3
 800186e:	d003      	beq.n	8001878 <HAL_RCC_ClockConfig+0xd4>
      return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
}
 8001872:	b006      	add	sp, #24
 8001874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	6833      	ldr	r3, [r6, #0]
 800187a:	0759      	lsls	r1, r3, #29
 800187c:	d506      	bpl.n	800188c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187e:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	68f0      	ldr	r0, [r6, #12]
 8001882:	684a      	ldr	r2, [r1, #4]
 8001884:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001888:	4302      	orrs	r2, r0
 800188a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	071a      	lsls	r2, r3, #28
 800188e:	d507      	bpl.n	80018a0 <HAL_RCC_ClockConfig+0xfc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001890:	4a32      	ldr	r2, [pc, #200]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	6931      	ldr	r1, [r6, #16]
 8001894:	6853      	ldr	r3, [r2, #4]
 8001896:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800189a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800189e:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018a0:	2601      	movs	r6, #1
 80018a2:	2502      	movs	r5, #2
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	af06      	add	r7, sp, #24
 80018a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018aa:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80018ae:	4c2b      	ldr	r4, [pc, #172]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018b0:	f88d 6004 	strb.w	r6, [sp, #4]
 80018b4:	f88d 5005 	strb.w	r5, [sp, #5]
  tmpreg = RCC->CFGR;
 80018b8:	6862      	ldr	r2, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80018ba:	f002 030c 	and.w	r3, r2, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d10a      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x134>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80018c6:	443b      	add	r3, r7
 80018c8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018cc:	03d3      	lsls	r3, r2, #15
 80018ce:	d436      	bmi.n	800193e <HAL_RCC_ClockConfig+0x19a>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018d2:	fb03 f301 	mul.w	r3, r3, r1
 80018d6:	e000      	b.n	80018da <HAL_RCC_ClockConfig+0x136>
      sysclockfreq = HSE_VALUE;
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018da:	4a20      	ldr	r2, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	4823      	ldr	r0, [pc, #140]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	6852      	ldr	r2, [r2, #4]
 80018e0:	4923      	ldr	r1, [pc, #140]	; (8001970 <HAL_RCC_ClockConfig+0x1cc>)
 80018e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80018e6:	5c82      	ldrb	r2, [r0, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018e8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	40d3      	lsrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018ee:	f7ff fa4d 	bl	8000d8c <HAL_InitTick>
  return HAL_OK;
 80018f2:	2000      	movs	r0, #0
}
 80018f4:	b006      	add	sp, #24
 80018f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fa:	f7ff fa89 	bl	8000e10 <HAL_GetTick>
 80018fe:	1bc0      	subs	r0, r0, r7
 8001900:	4540      	cmp	r0, r8
 8001902:	d814      	bhi.n	800192e <HAL_RCC_ClockConfig+0x18a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001904:	686b      	ldr	r3, [r5, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d1f5      	bne.n	80018fa <HAL_RCC_ClockConfig+0x156>
 800190e:	e79f      	b.n	8001850 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff fa7e 	bl	8000e10 <HAL_GetTick>
 8001914:	1bc0      	subs	r0, r0, r7
 8001916:	4540      	cmp	r0, r8
 8001918:	d809      	bhi.n	800192e <HAL_RCC_ClockConfig+0x18a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191a:	686b      	ldr	r3, [r5, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d1f5      	bne.n	8001910 <HAL_RCC_ClockConfig+0x16c>
 8001924:	e794      	b.n	8001850 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	019d      	lsls	r5, r3, #6
 8001928:	f53f af78 	bmi.w	800181c <HAL_RCC_ClockConfig+0x78>
 800192c:	e7a0      	b.n	8001870 <HAL_RCC_ClockConfig+0xcc>
          return HAL_TIMEOUT;
 800192e:	2003      	movs	r0, #3
}
 8001930:	b006      	add	sp, #24
 8001932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	039f      	lsls	r7, r3, #14
 8001938:	f53f af70 	bmi.w	800181c <HAL_RCC_ClockConfig+0x78>
 800193c:	e798      	b.n	8001870 <HAL_RCC_ClockConfig+0xcc>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800193e:	6862      	ldr	r2, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001942:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001946:	fb03 f301 	mul.w	r3, r3, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194a:	443a      	add	r2, r7
 800194c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001950:	fbb3 f3f2 	udiv	r3, r3, r2
 8001954:	e7c1      	b.n	80018da <HAL_RCC_ClockConfig+0x136>
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000
 800195c:	40021000 	.word	0x40021000
 8001960:	08005dd8 	.word	0x08005dd8
 8001964:	003d0900 	.word	0x003d0900
 8001968:	007a1200 	.word	0x007a1200
 800196c:	08005e7c 	.word	0x08005e7c
 8001970:	2000000c 	.word	0x2000000c

08001974 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001976:	4905      	ldr	r1, [pc, #20]	; (800198c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001978:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800197c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	6810      	ldr	r0, [r2, #0]
}    
 8001984:	40d8      	lsrs	r0, r3
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000
 800198c:	08005e8c 	.word	0x08005e8c
 8001990:	2000000c 	.word	0x2000000c

08001994 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001996:	4905      	ldr	r1, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001998:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800199c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	6810      	ldr	r0, [r2, #0]
} 
 80019a4:	40d8      	lsrs	r0, r3
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08005e8c 	.word	0x08005e8c
 80019b0:	2000000c 	.word	0x2000000c

080019b4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019b8:	4682      	mov	sl, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019ba:	6804      	ldr	r4, [r0, #0]
 80019bc:	68c1      	ldr	r1, [r0, #12]
 80019be:	6922      	ldr	r2, [r4, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019c0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019c6:	430a      	orrs	r2, r1
 80019c8:	6122      	str	r2, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80019ca:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019cc:	6900      	ldr	r0, [r0, #16]
 80019ce:	f8da 1014 	ldr.w	r1, [sl, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80019d2:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019d6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80019d8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019dc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80019de:	4313      	orrs	r3, r2
 80019e0:	60e3      	str	r3, [r4, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e2:	6963      	ldr	r3, [r4, #20]
 80019e4:	f8da 1018 	ldr.w	r1, [sl, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <UART_SetConfig+0x17c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ee:	430b      	orrs	r3, r1
  if(huart->Instance == USART1)
 80019f0:	4294      	cmp	r4, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019f2:	6163      	str	r3, [r4, #20]
  if(huart->Instance == USART1)
 80019f4:	d059      	beq.n	8001aaa <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019f6:	f7ff ffbd 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 80019fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80019fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0c:	4f49      	ldr	r7, [pc, #292]	; (8001b34 <UART_SetConfig+0x180>)
 8001a0e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a12:	fba7 2303 	umull	r2, r3, r7, r3
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	011d      	lsls	r5, r3, #4
 8001a1a:	f7ff ffab 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8001a1e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a26:	0093      	lsls	r3, r2, #2
 8001a28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a2c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001a30:	f7ff ffa0 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8001a34:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a3c:	0093      	lsls	r3, r2, #2
 8001a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	fba7 2303 	umull	r2, r3, r7, r3
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	fb08 6313 	mls	r3, r8, r3, r6
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	3332      	adds	r3, #50	; 0x32
 8001a54:	fba7 2303 	umull	r2, r3, r7, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001a5e:	f7ff ff89 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8001a62:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a6e:	0093      	lsls	r3, r2, #2
 8001a70:	fbb0 f9f3 	udiv	r9, r0, r3
 8001a74:	f7ff ff7e 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8001a78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001a7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8a:	fba7 2303 	umull	r2, r3, r7, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	fb08 9313 	mls	r3, r8, r3, r9
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	3332      	adds	r3, #50	; 0x32
 8001a98:	fba7 2303 	umull	r2, r3, r7, r3
 8001a9c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001aa0:	4333      	orrs	r3, r6
 8001aa2:	442b      	add	r3, r5
 8001aa4:	60a3      	str	r3, [r4, #8]
 8001aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001aaa:	f7ff ff73 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 8001aae:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001ab2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ab6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac0:	4f1c      	ldr	r7, [pc, #112]	; (8001b34 <UART_SetConfig+0x180>)
 8001ac2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001ac6:	fba7 2303 	umull	r2, r3, r7, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	011d      	lsls	r5, r3, #4
 8001ace:	f7ff ff61 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 8001ad2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ada:	0093      	lsls	r3, r2, #2
 8001adc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ae0:	fbb0 f6f3 	udiv	r6, r0, r3
 8001ae4:	f7ff ff56 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 8001ae8:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af0:	0093      	lsls	r3, r2, #2
 8001af2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	fba7 2303 	umull	r2, r3, r7, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	fb08 6313 	mls	r3, r8, r3, r6
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	3332      	adds	r3, #50	; 0x32
 8001b08:	fba7 2303 	umull	r2, r3, r7, r3
 8001b0c:	095b      	lsrs	r3, r3, #5
 8001b0e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001b12:	f7ff ff3f 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 8001b16:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001b1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b1e:	0093      	lsls	r3, r2, #2
 8001b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b24:	fbb0 f9f3 	udiv	r9, r0, r3
 8001b28:	f7ff ff34 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 8001b2c:	e7a4      	b.n	8001a78 <UART_SetConfig+0xc4>
 8001b2e:	bf00      	nop
 8001b30:	40013800 	.word	0x40013800
 8001b34:	51eb851f 	.word	0x51eb851f

08001b38 <HAL_UART_Init>:
  if(huart == NULL)
 8001b38:	b360      	cbz	r0, 8001b94 <HAL_UART_Init+0x5c>
{
 8001b3a:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b3c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b40:	4604      	mov	r4, r0
 8001b42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b46:	b303      	cbz	r3, 8001b8a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b48:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b4a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b50:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b52:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b58:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b5a:	f7ff ff2b 	bl	80019b4 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	2500      	movs	r5, #0
  huart->gState= HAL_UART_STATE_READY;
 8001b60:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b62:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8001b64:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b74:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b7c:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b80:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b84:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b8a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b8e:	f000 fe69 	bl	8002864 <HAL_UART_MspInit>
 8001b92:	e7d9      	b.n	8001b48 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
 8001b96:	4770      	bx	lr

08001b98 <HAL_UART_Transmit>:
{
 8001b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b9c:	4605      	mov	r5, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001b9e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
{
 8001ba2:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 8001ba4:	2820      	cmp	r0, #32
 8001ba6:	d003      	beq.n	8001bb0 <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 8001ba8:	2002      	movs	r0, #2
}
 8001baa:	b002      	add	sp, #8
 8001bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bb0:	460f      	mov	r7, r1
    if((pData == NULL) || (Size == 0U))
 8001bb2:	b359      	cbz	r1, 8001c0c <HAL_UART_Transmit+0x74>
 8001bb4:	b352      	cbz	r2, 8001c0c <HAL_UART_Transmit+0x74>
 8001bb6:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8001bb8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d0f3      	beq.n	8001ba8 <HAL_UART_Transmit+0x10>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc0:	2000      	movs	r0, #0
    __HAL_LOCK(huart);
 8001bc2:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc6:	63e8      	str	r0, [r5, #60]	; 0x3c
    __HAL_LOCK(huart);
 8001bc8:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bcc:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 8001bd0:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8001bd2:	f7ff f91d 	bl	8000e10 <HAL_GetTick>
 8001bd6:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001bd8:	9a01      	ldr	r2, [sp, #4]
 8001bda:	682c      	ldr	r4, [r5, #0]
 8001bdc:	84aa      	strh	r2, [r5, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bde:	84ea      	strh	r2, [r5, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001be0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03a      	beq.n	8001c5e <HAL_UART_Transmit+0xc6>
      huart->TxXferCount--;
 8001be8:	8cea      	ldrh	r2, [r5, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bea:	68a9      	ldr	r1, [r5, #8]
      huart->TxXferCount--;
 8001bec:	3a01      	subs	r2, #1
 8001bee:	b292      	uxth	r2, r2
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bf0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8001bf4:	84ea      	strh	r2, [r5, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bf6:	d017      	beq.n	8001c28 <HAL_UART_Transmit+0x90>
 8001bf8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001bfc:	d13d      	bne.n	8001c7a <HAL_UART_Transmit+0xe2>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	0610      	lsls	r0, r2, #24
 8001c02:	d5fc      	bpl.n	8001bfe <HAL_UART_Transmit+0x66>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c04:	783b      	ldrb	r3, [r7, #0]
 8001c06:	3701      	adds	r7, #1
 8001c08:	6063      	str	r3, [r4, #4]
 8001c0a:	e7e9      	b.n	8001be0 <HAL_UART_Transmit+0x48>
      return  HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e7cc      	b.n	8001baa <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	d40e      	bmi.n	8001c34 <HAL_UART_Transmit+0x9c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c16:	f1b8 0f00 	cmp.w	r8, #0
 8001c1a:	d03a      	beq.n	8001c92 <HAL_UART_Transmit+0xfa>
 8001c1c:	f7ff f8f8 	bl	8000e10 <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	4580      	cmp	r8, r0
 8001c24:	682c      	ldr	r4, [r5, #0]
 8001c26:	d334      	bcc.n	8001c92 <HAL_UART_Transmit+0xfa>
 8001c28:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_UART_Transmit+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c2e:	6822      	ldr	r2, [r4, #0]
 8001c30:	0612      	lsls	r2, r2, #24
 8001c32:	d5fc      	bpl.n	8001c2e <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c34:	883b      	ldrh	r3, [r7, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c36:	692a      	ldr	r2, [r5, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	6063      	str	r3, [r4, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d139      	bne.n	8001cb6 <HAL_UART_Transmit+0x11e>
          pData +=2U;
 8001c42:	3702      	adds	r7, #2
 8001c44:	e7cc      	b.n	8001be0 <HAL_UART_Transmit+0x48>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	065b      	lsls	r3, r3, #25
 8001c4a:	d40e      	bmi.n	8001c6a <HAL_UART_Transmit+0xd2>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c4c:	f1b8 0f00 	cmp.w	r8, #0
 8001c50:	d01f      	beq.n	8001c92 <HAL_UART_Transmit+0xfa>
 8001c52:	f7ff f8dd 	bl	8000e10 <HAL_GetTick>
 8001c56:	1b80      	subs	r0, r0, r6
 8001c58:	4580      	cmp	r8, r0
 8001c5a:	682c      	ldr	r4, [r5, #0]
 8001c5c:	d319      	bcc.n	8001c92 <HAL_UART_Transmit+0xfa>
 8001c5e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001c62:	d1f0      	bne.n	8001c46 <HAL_UART_Transmit+0xae>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	065a      	lsls	r2, r3, #25
 8001c68:	d5fc      	bpl.n	8001c64 <HAL_UART_Transmit+0xcc>
    __HAL_UNLOCK(huart);
 8001c6a:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 8001c6c:	2220      	movs	r2, #32
    return HAL_OK;
 8001c6e:	4618      	mov	r0, r3
    __HAL_UNLOCK(huart);
 8001c70:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001c74:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    return HAL_OK;
 8001c78:	e797      	b.n	8001baa <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	0619      	lsls	r1, r3, #24
 8001c7e:	d4c1      	bmi.n	8001c04 <HAL_UART_Transmit+0x6c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c80:	f1b8 0f00 	cmp.w	r8, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_UART_Transmit+0xfa>
 8001c86:	f7ff f8c3 	bl	8000e10 <HAL_GetTick>
 8001c8a:	1b80      	subs	r0, r0, r6
 8001c8c:	4580      	cmp	r8, r0
 8001c8e:	682c      	ldr	r4, [r5, #0]
 8001c90:	d2b2      	bcs.n	8001bf8 <HAL_UART_Transmit+0x60>
        huart->gState  = HAL_UART_STATE_READY;
 8001c92:	2220      	movs	r2, #32
        __HAL_UNLOCK(huart);
 8001c94:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c96:	68e3      	ldr	r3, [r4, #12]
      return HAL_TIMEOUT;
 8001c98:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c9e:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca0:	6963      	ldr	r3, [r4, #20]
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6163      	str	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001ca8:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8001cac:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8001cb0:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
 8001cb4:	e779      	b.n	8001baa <HAL_UART_Transmit+0x12>
          pData +=1U;
 8001cb6:	3701      	adds	r7, #1
 8001cb8:	e792      	b.n	8001be0 <HAL_UART_Transmit+0x48>
 8001cba:	bf00      	nop

08001cbc <HAL_UART_Receive_DMA>:
{
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001cbe:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 8001cc2:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001cc4:	2c20      	cmp	r4, #32
 8001cc6:	d002      	beq.n	8001cce <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8001cc8:	2002      	movs	r0, #2
}
 8001cca:	b003      	add	sp, #12
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL) || (Size == 0U))
 8001cce:	2900      	cmp	r1, #0
 8001cd0:	d035      	beq.n	8001d3e <HAL_UART_Receive_DMA+0x82>
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d033      	beq.n	8001d3e <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 8001cd6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d0f4      	beq.n	8001cc8 <HAL_UART_Receive_DMA+0xc>
 8001cde:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 8001ce4:	2701      	movs	r7, #1
 8001ce6:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ce8:	2622      	movs	r6, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001cea:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001cec:	4915      	ldr	r1, [pc, #84]	; (8001d44 <HAL_UART_Receive_DMA+0x88>)
    huart->pRxBuffPtr = pData;
 8001cee:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001cf0:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf2:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8001cf4:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cf8:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001cfc:	4f12      	ldr	r7, [pc, #72]	; (8001d48 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001cfe:	6281      	str	r1, [r0, #40]	; 0x28
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d00:	4e12      	ldr	r6, [pc, #72]	; (8001d4c <HAL_UART_Receive_DMA+0x90>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001d02:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8001d04:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d06:	62c7      	str	r7, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d08:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001d0a:	3104      	adds	r1, #4
 8001d0c:	f7ff f938 	bl	8000f80 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	9501      	str	r5, [sp, #4]
 8001d14:	681a      	ldr	r2, [r3, #0]
    return HAL_OK;
 8001d16:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d18:	9201      	str	r2, [sp, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8001d1c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d20:	9201      	str	r2, [sp, #4]
 8001d22:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d2a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3a:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001d3c:	e7c5      	b.n	8001cca <HAL_UART_Receive_DMA+0xe>
      return HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	e7c3      	b.n	8001cca <HAL_UART_Receive_DMA+0xe>
 8001d42:	bf00      	nop
 8001d44:	08001d59 	.word	0x08001d59
 8001d48:	08001e1d 	.word	0x08001e1d
 8001d4c:	08001e2d 	.word	0x08001e2d

08001d50 <HAL_UART_TxCpltCallback>:
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <HAL_UART_RxCpltCallback>:
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <UART_DMAReceiveCplt>:
{
 8001d58:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f013 0320 	ands.w	r3, r3, #32
 8001d64:	d110      	bne.n	8001d88 <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 8001d66:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d68:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8001d6a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d6c:	68d3      	ldr	r3, [r2, #12]
 8001d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d72:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d74:	6953      	ldr	r3, [r2, #20]
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d7c:	6953      	ldr	r3, [r2, #20]
 8001d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d82:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001d84:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001d88:	f7ff ffe4 	bl	8001d54 <HAL_UART_RxCpltCallback>
 8001d8c:	bd08      	pop	{r3, pc}
 8001d8e:	bf00      	nop

08001d90 <UART_Receive_IT.part.1>:
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d90:	6883      	ldr	r3, [r0, #8]
 8001d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d96:	d02c      	beq.n	8001df2 <UART_Receive_IT.part.1+0x62>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d98:	6903      	ldr	r3, [r0, #16]
 8001d9a:	b173      	cbz	r3, 8001dba <UART_Receive_IT.part.1+0x2a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d9c:	6803      	ldr	r3, [r0, #0]
 8001d9e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	1c51      	adds	r1, r2, #1
 8001da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da8:	6281      	str	r1, [r0, #40]	; 0x28
 8001daa:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8001dac:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001db4:	b143      	cbz	r3, 8001dc8 <UART_Receive_IT.part.1+0x38>
}
 8001db6:	2000      	movs	r0, #0
 8001db8:	4770      	bx	lr
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dba:	6802      	ldr	r2, [r0, #0]
 8001dbc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dbe:	6852      	ldr	r2, [r2, #4]
 8001dc0:	1c59      	adds	r1, r3, #1
 8001dc2:	6281      	str	r1, [r0, #40]	; 0x28
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e7f1      	b.n	8001dac <UART_Receive_IT.part.1+0x1c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001dc8:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8001dca:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001dcc:	6802      	ldr	r2, [r0, #0]
 8001dce:	68d1      	ldr	r1, [r2, #12]
 8001dd0:	f021 0120 	bic.w	r1, r1, #32
 8001dd4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001dd6:	68d1      	ldr	r1, [r2, #12]
 8001dd8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001ddc:	60d1      	str	r1, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001dde:	6951      	ldr	r1, [r2, #20]
 8001de0:	f021 0101 	bic.w	r1, r1, #1
 8001de4:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001de6:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001dea:	f7ff ffb3 	bl	8001d54 <HAL_UART_RxCpltCallback>
}
 8001dee:	2000      	movs	r0, #0
 8001df0:	bd10      	pop	{r4, pc}
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001df2:	6902      	ldr	r2, [r0, #16]
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001df6:	b93a      	cbnz	r2, 8001e08 <UART_Receive_IT.part.1+0x78>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001df8:	6802      	ldr	r2, [r0, #0]
 8001dfa:	6852      	ldr	r2, [r2, #4]
 8001dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e00:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8001e04:	6283      	str	r3, [r0, #40]	; 0x28
 8001e06:	e7d1      	b.n	8001dac <UART_Receive_IT.part.1+0x1c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e08:	6802      	ldr	r2, [r0, #0]
 8001e0a:	6852      	ldr	r2, [r2, #4]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001e12:	6283      	str	r3, [r0, #40]	; 0x28
 8001e14:	e7ca      	b.n	8001dac <UART_Receive_IT.part.1+0x1c>
 8001e16:	bf00      	nop

08001e18 <HAL_UART_RxHalfCpltCallback>:
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop

08001e1c <UART_DMARxHalfCplt>:
{
 8001e1c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8001e1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001e20:	f7ff fffa 	bl	8001e18 <HAL_UART_RxHalfCpltCallback>
 8001e24:	bd08      	pop	{r3, pc}
 8001e26:	bf00      	nop

08001e28 <HAL_UART_ErrorCallback>:
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <UART_DMAError>:
{
 8001e2c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	6950      	ldr	r0, [r2, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e34:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8001e38:	2921      	cmp	r1, #33	; 0x21
 8001e3a:	d01c      	beq.n	8001e76 <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001e3c:	6950      	ldr	r0, [r2, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e3e:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8001e42:	2922      	cmp	r1, #34	; 0x22
 8001e44:	d007      	beq.n	8001e56 <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001e48:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e4a:	f042 0210 	orr.w	r2, r2, #16
 8001e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001e50:	f7ff ffea 	bl	8001e28 <HAL_UART_ErrorCallback>
 8001e54:	bd08      	pop	{r3, pc}
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e56:	0641      	lsls	r1, r0, #25
 8001e58:	d5f5      	bpl.n	8001e46 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8001e5a:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001e5c:	2020      	movs	r0, #32
    huart->RxXferCount = 0U;
 8001e5e:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e60:	68d1      	ldr	r1, [r2, #12]
 8001e62:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001e66:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e68:	6951      	ldr	r1, [r2, #20]
 8001e6a:	f021 0101 	bic.w	r1, r1, #1
 8001e6e:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8001e74:	e7e7      	b.n	8001e46 <UART_DMAError+0x1a>
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e76:	0600      	lsls	r0, r0, #24
 8001e78:	d5e0      	bpl.n	8001e3c <UART_DMAError+0x10>
    huart->TxXferCount = 0U;
 8001e7a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8001e7c:	2020      	movs	r0, #32
    huart->TxXferCount = 0U;
 8001e7e:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e80:	68d1      	ldr	r1, [r2, #12]
 8001e82:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001e86:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e88:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 8001e8c:	e7d6      	b.n	8001e3c <UART_DMAError+0x10>
 8001e8e:	bf00      	nop

08001e90 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e90:	6803      	ldr	r3, [r0, #0]
{
 8001e92:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e94:	681a      	ldr	r2, [r3, #0]
{
 8001e96:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001e98:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e9a:	68dd      	ldr	r5, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e9c:	6959      	ldr	r1, [r3, #20]
  if(errorflags == RESET)
 8001e9e:	d04a      	beq.n	8001f36 <HAL_UART_IRQHandler+0xa6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ea0:	f011 0101 	ands.w	r1, r1, #1
 8001ea4:	d053      	beq.n	8001f4e <HAL_UART_IRQHandler+0xbe>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ea6:	07d6      	lsls	r6, r2, #31
 8001ea8:	d505      	bpl.n	8001eb6 <HAL_UART_IRQHandler+0x26>
 8001eaa:	05e8      	lsls	r0, r5, #23
 8001eac:	d503      	bpl.n	8001eb6 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001eb0:	f040 0001 	orr.w	r0, r0, #1
 8001eb4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eb6:	0756      	lsls	r6, r2, #29
 8001eb8:	d57b      	bpl.n	8001fb2 <HAL_UART_IRQHandler+0x122>
 8001eba:	2900      	cmp	r1, #0
 8001ebc:	f000 8085 	beq.w	8001fca <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ec0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec2:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ec4:	f041 0102 	orr.w	r1, r1, #2
 8001ec8:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eca:	d577      	bpl.n	8001fbc <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ecc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ece:	f041 0104 	orr.w	r1, r1, #4
 8001ed2:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ed4:	0711      	lsls	r1, r2, #28
 8001ed6:	d473      	bmi.n	8001fc0 <HAL_UART_IRQHandler+0x130>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ed8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001eda:	2900      	cmp	r1, #0
 8001edc:	d02a      	beq.n	8001f34 <HAL_UART_IRQHandler+0xa4>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ede:	0691      	lsls	r1, r2, #26
 8001ee0:	d505      	bpl.n	8001eee <HAL_UART_IRQHandler+0x5e>
 8001ee2:	06aa      	lsls	r2, r5, #26
 8001ee4:	d503      	bpl.n	8001eee <HAL_UART_IRQHandler+0x5e>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001ee6:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001eea:	2a22      	cmp	r2, #34	; 0x22
 8001eec:	d07d      	beq.n	8001fea <HAL_UART_IRQHandler+0x15a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eee:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ef0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ef2:	070e      	lsls	r6, r1, #28
 8001ef4:	d402      	bmi.n	8001efc <HAL_UART_IRQHandler+0x6c>
 8001ef6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001efa:	d07b      	beq.n	8001ff4 <HAL_UART_IRQHandler+0x164>
  huart->RxState = HAL_UART_STATE_READY;
 8001efc:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f04:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001f0e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	0655      	lsls	r5, r2, #25
 8001f16:	d55f      	bpl.n	8001fd8 <HAL_UART_IRQHandler+0x148>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f18:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f20:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001f22:	2900      	cmp	r1, #0
 8001f24:	d058      	beq.n	8001fd8 <HAL_UART_IRQHandler+0x148>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f26:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <HAL_UART_IRQHandler+0x188>)
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f28:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f2a:	634b      	str	r3, [r1, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f2c:	f7ff f86c 	bl	8001008 <HAL_DMA_Abort_IT>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d155      	bne.n	8001fe0 <HAL_UART_IRQHandler+0x150>
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f36:	0696      	lsls	r6, r2, #26
 8001f38:	d50c      	bpl.n	8001f54 <HAL_UART_IRQHandler+0xc4>
 8001f3a:	06a9      	lsls	r1, r5, #26
 8001f3c:	d50a      	bpl.n	8001f54 <HAL_UART_IRQHandler+0xc4>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001f3e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001f42:	2b22      	cmp	r3, #34	; 0x22
 8001f44:	d1f6      	bne.n	8001f34 <HAL_UART_IRQHandler+0xa4>
}
 8001f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f4a:	f7ff bf21 	b.w	8001d90 <UART_Receive_IT.part.1>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f4e:	f415 7f90 	tst.w	r5, #288	; 0x120
 8001f52:	d1a8      	bne.n	8001ea6 <HAL_UART_IRQHandler+0x16>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f54:	0610      	lsls	r0, r2, #24
 8001f56:	d40e      	bmi.n	8001f76 <HAL_UART_IRQHandler+0xe6>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f58:	0656      	lsls	r6, r2, #25
 8001f5a:	d5eb      	bpl.n	8001f34 <HAL_UART_IRQHandler+0xa4>
 8001f5c:	066d      	lsls	r5, r5, #25
 8001f5e:	d5e9      	bpl.n	8001f34 <HAL_UART_IRQHandler+0xa4>
  huart->gState = HAL_UART_STATE_READY;
 8001f60:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f62:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001f64:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f6c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001f70:	f7ff feee 	bl	8001d50 <HAL_UART_TxCpltCallback>
 8001f74:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f76:	0629      	lsls	r1, r5, #24
 8001f78:	d5ee      	bpl.n	8001f58 <HAL_UART_IRQHandler+0xc8>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f7a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f7e:	2a21      	cmp	r2, #33	; 0x21
 8001f80:	d1d8      	bne.n	8001f34 <HAL_UART_IRQHandler+0xa4>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f82:	68a2      	ldr	r2, [r4, #8]
 8001f84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001f88:	6a22      	ldr	r2, [r4, #32]
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f8a:	d038      	beq.n	8001ffe <HAL_UART_IRQHandler+0x16e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f8c:	1c51      	adds	r1, r2, #1
 8001f8e:	6221      	str	r1, [r4, #32]
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0U)
 8001f94:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f96:	3a01      	subs	r2, #1
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001f9c:	2a00      	cmp	r2, #0
 8001f9e:	d1c9      	bne.n	8001f34 <HAL_UART_IRQHandler+0xa4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fb2:	0796      	lsls	r6, r2, #30
 8001fb4:	d50b      	bpl.n	8001fce <HAL_UART_IRQHandler+0x13e>
 8001fb6:	2900      	cmp	r1, #0
 8001fb8:	d188      	bne.n	8001ecc <HAL_UART_IRQHandler+0x3c>
 8001fba:	e78d      	b.n	8001ed8 <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fbc:	0711      	lsls	r1, r2, #28
 8001fbe:	d58b      	bpl.n	8001ed8 <HAL_UART_IRQHandler+0x48>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001fc2:	f041 0108 	orr.w	r1, r1, #8
 8001fc6:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001fc8:	e786      	b.n	8001ed8 <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fca:	0790      	lsls	r0, r2, #30
 8001fcc:	d484      	bmi.n	8001ed8 <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fce:	0710      	lsls	r0, r2, #28
 8001fd0:	d582      	bpl.n	8001ed8 <HAL_UART_IRQHandler+0x48>
 8001fd2:	2900      	cmp	r1, #0
 8001fd4:	d080      	beq.n	8001ed8 <HAL_UART_IRQHandler+0x48>
 8001fd6:	e7f3      	b.n	8001fc0 <HAL_UART_IRQHandler+0x130>
            HAL_UART_ErrorCallback(huart);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ff25 	bl	8001e28 <HAL_UART_ErrorCallback>
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fe0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fe6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fe8:	4718      	bx	r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff fed0 	bl	8001d90 <UART_Receive_IT.part.1>
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	e77c      	b.n	8001eee <HAL_UART_IRQHandler+0x5e>
        HAL_UART_ErrorCallback(huart);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff17 	bl	8001e28 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ffe:	8811      	ldrh	r1, [r2, #0]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002000:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002002:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002006:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002008:	b910      	cbnz	r0, 8002010 <HAL_UART_IRQHandler+0x180>
        huart->pTxBuffPtr += 2U;
 800200a:	3202      	adds	r2, #2
 800200c:	6222      	str	r2, [r4, #32]
 800200e:	e7c1      	b.n	8001f94 <HAL_UART_IRQHandler+0x104>
        huart->pTxBuffPtr += 1U;
 8002010:	3201      	adds	r2, #1
 8002012:	6222      	str	r2, [r4, #32]
 8002014:	e7be      	b.n	8001f94 <HAL_UART_IRQHandler+0x104>
 8002016:	bf00      	nop
 8002018:	0800201d 	.word	0x0800201d

0800201c <UART_DMAAbortOnError>:
  huart->RxXferCount = 0x00U;
 800201c:	2200      	movs	r2, #0
{
 800201e:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002020:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002022:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8002024:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8002026:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002028:	f7ff fefe 	bl	8001e28 <HAL_UART_ErrorCallback>
 800202c:	bd08      	pop	{r3, pc}
 800202e:	bf00      	nop

08002030 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_DMA_Init+0x30>)
{
 8002032:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002034:	6958      	ldr	r0, [r3, #20]
{
 8002036:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002038:	f040 0001 	orr.w	r0, r0, #1
 800203c:	6158      	str	r0, [r3, #20]
 800203e:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002040:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002042:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002046:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002048:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800204a:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 800204c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800204e:	f7fe ff09 	bl	8000e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002052:	200f      	movs	r0, #15
 8002054:	f7fe ff3c 	bl	8000ed0 <HAL_NVIC_EnableIRQ>

}
 8002058:	b003      	add	sp, #12
 800205a:	f85d fb04 	ldr.w	pc, [sp], #4
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <MX_GPIO_Init+0x2c>)
{
 8002066:	b082      	sub	sp, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	619a      	str	r2, [r3, #24]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	f002 0220 	and.w	r2, r2, #32
 8002076:	9200      	str	r2, [sp, #0]
 8002078:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	f042 0204 	orr.w	r2, r2, #4
 8002080:	619a      	str	r2, [r3, #24]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	9b01      	ldr	r3, [sp, #4]

}
 800208c:	b002      	add	sp, #8
 800208e:	4770      	bx	lr
 8002090:	40021000 	.word	0x40021000

08002094 <BTN_Setting_Released>:
    {
    Nextion_Set_Text("b0", "Pressed");
    }
void BTN_Setting_Released()
    {
    Nextion_Set_Text("b0", "Released");
 8002094:	4901      	ldr	r1, [pc, #4]	; (800209c <BTN_Setting_Released+0x8>)
 8002096:	4802      	ldr	r0, [pc, #8]	; (80020a0 <BTN_Setting_Released+0xc>)
 8002098:	f000 ba7a 	b.w	8002590 <Nextion_Set_Text>
 800209c:	08005de8 	.word	0x08005de8
 80020a0:	08005df4 	.word	0x08005df4

080020a4 <Page_1_Touched>:
void Page_1_Touched()
    {
    //Nextion_Hide_Object("b0",true);

    uint32_t timeout = 0xFFFF;
    Page_RCV_Flag = 0;
 80020a4:	2300      	movs	r3, #0
    {
 80020a6:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 80020a8:	4c0d      	ldr	r4, [pc, #52]	; (80020e0 <Page_1_Touched+0x3c>)
 80020aa:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 80020ac:	f000 faf0 	bl	8002690 <Nextion_Get_Current_Page>
 80020b0:	7823      	ldrb	r3, [r4, #0]
 80020b2:	b92b      	cbnz	r3, 80020c0 <Page_1_Touched+0x1c>
	    Nextion_Set_BCK_Colour("b0", 63488);
	    }
	}

    Nextion_Backlight_Brightness(50, 0);
    }
 80020b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(50, 0);
 80020b8:	2100      	movs	r1, #0
 80020ba:	2032      	movs	r0, #50	; 0x32
 80020bc:	f000 bac0 	b.w	8002640 <Nextion_Backlight_Brightness>
	if (Current_Page == 1)
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <Page_1_Touched+0x40>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d1f5      	bne.n	80020b4 <Page_1_Touched+0x10>
	    Nextion_Set_BCK_Colour("b0", 63488);
 80020c8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <Page_1_Touched+0x44>)
 80020ce:	f000 fa81 	bl	80025d4 <Nextion_Set_BCK_Colour>
    }
 80020d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(50, 0);
 80020d6:	2100      	movs	r1, #0
 80020d8:	2032      	movs	r0, #50	; 0x32
 80020da:	f000 bab1 	b.w	8002640 <Nextion_Backlight_Brightness>
 80020de:	bf00      	nop
 80020e0:	200009e4 	.word	0x200009e4
 80020e4:	200009dc 	.word	0x200009dc
 80020e8:	08005df4 	.word	0x08005df4

080020ec <Page_1_Released>:

void Page_1_Released()
    {
    //Nextion_Hide_Object("b0",false);
    uint32_t timeout = 0xFFFF;
    Page_RCV_Flag = 0;
 80020ec:	2300      	movs	r3, #0
    {
 80020ee:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 80020f0:	4c0d      	ldr	r4, [pc, #52]	; (8002128 <Page_1_Released+0x3c>)
 80020f2:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 80020f4:	f000 facc 	bl	8002690 <Nextion_Get_Current_Page>
 80020f8:	7823      	ldrb	r3, [r4, #0]
 80020fa:	b92b      	cbnz	r3, 8002108 <Page_1_Released+0x1c>
	    Nextion_Set_BCK_Colour("b0", 48631);
	    }
	}

    Nextion_Backlight_Brightness(80, 0);
    }
 80020fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(80, 0);
 8002100:	2100      	movs	r1, #0
 8002102:	2050      	movs	r0, #80	; 0x50
 8002104:	f000 ba9c 	b.w	8002640 <Nextion_Backlight_Brightness>
	if (Current_Page == 1)
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <Page_1_Released+0x40>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d1f5      	bne.n	80020fc <Page_1_Released+0x10>
	    Nextion_Set_BCK_Colour("b0", 48631);
 8002110:	f64b 51f7 	movw	r1, #48631	; 0xbdf7
 8002114:	4806      	ldr	r0, [pc, #24]	; (8002130 <Page_1_Released+0x44>)
 8002116:	f000 fa5d 	bl	80025d4 <Nextion_Set_BCK_Colour>
    }
 800211a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(80, 0);
 800211e:	2100      	movs	r1, #0
 8002120:	2050      	movs	r0, #80	; 0x50
 8002122:	f000 ba8d 	b.w	8002640 <Nextion_Backlight_Brightness>
 8002126:	bf00      	nop
 8002128:	200009e4 	.word	0x200009e4
 800212c:	200009dc 	.word	0x200009dc
 8002130:	08005df4 	.word	0x08005df4

08002134 <Page_0_Touched>:
    Page_RCV_Flag = 0;
 8002134:	2300      	movs	r3, #0
    {
 8002136:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 8002138:	4c08      	ldr	r4, [pc, #32]	; (800215c <Page_0_Touched+0x28>)
 800213a:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 800213c:	f000 faa8 	bl	8002690 <Nextion_Get_Current_Page>
 8002140:	7823      	ldrb	r3, [r4, #0]
 8002142:	b903      	cbnz	r3, 8002146 <Page_0_Touched+0x12>
 8002144:	bd10      	pop	{r4, pc}
	if (Current_Page == 0)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <Page_0_Touched+0x2c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1fa      	bne.n	8002144 <Page_0_Touched+0x10>
    }
 800214e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    Nextion_Set_BCK_Colour("b0", 63488);
 8002152:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002156:	4803      	ldr	r0, [pc, #12]	; (8002164 <Page_0_Touched+0x30>)
 8002158:	f000 ba3c 	b.w	80025d4 <Nextion_Set_BCK_Colour>
 800215c:	200009e4 	.word	0x200009e4
 8002160:	200009dc 	.word	0x200009dc
 8002164:	08005df4 	.word	0x08005df4

08002168 <Page_0_Released>:
    Page_RCV_Flag = 0;
 8002168:	2300      	movs	r3, #0
    {
 800216a:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 800216c:	4c10      	ldr	r4, [pc, #64]	; (80021b0 <Page_0_Released+0x48>)
 800216e:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 8002170:	f000 fa8e 	bl	8002690 <Nextion_Get_Current_Page>
 8002174:	7823      	ldrb	r3, [r4, #0]
 8002176:	b933      	cbnz	r3, 8002186 <Page_0_Released+0x1e>
    Page_0_Touch_Count++;
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <Page_0_Released+0x4c>)
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	3301      	adds	r3, #1
    if (Page_0_Touch_Count == 10)
 800217e:	2b0a      	cmp	r3, #10
 8002180:	d00f      	beq.n	80021a2 <Page_0_Released+0x3a>
    Page_0_Touch_Count++;
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	bd10      	pop	{r4, pc}
	if (Current_Page == 0)
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <Page_0_Released+0x50>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f4      	bne.n	8002178 <Page_0_Released+0x10>
	    Nextion_Set_BCK_Colour("b0", 48631);
 800218e:	f64b 51f7 	movw	r1, #48631	; 0xbdf7
 8002192:	480a      	ldr	r0, [pc, #40]	; (80021bc <Page_0_Released+0x54>)
 8002194:	f000 fa1e 	bl	80025d4 <Nextion_Set_BCK_Colour>
    Page_0_Touch_Count++;
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <Page_0_Released+0x4c>)
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	3301      	adds	r3, #1
    if (Page_0_Touch_Count == 10)
 800219e:	2b0a      	cmp	r3, #10
 80021a0:	d1ef      	bne.n	8002182 <Page_0_Released+0x1a>
    }
 80021a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Page_0_Touch_Count = 0;
 80021a6:	2300      	movs	r3, #0
	Nextion_Send_Command("page 4");
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <Page_0_Released+0x58>)
	Page_0_Touch_Count = 0;
 80021aa:	6013      	str	r3, [r2, #0]
	Nextion_Send_Command("page 4");
 80021ac:	f000 b920 	b.w	80023f0 <Nextion_Send_Command>
 80021b0:	200009e4 	.word	0x200009e4
 80021b4:	200009e0 	.word	0x200009e0
 80021b8:	200009dc 	.word	0x200009dc
 80021bc:	08005df4 	.word	0x08005df4
 80021c0:	08005df8 	.word	0x08005df8

080021c4 <Nextion_RX_Page_ID_Callback>:

void Nextion_RX_Page_ID_Callback(uint8_t Page_ID)
    {
    Page_RCV_Flag = 0;
 80021c4:	2100      	movs	r1, #0
 80021c6:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <Nextion_RX_Page_ID_Callback+0xc>)
    Current_Page = Page_ID;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <Nextion_RX_Page_ID_Callback+0x10>)
    Page_RCV_Flag = 0;
 80021ca:	7011      	strb	r1, [r2, #0]
    Current_Page = Page_ID;
 80021cc:	7018      	strb	r0, [r3, #0]
 80021ce:	4770      	bx	lr
 80021d0:	200009e4 	.word	0x200009e4
 80021d4:	200009dc 	.word	0x200009dc

080021d8 <Nextion_RX_String_Callback>:
    }

void Nextion_RX_String_Callback(const char* str)
    {
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <Nextion_RX_Number_Callback>:

    }

void Nextion_RX_Number_Callback(uint32_t Number)
    {
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <Nextion_CMD_Finished_Callback>:

    }

void Nextion_CMD_Finished_Callback()
    {
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 80021e4:	b530      	push	{r4, r5, lr}
 80021e6:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitTypeDef RCC_OscInitStruct =
 80021e8:	2228      	movs	r2, #40	; 0x28
 80021ea:	2100      	movs	r1, #0
 80021ec:	a806      	add	r0, sp, #24
 80021ee:	f000 fbe9 	bl	80029c4 <memset>
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f2:	2402      	movs	r4, #2
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80021f4:	2300      	movs	r3, #0
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f6:	2101      	movs	r1, #1
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021fc:	f44f 15e0 	mov.w	r5, #1835008	; 0x1c0000
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002200:	a806      	add	r0, sp, #24
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	9304      	str	r3, [sp, #16]
 800220a:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800220c:	9106      	str	r1, [sp, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800220e:	910a      	str	r1, [sp, #40]	; 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002210:	9207      	str	r2, [sp, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002212:	920e      	str	r2, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002214:	940d      	str	r4, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002216:	950f      	str	r5, [sp, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002218:	f7ff f8d8 	bl	80013cc <HAL_RCC_OscConfig>
 800221c:	b100      	cbz	r0, 8002220 <SystemClock_Config+0x3c>
 800221e:	e7fe      	b.n	800221e <SystemClock_Config+0x3a>
 8002220:	4603      	mov	r3, r0
	{
	Error_Handler();
	}
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002222:	250f      	movs	r5, #15
	    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002224:	f44f 6280 	mov.w	r2, #1024	; 0x400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002228:	a801      	add	r0, sp, #4
 800222a:	4621      	mov	r1, r4
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800222c:	9402      	str	r4, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222e:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002230:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002232:	9501      	str	r5, [sp, #4]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002234:	9204      	str	r2, [sp, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002236:	f7ff fab5 	bl	80017a4 <HAL_RCC_ClockConfig>
 800223a:	b100      	cbz	r0, 800223e <SystemClock_Config+0x5a>
 800223c:	e7fe      	b.n	800223c <SystemClock_Config+0x58>
	{
	Error_Handler();
	}
    }
 800223e:	b011      	add	sp, #68	; 0x44
 8002240:	bd30      	pop	{r4, r5, pc}
 8002242:	bf00      	nop

08002244 <main>:
    Page_0_Object.Component_ID = 0;
 8002244:	2400      	movs	r4, #0
    Page_1_Object.Page_ID = 1;
 8002246:	2501      	movs	r5, #1
    {
 8002248:	b500      	push	{lr}
 800224a:	b08d      	sub	sp, #52	; 0x34
    HAL_Init();
 800224c:	f7fe fdc2 	bl	8000dd4 <HAL_Init>
    SystemClock_Config();
 8002250:	f7ff ffc8 	bl	80021e4 <SystemClock_Config>
    MX_GPIO_Init();
 8002254:	f7ff ff06 	bl	8002064 <MX_GPIO_Init>
    MX_DMA_Init();
 8002258:	f7ff feea 	bl	8002030 <MX_DMA_Init>
    MX_USART1_UART_Init();
 800225c:	f000 fae6 	bl	800282c <MX_USART1_UART_Init>
    Nextion_Init();
 8002260:	f000 f850 	bl	8002304 <Nextion_Init>
    Page_0_Object.Push_Callback = &Page_0_Touched;
 8002264:	4914      	ldr	r1, [pc, #80]	; (80022b8 <main+0x74>)
    Page_0_Object.Pop_Callback = &Page_0_Released;
 8002266:	4a15      	ldr	r2, [pc, #84]	; (80022bc <main+0x78>)
    Page_0_Object.Name = "page 0";
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <main+0x7c>)
    Nextion_Add_Object(&Page_0_Object);
 800226a:	4668      	mov	r0, sp
    Page_0_Object.Push_Callback = &Page_0_Touched;
 800226c:	9102      	str	r1, [sp, #8]
    Page_0_Object.Pop_Callback = &Page_0_Released;
 800226e:	9203      	str	r2, [sp, #12]
    Page_0_Object.Name = "page 0";
 8002270:	9301      	str	r3, [sp, #4]
    Page_0_Object.Component_ID = 0;
 8002272:	f88d 4001 	strb.w	r4, [sp, #1]
    Page_0_Object.Page_ID = 0;
 8002276:	f88d 4000 	strb.w	r4, [sp]
    Nextion_Add_Object(&Page_0_Object);
 800227a:	f000 f82f 	bl	80022dc <Nextion_Add_Object>
    Page_1_Object.Push_Callback = &Page_1_Touched;
 800227e:	4911      	ldr	r1, [pc, #68]	; (80022c4 <main+0x80>)
    Page_1_Object.Pop_Callback = &Page_1_Released;
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <main+0x84>)
    Page_1_Object.Name = "page 1";
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <main+0x88>)
    Nextion_Add_Object(&Page_1_Object);
 8002284:	a804      	add	r0, sp, #16
    Page_1_Object.Push_Callback = &Page_1_Touched;
 8002286:	9106      	str	r1, [sp, #24]
    Page_1_Object.Pop_Callback = &Page_1_Released;
 8002288:	9207      	str	r2, [sp, #28]
    Page_1_Object.Name = "page 1";
 800228a:	9305      	str	r3, [sp, #20]
    Page_1_Object.Component_ID = 0;
 800228c:	f88d 4011 	strb.w	r4, [sp, #17]
    Page_1_Object.Page_ID = 1;
 8002290:	f88d 5010 	strb.w	r5, [sp, #16]
    Nextion_Add_Object(&Page_1_Object);
 8002294:	f000 f822 	bl	80022dc <Nextion_Add_Object>
    BTN_Setting.Component_ID = 6;
 8002298:	2106      	movs	r1, #6
    BTN_Setting.Pop_Callback = &BTN_Setting_Released;
 800229a:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <main+0x8c>)
    BTN_Setting.Name = "b0";
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <main+0x90>)
    Nextion_Add_Object(&BTN_Setting);
 800229e:	a808      	add	r0, sp, #32
    BTN_Setting.Push_Callback = NULL;
 80022a0:	940a      	str	r4, [sp, #40]	; 0x28
    BTN_Setting.Page_ID = 0;
 80022a2:	f88d 4020 	strb.w	r4, [sp, #32]
    BTN_Setting.Component_ID = 6;
 80022a6:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    BTN_Setting.Pop_Callback = &BTN_Setting_Released;
 80022aa:	920b      	str	r2, [sp, #44]	; 0x2c
    BTN_Setting.Name = "b0";
 80022ac:	9309      	str	r3, [sp, #36]	; 0x24
    Nextion_Add_Object(&BTN_Setting);
 80022ae:	f000 f815 	bl	80022dc <Nextion_Add_Object>
	Nextion_Loop();
 80022b2:	f000 f939 	bl	8002528 <Nextion_Loop>
 80022b6:	e7fc      	b.n	80022b2 <main+0x6e>
 80022b8:	08002135 	.word	0x08002135
 80022bc:	08002169 	.word	0x08002169
 80022c0:	08005e00 	.word	0x08005e00
 80022c4:	080020a5 	.word	0x080020a5
 80022c8:	080020ed 	.word	0x080020ed
 80022cc:	08005e08 	.word	0x08005e08
 80022d0:	08002095 	.word	0x08002095
 80022d4:	08005df4 	.word	0x08005df4

080022d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 80022d8:	e7fe      	b.n	80022d8 <Error_Handler>
 80022da:	bf00      	nop

080022dc <Nextion_Add_Object>:

/*********************ring buffer stuff stop*******************/

uint8_t Nextion_Add_Object(Nextion_Object_t* PTR)
    {
    if (Nextion_Object_Count < MAX_NEXTION_OBJECTS)
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <Nextion_Add_Object+0x20>)
 80022de:	8813      	ldrh	r3, [r2, #0]
 80022e0:	2b31      	cmp	r3, #49	; 0x31
 80022e2:	d808      	bhi.n	80022f6 <Nextion_Add_Object+0x1a>
    {
 80022e4:	b410      	push	{r4}
	{
	Nextion_Object_List[Nextion_Object_Count] = PTR;
 80022e6:	4c06      	ldr	r4, [pc, #24]	; (8002300 <Nextion_Add_Object+0x24>)
	Nextion_Object_Count++;
 80022e8:	1c59      	adds	r1, r3, #1
	Nextion_Object_List[Nextion_Object_Count] = PTR;
 80022ea:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	Nextion_Object_Count++;
 80022ee:	8011      	strh	r1, [r2, #0]
	return 1;
 80022f0:	2001      	movs	r0, #1
	}
    return 0;
    }
 80022f2:	bc10      	pop	{r4}
 80022f4:	4770      	bx	lr
    return 0;
 80022f6:	2000      	movs	r0, #0
    }
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200009e6 	.word	0x200009e6
 8002300:	200009e8 	.word	0x200009e8

08002304 <Nextion_Init>:

uint8_t Nextion_Init()
    {
 8002304:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
	0
	};
    char sps = 0xFF;

    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 8002306:	24ff      	movs	r4, #255	; 0xff
    HAL_UART_Receive_DMA(Nextion_UART, (uint8_t*) UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 8002308:	4d31      	ldr	r5, [pc, #196]	; (80023d0 <Nextion_Init+0xcc>)
    {
 800230a:	b08b      	sub	sp, #44	; 0x2c
    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	4931      	ldr	r1, [pc, #196]	; (80023d4 <Nextion_Init+0xd0>)
 8002310:	4831      	ldr	r0, [pc, #196]	; (80023d8 <Nextion_Init+0xd4>)
 8002312:	f000 f9db 	bl	80026cc <Ring_Buffer_Init>
    HAL_UART_Receive_DMA(Nextion_UART, (uint8_t*) UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	492e      	ldr	r1, [pc, #184]	; (80023d4 <Nextion_Init+0xd0>)
 800231a:	6828      	ldr	r0, [r5, #0]
 800231c:	f7ff fcce 	bl	8001cbc <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 8002320:	682b      	ldr	r3, [r5, #0]
    char buf[30] =
 8002322:	221e      	movs	r2, #30
    __HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 8002324:	6819      	ldr	r1, [r3, #0]
    char buf[30] =
 8002326:	a802      	add	r0, sp, #8
    __HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 8002328:	68cb      	ldr	r3, [r1, #12]
    CMD_Finished_Flag = 0;
 800232a:	2700      	movs	r7, #0
    __HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	60cb      	str	r3, [r1, #12]
    char buf[30] =
 8002332:	2100      	movs	r1, #0
 8002334:	f000 fb46 	bl	80029c4 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 8002338:	4623      	mov	r3, r4
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <Nextion_Init+0xd8>)
 800233c:	4928      	ldr	r1, [pc, #160]	; (80023e0 <Nextion_Init+0xdc>)
 800233e:	a802      	add	r0, sp, #8
 8002340:	e9cd 4400 	strd	r4, r4, [sp]
 8002344:	f000 fb46 	bl	80029d4 <sprintf>

    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 8002348:	a802      	add	r0, sp, #8
 800234a:	f7fd ff01 	bl	8000150 <strlen>
 800234e:	2332      	movs	r3, #50	; 0x32
 8002350:	b282      	uxth	r2, r0
 8002352:	a902      	add	r1, sp, #8
 8002354:	6828      	ldr	r0, [r5, #0]
 8002356:	f7ff fc1f 	bl	8001b98 <HAL_UART_Transmit>
    CMD_Finished_Flag = 0;
 800235a:	4e22      	ldr	r6, [pc, #136]	; (80023e4 <Nextion_Init+0xe0>)
    HAL_Delay(1);
 800235c:	2001      	movs	r0, #1
 800235e:	f7fe fd5d 	bl	8000e1c <HAL_Delay>
    char buf[30] =
 8002362:	4639      	mov	r1, r7
 8002364:	221e      	movs	r2, #30
 8002366:	a802      	add	r0, sp, #8
    CMD_Finished_Flag = 0;
 8002368:	7037      	strb	r7, [r6, #0]
    char buf[30] =
 800236a:	f000 fb2b 	bl	80029c4 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 800236e:	4623      	mov	r3, r4
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <Nextion_Init+0xe4>)
 8002372:	491b      	ldr	r1, [pc, #108]	; (80023e0 <Nextion_Init+0xdc>)
 8002374:	e9cd 4400 	strd	r4, r4, [sp]
 8002378:	a802      	add	r0, sp, #8
 800237a:	f000 fb2b 	bl	80029d4 <sprintf>
    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 800237e:	a802      	add	r0, sp, #8
 8002380:	f7fd fee6 	bl	8000150 <strlen>
 8002384:	a902      	add	r1, sp, #8
 8002386:	b282      	uxth	r2, r0
 8002388:	2332      	movs	r3, #50	; 0x32
 800238a:	6828      	ldr	r0, [r5, #0]
 800238c:	f7ff fc04 	bl	8001b98 <HAL_UART_Transmit>
    while (!CMD_Finished_Flag && --timeout)
 8002390:	7830      	ldrb	r0, [r6, #0]
 8002392:	b1d0      	cbz	r0, 80023ca <Nextion_Init+0xc6>
    char buf[30] =
 8002394:	4639      	mov	r1, r7
 8002396:	221e      	movs	r2, #30
 8002398:	a802      	add	r0, sp, #8
    CMD_Finished_Flag = 0;
 800239a:	7037      	strb	r7, [r6, #0]
    char buf[30] =
 800239c:	f000 fb12 	bl	80029c4 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 80023a0:	4623      	mov	r3, r4
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <Nextion_Init+0xe8>)
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <Nextion_Init+0xdc>)
 80023a6:	e9cd 4400 	strd	r4, r4, [sp]
 80023aa:	a802      	add	r0, sp, #8
 80023ac:	f000 fb12 	bl	80029d4 <sprintf>
    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 80023b0:	a802      	add	r0, sp, #8
 80023b2:	f7fd fecd 	bl	8000150 <strlen>
 80023b6:	a902      	add	r1, sp, #8
 80023b8:	b282      	uxth	r2, r0
 80023ba:	2332      	movs	r3, #50	; 0x32
 80023bc:	6828      	ldr	r0, [r5, #0]
 80023be:	f7ff fbeb 	bl	8001b98 <HAL_UART_Transmit>
	return NEXTION_ERR;
 80023c2:	7830      	ldrb	r0, [r6, #0]
 80023c4:	1bc0      	subs	r0, r0, r7
 80023c6:	bf18      	it	ne
 80023c8:	2001      	movne	r0, #1
    }
 80023ca:	b00b      	add	sp, #44	; 0x2c
 80023cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000008 	.word	0x20000008
 80023d4:	20000ab4 	.word	0x20000ab4
 80023d8:	20000b34 	.word	0x20000b34
 80023dc:	08005e3c 	.word	0x08005e3c
 80023e0:	08005e5c 	.word	0x08005e5c
 80023e4:	200009e5 	.word	0x200009e5
 80023e8:	08005e40 	.word	0x08005e40
 80023ec:	08005e00 	.word	0x08005e00

080023f0 <Nextion_Send_Command>:
    {
 80023f0:	b510      	push	{r4, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	4604      	mov	r4, r0
    char buf[30] =
 80023f6:	221e      	movs	r2, #30
 80023f8:	a802      	add	r0, sp, #8
 80023fa:	2100      	movs	r1, #0
 80023fc:	f000 fae2 	bl	80029c4 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 8002400:	23ff      	movs	r3, #255	; 0xff
 8002402:	4622      	mov	r2, r4
 8002404:	e9cd 3300 	strd	r3, r3, [sp]
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <Nextion_Send_Command+0x38>)
 800240a:	a802      	add	r0, sp, #8
 800240c:	f000 fae2 	bl	80029d4 <sprintf>
    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 8002410:	a802      	add	r0, sp, #8
 8002412:	f7fd fe9d 	bl	8000150 <strlen>
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <Nextion_Send_Command+0x3c>)
 8002418:	b282      	uxth	r2, r0
 800241a:	a902      	add	r1, sp, #8
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	2332      	movs	r3, #50	; 0x32
 8002420:	f7ff fbba 	bl	8001b98 <HAL_UART_Transmit>

    }
 8002424:	b00a      	add	sp, #40	; 0x28
 8002426:	bd10      	pop	{r4, pc}
 8002428:	08005e5c 	.word	0x08005e5c
 800242c:	20000008 	.word	0x20000008

08002430 <Nextion_UART_RX_ISR>:

void Nextion_UART_RX_ISR()
    {

    static  uint8_t rx_char_count = 0;
    char    rx_char = 0;
 8002430:	2200      	movs	r2, #0
    {
 8002432:	b570      	push	{r4, r5, r6, lr}
    uint8_t data_received = 0;
    uint8_t rx_number = 0;

    if (__HAL_UART_GET_FLAG(Nextion_UART, UART_FLAG_IDLE))
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <Nextion_UART_RX_ISR+0xd8>)
    {
 8002436:	b082      	sub	sp, #8
    char    rx_char = 0;
 8002438:	f88d 2007 	strb.w	r2, [sp, #7]
    if (__HAL_UART_GET_FLAG(Nextion_UART, UART_FLAG_IDLE))
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	6813      	ldr	r3, [r2, #0]
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	06c9      	lsls	r1, r1, #27
 8002444:	d522      	bpl.n	800248c <Nextion_UART_RX_ISR+0x5c>
	(void) __HAL_UART_GET_FLAG(Nextion_UART, UART_FLAG_IDLE);
	(void) huart1.Instance->DR;

	/*data is written to buffer via uart DMA in background*/
	/* need to update Write_Index manually */
	UPDATE_RING_BUFFER();
 8002446:	6b52      	ldr	r2, [r2, #52]	; 0x34
	(void) huart1.Instance->DR;
 8002448:	4930      	ldr	r1, [pc, #192]	; (800250c <Nextion_UART_RX_ISR+0xdc>)
	UPDATE_RING_BUFFER();
 800244a:	6812      	ldr	r2, [r2, #0]
	(void) huart1.Instance->DR;
 800244c:	6809      	ldr	r1, [r1, #0]
	(void) __HAL_UART_GET_FLAG(Nextion_UART, UART_FLAG_IDLE);
 800244e:	681b      	ldr	r3, [r3, #0]
	(void) huart1.Instance->DR;
 8002450:	684b      	ldr	r3, [r1, #4]
	UPDATE_RING_BUFFER();
 8002452:	6853      	ldr	r3, [r2, #4]
 8002454:	4c2e      	ldr	r4, [pc, #184]	; (8002510 <Nextion_UART_RX_ISR+0xe0>)
 8002456:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
			}
		    }
		}
	    else
		{
		Nextion_In_Buffer[rx_char_count] = rx_char;
 800245a:	4d2e      	ldr	r5, [pc, #184]	; (8002514 <Nextion_UART_RX_ISR+0xe4>)
 800245c:	4e2e      	ldr	r6, [pc, #184]	; (8002518 <Nextion_UART_RX_ISR+0xe8>)
	UPDATE_RING_BUFFER();
 800245e:	80a3      	strh	r3, [r4, #4]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8002460:	4620      	mov	r0, r4
 8002462:	f000 f951 	bl	8002708 <Ring_Buffer_Get_Count>
 8002466:	b188      	cbz	r0, 800248c <Nextion_UART_RX_ISR+0x5c>
	    Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 8002468:	f10d 0107 	add.w	r1, sp, #7
 800246c:	4620      	mov	r0, r4
 800246e:	f000 f933 	bl	80026d8 <Ring_Buffer_Get_Char>
	    if (rx_char == 0xFF)
 8002472:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002476:	2bff      	cmp	r3, #255	; 0xff
 8002478:	d00a      	beq.n	8002490 <Nextion_UART_RX_ISR+0x60>
		Nextion_In_Buffer[rx_char_count] = rx_char;
 800247a:	782a      	ldrb	r2, [r5, #0]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 800247c:	4620      	mov	r0, r4
		rx_char_count++;
 800247e:	1c51      	adds	r1, r2, #1
		Nextion_In_Buffer[rx_char_count] = rx_char;
 8002480:	54b3      	strb	r3, [r6, r2]
		rx_char_count++;
 8002482:	7029      	strb	r1, [r5, #0]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8002484:	f000 f940 	bl	8002708 <Ring_Buffer_Get_Count>
 8002488:	2800      	cmp	r0, #0
 800248a:	d1ed      	bne.n	8002468 <Nextion_UART_RX_ISR+0x38>
		    }
		memset(Nextion_In_Buffer, 0x00, NEXTION_IN_BUFF_SIZE); //reset buffer
		}
	    }
	}
    }
 800248c:	b002      	add	sp, #8
 800248e:	bd70      	pop	{r4, r5, r6, pc}
		Ring_Buffer_Get_Char(& UART_Ring_Buffer_Handle, &rx_char);
 8002490:	f10d 0107 	add.w	r1, sp, #7
 8002494:	4620      	mov	r0, r4
 8002496:	f000 f91f 	bl	80026d8 <Ring_Buffer_Get_Char>
		    if (rx_char == 0xFF)
 800249a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	d1de      	bne.n	8002460 <Nextion_UART_RX_ISR+0x30>
			Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 80024a2:	f10d 0107 	add.w	r1, sp, #7
 80024a6:	4620      	mov	r0, r4
 80024a8:	f000 f916 	bl	80026d8 <Ring_Buffer_Get_Char>
			if (rx_char == 0xFF)
 80024ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024b0:	2bff      	cmp	r3, #255	; 0xff
 80024b2:	d1d5      	bne.n	8002460 <Nextion_UART_RX_ISR+0x30>
			    rx_char_count = 0;
 80024b4:	2200      	movs	r2, #0
		switch (Nextion_In_Buffer[0])
 80024b6:	7833      	ldrb	r3, [r6, #0]
			    rx_char_count = 0;
 80024b8:	702a      	strb	r2, [r5, #0]
		switch (Nextion_In_Buffer[0])
 80024ba:	2b66      	cmp	r3, #102	; 0x66
 80024bc:	d01b      	beq.n	80024f6 <Nextion_UART_RX_ISR+0xc6>
 80024be:	d80d      	bhi.n	80024dc <Nextion_UART_RX_ISR+0xac>
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d013      	beq.n	80024ec <Nextion_UART_RX_ISR+0xbc>
 80024c4:	2b65      	cmp	r3, #101	; 0x65
 80024c6:	d102      	bne.n	80024ce <Nextion_UART_RX_ISR+0x9e>
		    Touch_EVNT_Flag = 1;
 80024c8:	2201      	movs	r2, #1
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <Nextion_UART_RX_ISR+0xec>)
 80024cc:	701a      	strb	r2, [r3, #0]
		memset(Nextion_In_Buffer, 0x00, NEXTION_IN_BUFF_SIZE); //reset buffer
 80024ce:	2300      	movs	r3, #0
 80024d0:	6033      	str	r3, [r6, #0]
 80024d2:	6073      	str	r3, [r6, #4]
 80024d4:	60b3      	str	r3, [r6, #8]
 80024d6:	60f3      	str	r3, [r6, #12]
 80024d8:	6133      	str	r3, [r6, #16]
 80024da:	e7c1      	b.n	8002460 <Nextion_UART_RX_ISR+0x30>
		switch (Nextion_In_Buffer[0])
 80024dc:	2b70      	cmp	r3, #112	; 0x70
 80024de:	d00e      	beq.n	80024fe <Nextion_UART_RX_ISR+0xce>
 80024e0:	2b71      	cmp	r3, #113	; 0x71
 80024e2:	d1f4      	bne.n	80024ce <Nextion_UART_RX_ISR+0x9e>
		    Nextion_RX_Number_Callback(rx_number);
 80024e4:	7870      	ldrb	r0, [r6, #1]
 80024e6:	f7ff fe79 	bl	80021dc <Nextion_RX_Number_Callback>
		    break;
 80024ea:	e7f0      	b.n	80024ce <Nextion_UART_RX_ISR+0x9e>
		    CMD_Finished_Flag = 1;
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <Nextion_UART_RX_ISR+0xf0>)
 80024ee:	7013      	strb	r3, [r2, #0]
		    Nextion_CMD_Finished_Callback();
 80024f0:	f7ff fe76 	bl	80021e0 <Nextion_CMD_Finished_Callback>
		    break;
 80024f4:	e7eb      	b.n	80024ce <Nextion_UART_RX_ISR+0x9e>
		    Nextion_RX_Page_ID_Callback(Nextion_In_Buffer[1]);
 80024f6:	7870      	ldrb	r0, [r6, #1]
 80024f8:	f7ff fe64 	bl	80021c4 <Nextion_RX_Page_ID_Callback>
		    break;
 80024fc:	e7e7      	b.n	80024ce <Nextion_UART_RX_ISR+0x9e>
		    Nextion_RX_String_Callback(&Nextion_In_Buffer[1]);
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <Nextion_UART_RX_ISR+0xf4>)
 8002500:	f7ff fe6a 	bl	80021d8 <Nextion_RX_String_Callback>
		    break;
 8002504:	e7e3      	b.n	80024ce <Nextion_UART_RX_ISR+0x9e>
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008
 800250c:	20000bd8 	.word	0x20000bd8
 8002510:	20000b34 	.word	0x20000b34
 8002514:	20000b40 	.word	0x20000b40
 8002518:	20000b80 	.word	0x20000b80
 800251c:	20000ab0 	.word	0x20000ab0
 8002520:	200009e5 	.word	0x200009e5
 8002524:	20000b81 	.word	0x20000b81

08002528 <Nextion_Loop>:



void Nextion_Loop()
    {
    if(Touch_EVNT_Flag)
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <Nextion_Loop+0x58>)
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	b902      	cbnz	r2, 8002530 <Nextion_Loop+0x8>
 800252e:	4770      	bx	lr
	{
	Touch_EVNT_Flag = 0;
 8002530:	2200      	movs	r2, #0
    for (i = 0; i < Nextion_Object_Count; i++)
 8002532:	4914      	ldr	r1, [pc, #80]	; (8002584 <Nextion_Loop+0x5c>)
    {
 8002534:	b470      	push	{r4, r5, r6}
    for (i = 0; i < Nextion_Object_Count; i++)
 8002536:	8808      	ldrh	r0, [r1, #0]
    Nextion_Find_Object(Nextion_In_Buffer[1],
 8002538:	4e13      	ldr	r6, [pc, #76]	; (8002588 <Nextion_Loop+0x60>)
	Touch_EVNT_Flag = 0;
 800253a:	701a      	strb	r2, [r3, #0]
    Nextion_Find_Object(Nextion_In_Buffer[1],
 800253c:	7874      	ldrb	r4, [r6, #1]
	    Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
 800253e:	78b5      	ldrb	r5, [r6, #2]
    for (i = 0; i < Nextion_Object_Count; i++)
 8002540:	b1d8      	cbz	r0, 800257a <Nextion_Loop+0x52>
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <Nextion_Loop+0x64>)
 8002544:	3801      	subs	r0, #1
 8002546:	b282      	uxth	r2, r0
 8002548:	1d18      	adds	r0, r3, #4
 800254a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800254e:	e001      	b.n	8002554 <Nextion_Loop+0x2c>
 8002550:	4283      	cmp	r3, r0
 8002552:	d012      	beq.n	800257a <Nextion_Loop+0x52>
	Nextion_Object_t_PTR = Nextion_Object_List[i];
 8002554:	f853 2b04 	ldr.w	r2, [r3], #4
	if (Nextion_Object_t_PTR->Page_ID == pid && Nextion_Object_t_PTR->Component_ID == cid)
 8002558:	7811      	ldrb	r1, [r2, #0]
 800255a:	42a1      	cmp	r1, r4
 800255c:	d1f8      	bne.n	8002550 <Nextion_Loop+0x28>
 800255e:	7851      	ldrb	r1, [r2, #1]
 8002560:	42a9      	cmp	r1, r5
 8002562:	d1f5      	bne.n	8002550 <Nextion_Loop+0x28>
	    Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
 8002564:	78f3      	ldrb	r3, [r6, #3]
	    if (NEX_EVENT_PUSH == event)
 8002566:	2b01      	cmp	r3, #1
 8002568:	d004      	beq.n	8002574 <Nextion_Loop+0x4c>
	    else if (NEX_EVENT_POP == event)
 800256a:	b933      	cbnz	r3, 800257a <Nextion_Loop+0x52>
		if (Nextion_Object_t_PTR->Pop_Callback != NULL)
 800256c:	68d3      	ldr	r3, [r2, #12]
 800256e:	b123      	cbz	r3, 800257a <Nextion_Loop+0x52>
	}
    }
 8002570:	bc70      	pop	{r4, r5, r6}
		    Nextion_Object_t_PTR->Pop_Callback();
 8002572:	4718      	bx	r3
		if (Nextion_Object_t_PTR->Push_Callback != NULL)
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1fa      	bne.n	8002570 <Nextion_Loop+0x48>
    }
 800257a:	bc70      	pop	{r4, r5, r6}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000ab0 	.word	0x20000ab0
 8002584:	200009e6 	.word	0x200009e6
 8002588:	20000b80 	.word	0x20000b80
 800258c:	200009e8 	.word	0x200009e8

08002590 <Nextion_Set_Text>:
 *
 *
 */

void Nextion_Set_Text(char *object_name, char *buffer)
    {
 8002590:	b530      	push	{r4, r5, lr}
	0
	};

    char sps = 0xFF;

    sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 8002592:	25ff      	movs	r5, #255	; 0xff
    char buf[20] =
 8002594:	2400      	movs	r4, #0
    {
 8002596:	b08b      	sub	sp, #44	; 0x2c
    sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 8002598:	460b      	mov	r3, r1
 800259a:	4602      	mov	r2, r0
 800259c:	490b      	ldr	r1, [pc, #44]	; (80025cc <Nextion_Set_Text+0x3c>)
 800259e:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80025a2:	9500      	str	r5, [sp, #0]
 80025a4:	a805      	add	r0, sp, #20
    char buf[20] =
 80025a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80025aa:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80025ae:	9409      	str	r4, [sp, #36]	; 0x24
    sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 80025b0:	f000 fa10 	bl	80029d4 <sprintf>

    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 80025b4:	a805      	add	r0, sp, #20
 80025b6:	f7fd fdcb 	bl	8000150 <strlen>
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <Nextion_Set_Text+0x40>)
 80025bc:	b282      	uxth	r2, r0
 80025be:	a905      	add	r1, sp, #20
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	2332      	movs	r3, #50	; 0x32
 80025c4:	f7ff fae8 	bl	8001b98 <HAL_UART_Transmit>
    }
 80025c8:	b00b      	add	sp, #44	; 0x2c
 80025ca:	bd30      	pop	{r4, r5, pc}
 80025cc:	08005e68 	.word	0x08005e68
 80025d0:	20000008 	.word	0x20000008

080025d4 <Nextion_Set_BCK_Colour>:
 *
 *
 */

void Nextion_Set_BCK_Colour(char *object_name, int colour)
    {
 80025d4:	b570      	push	{r4, r5, r6, lr}
	0
	};

    char sps = 0xFF;

    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025d6:	24ff      	movs	r4, #255	; 0xff
    char buf[20] =
 80025d8:	2500      	movs	r5, #0
    {
 80025da:	b08a      	sub	sp, #40	; 0x28
    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025dc:	460b      	mov	r3, r1
 80025de:	4602      	mov	r2, r0
    {
 80025e0:	4606      	mov	r6, r0
    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025e2:	4914      	ldr	r1, [pc, #80]	; (8002634 <Nextion_Set_BCK_Colour+0x60>)
 80025e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80025e8:	9400      	str	r4, [sp, #0]
 80025ea:	a805      	add	r0, sp, #20
    char buf[20] =
 80025ec:	e9cd 5505 	strd	r5, r5, [sp, #20]
 80025f0:	e9cd 5507 	strd	r5, r5, [sp, #28]
 80025f4:	9509      	str	r5, [sp, #36]	; 0x24
    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025f6:	f000 f9ed 	bl	80029d4 <sprintf>

    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 80025fa:	a805      	add	r0, sp, #20
 80025fc:	f7fd fda8 	bl	8000150 <strlen>
 8002600:	4d0d      	ldr	r5, [pc, #52]	; (8002638 <Nextion_Set_BCK_Colour+0x64>)
 8002602:	b282      	uxth	r2, r0
 8002604:	a905      	add	r1, sp, #20
 8002606:	6828      	ldr	r0, [r5, #0]
 8002608:	2332      	movs	r3, #50	; 0x32
 800260a:	f7ff fac5 	bl	8001b98 <HAL_UART_Transmit>

    sprintf(buf, "ref %s%c%c%c", object_name, sps, sps, sps);
 800260e:	4623      	mov	r3, r4
 8002610:	4632      	mov	r2, r6
 8002612:	490a      	ldr	r1, [pc, #40]	; (800263c <Nextion_Set_BCK_Colour+0x68>)
 8002614:	e9cd 4400 	strd	r4, r4, [sp]
 8002618:	a805      	add	r0, sp, #20
 800261a:	f000 f9db 	bl	80029d4 <sprintf>

    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 800261e:	a805      	add	r0, sp, #20
 8002620:	f7fd fd96 	bl	8000150 <strlen>
 8002624:	a905      	add	r1, sp, #20
 8002626:	b282      	uxth	r2, r0
 8002628:	2332      	movs	r3, #50	; 0x32
 800262a:	6828      	ldr	r0, [r5, #0]
 800262c:	f7ff fab4 	bl	8001b98 <HAL_UART_Transmit>
    }
 8002630:	b00a      	add	sp, #40	; 0x28
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	08005e48 	.word	0x08005e48
 8002638:	20000008 	.word	0x20000008
 800263c:	08005e58 	.word	0x08005e58

08002640 <Nextion_Backlight_Brightness>:
 */

void Nextion_Backlight_Brightness(uint8_t value, uint8_t overide)
    {

    char buf[10] =
 8002640:	2300      	movs	r3, #0
    {
 8002642:	b500      	push	{lr}
 8002644:	b087      	sub	sp, #28
    char buf[10] =
 8002646:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800264a:	f8ad 3014 	strh.w	r3, [sp, #20]

    char sps = 0xFF;

    if (overide > 0)
	{
	sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 800264e:	23ff      	movs	r3, #255	; 0xff
    {
 8002650:	4602      	mov	r2, r0
	sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 8002652:	e9cd 3300 	strd	r3, r3, [sp]
    if (overide > 0)
 8002656:	b981      	cbnz	r1, 800267a <Nextion_Backlight_Brightness+0x3a>
	}
    else
	{
	sprintf(buf, "dim=%i%c%c%c", value, sps, sps, sps);
 8002658:	490a      	ldr	r1, [pc, #40]	; (8002684 <Nextion_Backlight_Brightness+0x44>)
 800265a:	a803      	add	r0, sp, #12
 800265c:	f000 f9ba 	bl	80029d4 <sprintf>
	}

    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 8002660:	a803      	add	r0, sp, #12
 8002662:	f7fd fd75 	bl	8000150 <strlen>
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <Nextion_Backlight_Brightness+0x48>)
 8002668:	b282      	uxth	r2, r0
 800266a:	a903      	add	r1, sp, #12
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	2332      	movs	r3, #50	; 0x32
 8002670:	f7ff fa92 	bl	8001b98 <HAL_UART_Transmit>
    }
 8002674:	b007      	add	sp, #28
 8002676:	f85d fb04 	ldr.w	pc, [sp], #4
	sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <Nextion_Backlight_Brightness+0x4c>)
 800267c:	a803      	add	r0, sp, #12
 800267e:	f000 f9a9 	bl	80029d4 <sprintf>
 8002682:	e7ed      	b.n	8002660 <Nextion_Backlight_Brightness+0x20>
 8002684:	08005e20 	.word	0x08005e20
 8002688:	20000008 	.word	0x20000008
 800268c:	08005e10 	.word	0x08005e10

08002690 <Nextion_Get_Current_Page>:
	0
	};

    char sps = 0xFF;

    sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 8002690:	23ff      	movs	r3, #255	; 0xff
    {
 8002692:	b510      	push	{r4, lr}
    char buf[10] =
 8002694:	2400      	movs	r4, #0
    {
 8002696:	b086      	sub	sp, #24
    sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	4909      	ldr	r1, [pc, #36]	; (80026c4 <Nextion_Get_Current_Page+0x34>)
 800269e:	a803      	add	r0, sp, #12
    char buf[10] =
 80026a0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80026a4:	f8ad 4014 	strh.w	r4, [sp, #20]
    sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 80026a8:	f000 f994 	bl	80029d4 <sprintf>

    HAL_UART_Transmit(Nextion_UART, (uint8_t*) &buf, strlen(buf), 50);
 80026ac:	a803      	add	r0, sp, #12
 80026ae:	f7fd fd4f 	bl	8000150 <strlen>
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <Nextion_Get_Current_Page+0x38>)
 80026b4:	b282      	uxth	r2, r0
 80026b6:	a903      	add	r1, sp, #12
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	2332      	movs	r3, #50	; 0x32
 80026bc:	f7ff fa6c 	bl	8001b98 <HAL_UART_Transmit>

    }
 80026c0:	b006      	add	sp, #24
 80026c2:	bd10      	pop	{r4, pc}
 80026c4:	08005e30 	.word	0x08005e30
 80026c8:	20000008 	.word	0x20000008

080026cc <Ring_Buffer_Init>:
#include "ring_buffer.h"

void Ring_Buffer_Init(Ring_Buffer_t* handle, char* buffer, uint16_t size)
    {
    handle->Buffer        =  buffer;
    handle->Read_Index    =  0;
 80026cc:	2300      	movs	r3, #0
    handle->Buffer        =  buffer;
 80026ce:	6001      	str	r1, [r0, #0]
    handle->Write_Index   =  0;
    handle->Size          =  size;
 80026d0:	8102      	strh	r2, [r0, #8]
    handle->Read_Index    =  0;
 80026d2:	80c3      	strh	r3, [r0, #6]
    handle->Write_Index   =  0;
 80026d4:	8083      	strh	r3, [r0, #4]
 80026d6:	4770      	bx	lr

080026d8 <Ring_Buffer_Get_Char>:


uint8_t Ring_Buffer_Get_Char(Ring_Buffer_t* handle, char* data)
    {

    if (handle->Read_Index == handle->Write_Index)
 80026d8:	88c2      	ldrh	r2, [r0, #6]
    {
 80026da:	4603      	mov	r3, r0
    if (handle->Read_Index == handle->Write_Index)
 80026dc:	8880      	ldrh	r0, [r0, #4]
 80026de:	4290      	cmp	r0, r2
 80026e0:	d00e      	beq.n	8002700 <Ring_Buffer_Get_Char+0x28>
	{
	*data = 0;
	return 0;
	}

    *data = handle->Buffer[handle->Read_Index];
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	5c82      	ldrb	r2, [r0, r2]
 80026e6:	700a      	strb	r2, [r1, #0]

    handle->Read_Index++;
 80026e8:	88da      	ldrh	r2, [r3, #6]

    if (handle->Read_Index == handle->Size)
 80026ea:	8919      	ldrh	r1, [r3, #8]
    handle->Read_Index++;
 80026ec:	3201      	adds	r2, #1
 80026ee:	b292      	uxth	r2, r2
    if (handle->Read_Index == handle->Size)
 80026f0:	4291      	cmp	r1, r2
    handle->Read_Index++;
 80026f2:	80da      	strh	r2, [r3, #6]
	{
	handle->Read_Index = 0;
 80026f4:	bf03      	ittte	eq
 80026f6:	2200      	moveq	r2, #0
	}

    return 1;
 80026f8:	2001      	moveq	r0, #1
	handle->Read_Index = 0;
 80026fa:	80da      	strheq	r2, [r3, #6]
    return 1;
 80026fc:	2001      	movne	r0, #1
    }
 80026fe:	4770      	bx	lr
	*data = 0;
 8002700:	2000      	movs	r0, #0
 8002702:	7008      	strb	r0, [r1, #0]
	return 0;
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <Ring_Buffer_Get_Count>:
    }


uint8_t Ring_Buffer_Get_Count(Ring_Buffer_t* handle)
    {
    if (handle->Write_Index >= handle->Read_Index)
 8002708:	8883      	ldrh	r3, [r0, #4]
 800270a:	88c2      	ldrh	r2, [r0, #6]
 800270c:	4293      	cmp	r3, r2
	{
	return (handle->Write_Index - handle->Read_Index);
	}
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 800270e:	bf37      	itett	cc
 8002710:	7a00      	ldrbcc	r0, [r0, #8]
	return (handle->Write_Index - handle->Read_Index);
 8002712:	1a98      	subcs	r0, r3, r2
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 8002714:	18c0      	addcc	r0, r0, r3
 8002716:	1a80      	subcc	r0, r0, r2
 8002718:	b2c0      	uxtb	r0, r0
    }
 800271a:	4770      	bx	lr

0800271c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_MspInit+0x3c>)
{
 800271e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002720:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002722:	490e      	ldr	r1, [pc, #56]	; (800275c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	619a      	str	r2, [r3, #24]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	f002 0201 	and.w	r2, r2, #1
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800273a:	61da      	str	r2, [r3, #28]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002746:	684b      	ldr	r3, [r1, #4]
 8002748:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800274c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002750:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002752:	b002      	add	sp, #8
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000

08002760 <NMI_Handler>:
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002764:	e7fe      	b.n	8002764 <HardFault_Handler>
 8002766:	bf00      	nop

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	e7fe      	b.n	8002768 <MemManage_Handler>
 800276a:	bf00      	nop

0800276c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276c:	e7fe      	b.n	800276c <BusFault_Handler>
 800276e:	bf00      	nop

08002770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002770:	e7fe      	b.n	8002770 <UsageFault_Handler>
 8002772:	bf00      	nop

08002774 <SVC_Handler>:
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <DebugMon_Handler>:
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002780:	f7fe bb3a 	b.w	8000df8 <HAL_IncTick>

08002784 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002784:	4801      	ldr	r0, [pc, #4]	; (800278c <DMA1_Channel5_IRQHandler+0x8>)
 8002786:	f7fe bc8b 	b.w	80010a0 <HAL_DMA_IRQHandler>
 800278a:	bf00      	nop
 800278c:	20000b94 	.word	0x20000b94

08002790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002790:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  Nextion_UART_RX_ISR();
 8002792:	f7ff fe4d 	bl	8002430 <Nextion_UART_RX_ISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_IRQHandler(&huart1);
 800279a:	4801      	ldr	r0, [pc, #4]	; (80027a0 <USART1_IRQHandler+0x10>)
 800279c:	f7ff bb78 	b.w	8001e90 <HAL_UART_IRQHandler>
 80027a0:	20000bd8 	.word	0x20000bd8

080027a4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027a4:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <_sbrk+0x30>)
{
 80027a6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80027a8:	6813      	ldr	r3, [r2, #0]
 80027aa:	b173      	cbz	r3, 80027ca <_sbrk+0x26>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80027ac:	4669      	mov	r1, sp
 80027ae:	4418      	add	r0, r3
 80027b0:	4288      	cmp	r0, r1
 80027b2:	d802      	bhi.n	80027ba <_sbrk+0x16>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80027b4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd08      	pop	{r3, pc}
		errno = ENOMEM;
 80027ba:	f000 f8d9 	bl	8002970 <__errno>
 80027be:	220c      	movs	r2, #12
		return (caddr_t) -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		errno = ENOMEM;
 80027c4:	6002      	str	r2, [r0, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80027ca:	4903      	ldr	r1, [pc, #12]	; (80027d8 <_sbrk+0x34>)
 80027cc:	460b      	mov	r3, r1
 80027ce:	6011      	str	r1, [r2, #0]
 80027d0:	e7ec      	b.n	80027ac <_sbrk+0x8>
 80027d2:	bf00      	nop
 80027d4:	20000b44 	.word	0x20000b44
 80027d8:	20000c28 	.word	0x20000c28

080027dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027dc:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027de:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027e2:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 80027ea:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027ec:	480e      	ldr	r0, [pc, #56]	; (8002828 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 80027ee:	f041 0101 	orr.w	r1, r1, #1
 80027f2:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	400a      	ands	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002800:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002804:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800280c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002814:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8002816:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002818:	6084      	str	r4, [r0, #8]
#endif 
}
 800281a:	bc30      	pop	{r4, r5}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	f8ff0000 	.word	0xf8ff0000
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800282c:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 9600;
 8002830:	f44f 5516 	mov.w	r5, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002834:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_USART1_UART_Init+0x30>)
 8002838:	4c09      	ldr	r4, [pc, #36]	; (8002860 <MX_USART1_UART_Init+0x34>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800283a:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 800283c:	e883 0030 	stmia.w	r3, {r4, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002840:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002846:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002848:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800284a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800284c:	f7ff f974 	bl	8001b38 <HAL_UART_Init>
 8002850:	b900      	cbnz	r0, 8002854 <MX_USART1_UART_Init+0x28>
 8002852:	bd38      	pop	{r3, r4, r5, pc}
  {
    Error_Handler();
  }

}
 8002854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002858:	f7ff bd3e 	b.w	80022d8 <Error_Handler>
 800285c:	20000bd8 	.word	0x20000bd8
 8002860:	40013800 	.word	0x40013800

08002864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8002868:	6802      	ldr	r2, [r0, #0]
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_UART_MspInit+0xb0>)
{
 800286c:	b087      	sub	sp, #28
  if(uartHandle->Instance==USART1)
 800286e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	9402      	str	r4, [sp, #8]
 8002872:	9403      	str	r4, [sp, #12]
 8002874:	9404      	str	r4, [sp, #16]
 8002876:	9405      	str	r4, [sp, #20]
  if(uartHandle->Instance==USART1)
 8002878:	d001      	beq.n	800287e <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800287a:	b007      	add	sp, #28
 800287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800287e:	f44f 7100 	mov.w	r1, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002884:	2603      	movs	r6, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002886:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	4605      	mov	r5, r0
 800288e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002892:	619a      	str	r2, [r3, #24]
 8002894:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	4820      	ldr	r0, [pc, #128]	; (8002918 <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002898:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800289c:	9200      	str	r2, [sp, #0]
 800289e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	f042 0204 	orr.w	r2, r2, #4
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028aa:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f7fe fc87 	bl	80011cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028be:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	a902      	add	r1, sp, #8
 80028c4:	4814      	ldr	r0, [pc, #80]	; (8002918 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	9404      	str	r4, [sp, #16]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ce:	f7fe fc7d 	bl	80011cc <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028d2:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028d8:	4e10      	ldr	r6, [pc, #64]	; (800291c <HAL_UART_MspInit+0xb8>)
 80028da:	4911      	ldr	r1, [pc, #68]	; (8002920 <HAL_UART_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028dc:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028de:	60f7      	str	r7, [r6, #12]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e0:	6074      	str	r4, [r6, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e2:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e4:	6134      	str	r4, [r6, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e6:	6174      	str	r4, [r6, #20]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028e8:	6031      	str	r1, [r6, #0]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028ea:	61b2      	str	r2, [r6, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028ec:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028ee:	f7fe fb13 	bl	8000f18 <HAL_DMA_Init>
 80028f2:	b958      	cbnz	r0, 800290c <HAL_UART_MspInit+0xa8>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028f8:	636e      	str	r6, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028fa:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028fc:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028fe:	f7fe fab1 	bl	8000e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002902:	2025      	movs	r0, #37	; 0x25
 8002904:	f7fe fae4 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
}
 8002908:	b007      	add	sp, #28
 800290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800290c:	f7ff fce4 	bl	80022d8 <Error_Handler>
 8002910:	e7f0      	b.n	80028f4 <HAL_UART_MspInit+0x90>
 8002912:	bf00      	nop
 8002914:	40013800 	.word	0x40013800
 8002918:	40010800 	.word	0x40010800
 800291c:	20000b94 	.word	0x20000b94
 8002920:	40020058 	.word	0x40020058

08002924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002924:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002926:	e003      	b.n	8002930 <LoopCopyDataInit>

08002928 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800292a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800292c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800292e:	3104      	adds	r1, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002934:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002936:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002938:	d3f6      	bcc.n	8002928 <CopyDataInit>
  ldr r2, =_sbss
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800293c:	e002      	b.n	8002944 <LoopFillZerobss>

0800293e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002940:	f842 3b04 	str.w	r3, [r2], #4

08002944 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002946:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002948:	d3f9      	bcc.n	800293e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800294a:	f7ff ff47 	bl	80027dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294e:	f000 f815 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002952:	f7ff fc77 	bl	8002244 <main>
  bx lr
 8002956:	4770      	bx	lr
  ldr r3, =_sidata
 8002958:	0800611c 	.word	0x0800611c
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002960:	200009c0 	.word	0x200009c0
  ldr r2, =_sbss
 8002964:	200009c0 	.word	0x200009c0
  ldr r3, = _ebss
 8002968:	20000c28 	.word	0x20000c28

0800296c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC1_2_IRQHandler>
	...

08002970 <__errno>:
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <__errno+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000010 	.word	0x20000010

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	2500      	movs	r5, #0
 8002980:	4e0c      	ldr	r6, [pc, #48]	; (80029b4 <__libc_init_array+0x38>)
 8002982:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002984:	1ba4      	subs	r4, r4, r6
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	42a5      	cmp	r5, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	f003 fa18 	bl	8005dc0 <_init>
 8002990:	2500      	movs	r5, #0
 8002992:	4e0a      	ldr	r6, [pc, #40]	; (80029bc <__libc_init_array+0x40>)
 8002994:	4c0a      	ldr	r4, [pc, #40]	; (80029c0 <__libc_init_array+0x44>)
 8002996:	1ba4      	subs	r4, r4, r6
 8002998:	10a4      	asrs	r4, r4, #2
 800299a:	42a5      	cmp	r5, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029a4:	4798      	blx	r3
 80029a6:	3501      	adds	r5, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ae:	4798      	blx	r3
 80029b0:	3501      	adds	r5, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08006110 	.word	0x08006110
 80029b8:	08006110 	.word	0x08006110
 80029bc:	08006110 	.word	0x08006110
 80029c0:	08006118 	.word	0x08006118

080029c4 <memset>:
 80029c4:	4603      	mov	r3, r0
 80029c6:	4402      	add	r2, r0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d100      	bne.n	80029ce <memset+0xa>
 80029cc:	4770      	bx	lr
 80029ce:	f803 1b01 	strb.w	r1, [r3], #1
 80029d2:	e7f9      	b.n	80029c8 <memset+0x4>

080029d4 <sprintf>:
 80029d4:	b40e      	push	{r1, r2, r3}
 80029d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029da:	b500      	push	{lr}
 80029dc:	b09c      	sub	sp, #112	; 0x70
 80029de:	ab1d      	add	r3, sp, #116	; 0x74
 80029e0:	9002      	str	r0, [sp, #8]
 80029e2:	9006      	str	r0, [sp, #24]
 80029e4:	9107      	str	r1, [sp, #28]
 80029e6:	9104      	str	r1, [sp, #16]
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <sprintf+0x38>)
 80029ea:	4909      	ldr	r1, [pc, #36]	; (8002a10 <sprintf+0x3c>)
 80029ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80029f0:	9105      	str	r1, [sp, #20]
 80029f2:	6800      	ldr	r0, [r0, #0]
 80029f4:	a902      	add	r1, sp, #8
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	f000 f80c 	bl	8002a14 <_svfprintf_r>
 80029fc:	2200      	movs	r2, #0
 80029fe:	9b02      	ldr	r3, [sp, #8]
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	b01c      	add	sp, #112	; 0x70
 8002a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a08:	b003      	add	sp, #12
 8002a0a:	4770      	bx	lr
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	ffff0208 	.word	0xffff0208

08002a14 <_svfprintf_r>:
 8002a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a18:	b0d5      	sub	sp, #340	; 0x154
 8002a1a:	4689      	mov	r9, r1
 8002a1c:	4693      	mov	fp, r2
 8002a1e:	461e      	mov	r6, r3
 8002a20:	9007      	str	r0, [sp, #28]
 8002a22:	f002 f96b 	bl	8004cfc <_localeconv_r>
 8002a26:	6803      	ldr	r3, [r0, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8002a2c:	f7fd fb90 	bl	8000150 <strlen>
 8002a30:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002a34:	900f      	str	r0, [sp, #60]	; 0x3c
 8002a36:	0618      	lsls	r0, r3, #24
 8002a38:	d518      	bpl.n	8002a6c <_svfprintf_r+0x58>
 8002a3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002a3e:	b9ab      	cbnz	r3, 8002a6c <_svfprintf_r+0x58>
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	9807      	ldr	r0, [sp, #28]
 8002a44:	f002 f96a 	bl	8004d1c <_malloc_r>
 8002a48:	f8c9 0000 	str.w	r0, [r9]
 8002a4c:	f8c9 0010 	str.w	r0, [r9, #16]
 8002a50:	b948      	cbnz	r0, 8002a66 <_svfprintf_r+0x52>
 8002a52:	230c      	movs	r3, #12
 8002a54:	9a07      	ldr	r2, [sp, #28]
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8002a5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002a60:	b055      	add	sp, #340	; 0x154
 8002a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a66:	2340      	movs	r3, #64	; 0x40
 8002a68:	f8c9 3014 	str.w	r3, [r9, #20]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8002a72:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8002a76:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 8002a7a:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8002a7e:	ac2b      	add	r4, sp, #172	; 0xac
 8002a80:	9428      	str	r4, [sp, #160]	; 0xa0
 8002a82:	9308      	str	r3, [sp, #32]
 8002a84:	930d      	str	r3, [sp, #52]	; 0x34
 8002a86:	9316      	str	r3, [sp, #88]	; 0x58
 8002a88:	931d      	str	r3, [sp, #116]	; 0x74
 8002a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8002a8c:	465d      	mov	r5, fp
 8002a8e:	462b      	mov	r3, r5
 8002a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a94:	b112      	cbz	r2, 8002a9c <_svfprintf_r+0x88>
 8002a96:	2a25      	cmp	r2, #37	; 0x25
 8002a98:	f040 80e4 	bne.w	8002c64 <_svfprintf_r+0x250>
 8002a9c:	ebb5 070b 	subs.w	r7, r5, fp
 8002aa0:	d00e      	beq.n	8002ac0 <_svfprintf_r+0xac>
 8002aa2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002aa4:	e9c4 b700 	strd	fp, r7, [r4]
 8002aa8:	443b      	add	r3, r7
 8002aaa:	932a      	str	r3, [sp, #168]	; 0xa8
 8002aac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002aae:	3301      	adds	r3, #1
 8002ab0:	2b07      	cmp	r3, #7
 8002ab2:	9329      	str	r3, [sp, #164]	; 0xa4
 8002ab4:	f300 80d8 	bgt.w	8002c68 <_svfprintf_r+0x254>
 8002ab8:	3408      	adds	r4, #8
 8002aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002abc:	443b      	add	r3, r7
 8002abe:	9310      	str	r3, [sp, #64]	; 0x40
 8002ac0:	782b      	ldrb	r3, [r5, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f001 81a4 	beq.w	8003e10 <_svfprintf_r+0x13fc>
 8002ac8:	1c6b      	adds	r3, r5, #1
 8002aca:	930e      	str	r3, [sp, #56]	; 0x38
 8002acc:	2300      	movs	r3, #0
 8002ace:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002ad2:	469a      	mov	sl, r3
 8002ad4:	270a      	movs	r7, #10
 8002ad6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002ada:	9311      	str	r3, [sp, #68]	; 0x44
 8002adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8002ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8002ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aea:	3b20      	subs	r3, #32
 8002aec:	2b5a      	cmp	r3, #90	; 0x5a
 8002aee:	f200 8614 	bhi.w	800371a <_svfprintf_r+0xd06>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <_svfprintf_r+0xe4>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002cfb 	.word	0x08002cfb
 8002afc:	0800371b 	.word	0x0800371b
 8002b00:	0800371b 	.word	0x0800371b
 8002b04:	08002d0d 	.word	0x08002d0d
 8002b08:	0800371b 	.word	0x0800371b
 8002b0c:	0800371b 	.word	0x0800371b
 8002b10:	0800371b 	.word	0x0800371b
 8002b14:	08002cc1 	.word	0x08002cc1
 8002b18:	0800371b 	.word	0x0800371b
 8002b1c:	0800371b 	.word	0x0800371b
 8002b20:	08002d13 	.word	0x08002d13
 8002b24:	08002d29 	.word	0x08002d29
 8002b28:	0800371b 	.word	0x0800371b
 8002b2c:	08002d23 	.word	0x08002d23
 8002b30:	08002d2d 	.word	0x08002d2d
 8002b34:	0800371b 	.word	0x0800371b
 8002b38:	08002d5f 	.word	0x08002d5f
 8002b3c:	08002d65 	.word	0x08002d65
 8002b40:	08002d65 	.word	0x08002d65
 8002b44:	08002d65 	.word	0x08002d65
 8002b48:	08002d65 	.word	0x08002d65
 8002b4c:	08002d65 	.word	0x08002d65
 8002b50:	08002d65 	.word	0x08002d65
 8002b54:	08002d65 	.word	0x08002d65
 8002b58:	08002d65 	.word	0x08002d65
 8002b5c:	08002d65 	.word	0x08002d65
 8002b60:	0800371b 	.word	0x0800371b
 8002b64:	0800371b 	.word	0x0800371b
 8002b68:	0800371b 	.word	0x0800371b
 8002b6c:	0800371b 	.word	0x0800371b
 8002b70:	0800371b 	.word	0x0800371b
 8002b74:	0800371b 	.word	0x0800371b
 8002b78:	0800371b 	.word	0x0800371b
 8002b7c:	08002e53 	.word	0x08002e53
 8002b80:	0800371b 	.word	0x0800371b
 8002b84:	08002dbf 	.word	0x08002dbf
 8002b88:	08002de1 	.word	0x08002de1
 8002b8c:	08002e53 	.word	0x08002e53
 8002b90:	08002e53 	.word	0x08002e53
 8002b94:	08002e53 	.word	0x08002e53
 8002b98:	0800371b 	.word	0x0800371b
 8002b9c:	0800371b 	.word	0x0800371b
 8002ba0:	0800371b 	.word	0x0800371b
 8002ba4:	0800371b 	.word	0x0800371b
 8002ba8:	08002d85 	.word	0x08002d85
 8002bac:	0800371b 	.word	0x0800371b
 8002bb0:	0800371b 	.word	0x0800371b
 8002bb4:	08003321 	.word	0x08003321
 8002bb8:	0800371b 	.word	0x0800371b
 8002bbc:	0800371b 	.word	0x0800371b
 8002bc0:	0800371b 	.word	0x0800371b
 8002bc4:	080033ad 	.word	0x080033ad
 8002bc8:	0800371b 	.word	0x0800371b
 8002bcc:	08003589 	.word	0x08003589
 8002bd0:	0800371b 	.word	0x0800371b
 8002bd4:	0800371b 	.word	0x0800371b
 8002bd8:	08002c81 	.word	0x08002c81
 8002bdc:	0800371b 	.word	0x0800371b
 8002be0:	0800371b 	.word	0x0800371b
 8002be4:	0800371b 	.word	0x0800371b
 8002be8:	0800371b 	.word	0x0800371b
 8002bec:	0800371b 	.word	0x0800371b
 8002bf0:	0800371b 	.word	0x0800371b
 8002bf4:	0800371b 	.word	0x0800371b
 8002bf8:	0800371b 	.word	0x0800371b
 8002bfc:	08002e53 	.word	0x08002e53
 8002c00:	0800371b 	.word	0x0800371b
 8002c04:	08002dbf 	.word	0x08002dbf
 8002c08:	08002de5 	.word	0x08002de5
 8002c0c:	08002e53 	.word	0x08002e53
 8002c10:	08002e53 	.word	0x08002e53
 8002c14:	08002e53 	.word	0x08002e53
 8002c18:	08002d8b 	.word	0x08002d8b
 8002c1c:	08002de5 	.word	0x08002de5
 8002c20:	08002db3 	.word	0x08002db3
 8002c24:	0800371b 	.word	0x0800371b
 8002c28:	08002da5 	.word	0x08002da5
 8002c2c:	0800371b 	.word	0x0800371b
 8002c30:	080032db 	.word	0x080032db
 8002c34:	08003325 	.word	0x08003325
 8002c38:	0800338d 	.word	0x0800338d
 8002c3c:	08002db3 	.word	0x08002db3
 8002c40:	0800371b 	.word	0x0800371b
 8002c44:	080033ad 	.word	0x080033ad
 8002c48:	08002add 	.word	0x08002add
 8002c4c:	0800358d 	.word	0x0800358d
 8002c50:	0800371b 	.word	0x0800371b
 8002c54:	0800371b 	.word	0x0800371b
 8002c58:	080035cb 	.word	0x080035cb
 8002c5c:	0800371b 	.word	0x0800371b
 8002c60:	08002add 	.word	0x08002add
 8002c64:	461d      	mov	r5, r3
 8002c66:	e712      	b.n	8002a8e <_svfprintf_r+0x7a>
 8002c68:	aa28      	add	r2, sp, #160	; 0xa0
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	9807      	ldr	r0, [sp, #28]
 8002c6e:	f002 fdba 	bl	80057e6 <__ssprint_r>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	f040 8157 	bne.w	8002f26 <_svfprintf_r+0x512>
 8002c78:	ac2b      	add	r4, sp, #172	; 0xac
 8002c7a:	e71e      	b.n	8002aba <_svfprintf_r+0xa6>
 8002c7c:	461e      	mov	r6, r3
 8002c7e:	e72d      	b.n	8002adc <_svfprintf_r+0xc8>
 8002c80:	4bad      	ldr	r3, [pc, #692]	; (8002f38 <_svfprintf_r+0x524>)
 8002c82:	f01a 0f20 	tst.w	sl, #32
 8002c86:	931c      	str	r3, [sp, #112]	; 0x70
 8002c88:	f000 84a2 	beq.w	80035d0 <_svfprintf_r+0xbbc>
 8002c8c:	3607      	adds	r6, #7
 8002c8e:	f026 0607 	bic.w	r6, r6, #7
 8002c92:	f106 0308 	add.w	r3, r6, #8
 8002c96:	930c      	str	r3, [sp, #48]	; 0x30
 8002c98:	e9d6 6700 	ldrd	r6, r7, [r6]
 8002c9c:	f01a 0f01 	tst.w	sl, #1
 8002ca0:	d00a      	beq.n	8002cb8 <_svfprintf_r+0x2a4>
 8002ca2:	ea56 0307 	orrs.w	r3, r6, r7
 8002ca6:	d007      	beq.n	8002cb8 <_svfprintf_r+0x2a4>
 8002ca8:	2330      	movs	r3, #48	; 0x30
 8002caa:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8002cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cb0:	f04a 0a02 	orr.w	sl, sl, #2
 8002cb4:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8002cb8:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e33f      	b.n	8003340 <_svfprintf_r+0x92c>
 8002cc0:	9807      	ldr	r0, [sp, #28]
 8002cc2:	f002 f81b 	bl	8004cfc <_localeconv_r>
 8002cc6:	6843      	ldr	r3, [r0, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	931d      	str	r3, [sp, #116]	; 0x74
 8002ccc:	f7fd fa40 	bl	8000150 <strlen>
 8002cd0:	9016      	str	r0, [sp, #88]	; 0x58
 8002cd2:	9807      	ldr	r0, [sp, #28]
 8002cd4:	f002 f812 	bl	8004cfc <_localeconv_r>
 8002cd8:	6883      	ldr	r3, [r0, #8]
 8002cda:	930d      	str	r3, [sp, #52]	; 0x34
 8002cdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f43f aefc 	beq.w	8002adc <_svfprintf_r+0xc8>
 8002ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f43f aef8 	beq.w	8002adc <_svfprintf_r+0xc8>
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f43f aef4 	beq.w	8002adc <_svfprintf_r+0xc8>
 8002cf4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8002cf8:	e6f0      	b.n	8002adc <_svfprintf_r+0xc8>
 8002cfa:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f47f aeec 	bne.w	8002adc <_svfprintf_r+0xc8>
 8002d04:	2320      	movs	r3, #32
 8002d06:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002d0a:	e6e7      	b.n	8002adc <_svfprintf_r+0xc8>
 8002d0c:	f04a 0a01 	orr.w	sl, sl, #1
 8002d10:	e6e4      	b.n	8002adc <_svfprintf_r+0xc8>
 8002d12:	6832      	ldr	r2, [r6, #0]
 8002d14:	1d33      	adds	r3, r6, #4
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	9211      	str	r2, [sp, #68]	; 0x44
 8002d1a:	daaf      	bge.n	8002c7c <_svfprintf_r+0x268>
 8002d1c:	461e      	mov	r6, r3
 8002d1e:	4252      	negs	r2, r2
 8002d20:	9211      	str	r2, [sp, #68]	; 0x44
 8002d22:	f04a 0a04 	orr.w	sl, sl, #4
 8002d26:	e6d9      	b.n	8002adc <_svfprintf_r+0xc8>
 8002d28:	232b      	movs	r3, #43	; 0x2b
 8002d2a:	e7ec      	b.n	8002d06 <_svfprintf_r+0x2f2>
 8002d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	2a2a      	cmp	r2, #42	; 0x2a
 8002d36:	920a      	str	r2, [sp, #40]	; 0x28
 8002d38:	d10f      	bne.n	8002d5a <_svfprintf_r+0x346>
 8002d3a:	6835      	ldr	r5, [r6, #0]
 8002d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8002d3e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8002d42:	3604      	adds	r6, #4
 8002d44:	e6ca      	b.n	8002adc <_svfprintf_r+0xc8>
 8002d46:	fb07 2505 	mla	r5, r7, r5, r2
 8002d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d4e:	920a      	str	r2, [sp, #40]	; 0x28
 8002d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d52:	3a30      	subs	r2, #48	; 0x30
 8002d54:	2a09      	cmp	r2, #9
 8002d56:	d9f6      	bls.n	8002d46 <_svfprintf_r+0x332>
 8002d58:	e6c5      	b.n	8002ae6 <_svfprintf_r+0xd2>
 8002d5a:	2500      	movs	r5, #0
 8002d5c:	e7f8      	b.n	8002d50 <_svfprintf_r+0x33c>
 8002d5e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8002d62:	e6bb      	b.n	8002adc <_svfprintf_r+0xc8>
 8002d64:	2200      	movs	r2, #0
 8002d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d68:	9211      	str	r2, [sp, #68]	; 0x44
 8002d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002d6e:	3a30      	subs	r2, #48	; 0x30
 8002d70:	fb07 2201 	mla	r2, r7, r1, r2
 8002d74:	9211      	str	r2, [sp, #68]	; 0x44
 8002d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d7a:	920a      	str	r2, [sp, #40]	; 0x28
 8002d7c:	3a30      	subs	r2, #48	; 0x30
 8002d7e:	2a09      	cmp	r2, #9
 8002d80:	d9f3      	bls.n	8002d6a <_svfprintf_r+0x356>
 8002d82:	e6b0      	b.n	8002ae6 <_svfprintf_r+0xd2>
 8002d84:	f04a 0a08 	orr.w	sl, sl, #8
 8002d88:	e6a8      	b.n	8002adc <_svfprintf_r+0xc8>
 8002d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b68      	cmp	r3, #104	; 0x68
 8002d90:	bf01      	itttt	eq
 8002d92:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8002d94:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8002d98:	3301      	addeq	r3, #1
 8002d9a:	930e      	streq	r3, [sp, #56]	; 0x38
 8002d9c:	bf18      	it	ne
 8002d9e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8002da2:	e69b      	b.n	8002adc <_svfprintf_r+0xc8>
 8002da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b6c      	cmp	r3, #108	; 0x6c
 8002daa:	d105      	bne.n	8002db8 <_svfprintf_r+0x3a4>
 8002dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dae:	3301      	adds	r3, #1
 8002db0:	930e      	str	r3, [sp, #56]	; 0x38
 8002db2:	f04a 0a20 	orr.w	sl, sl, #32
 8002db6:	e691      	b.n	8002adc <_svfprintf_r+0xc8>
 8002db8:	f04a 0a10 	orr.w	sl, sl, #16
 8002dbc:	e68e      	b.n	8002adc <_svfprintf_r+0xc8>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	1d33      	adds	r3, r6, #4
 8002dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8002dc4:	6833      	ldr	r3, [r6, #0]
 8002dc6:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8002dca:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8002dce:	4680      	mov	r8, r0
 8002dd0:	2501      	movs	r5, #1
 8002dd2:	9012      	str	r0, [sp, #72]	; 0x48
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	900b      	str	r0, [sp, #44]	; 0x2c
 8002dd8:	4606      	mov	r6, r0
 8002dda:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8002dde:	e2fe      	b.n	80033de <_svfprintf_r+0x9ca>
 8002de0:	f04a 0a10 	orr.w	sl, sl, #16
 8002de4:	f01a 0f20 	tst.w	sl, #32
 8002de8:	d020      	beq.n	8002e2c <_svfprintf_r+0x418>
 8002dea:	3607      	adds	r6, #7
 8002dec:	f026 0607 	bic.w	r6, r6, #7
 8002df0:	f106 0308 	add.w	r3, r6, #8
 8002df4:	930c      	str	r3, [sp, #48]	; 0x30
 8002df6:	e9d6 6700 	ldrd	r6, r7, [r6]
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	f177 0300 	sbcs.w	r3, r7, #0
 8002e00:	da05      	bge.n	8002e0e <_svfprintf_r+0x3fa>
 8002e02:	232d      	movs	r3, #45	; 0x2d
 8002e04:	4276      	negs	r6, r6
 8002e06:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002e0a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002e0e:	1c6b      	adds	r3, r5, #1
 8002e10:	f040 83f1 	bne.w	80035f6 <_svfprintf_r+0xbe2>
 8002e14:	2f00      	cmp	r7, #0
 8002e16:	bf08      	it	eq
 8002e18:	2e0a      	cmpeq	r6, #10
 8002e1a:	f080 8423 	bcs.w	8003664 <_svfprintf_r+0xc50>
 8002e1e:	3630      	adds	r6, #48	; 0x30
 8002e20:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8002e24:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8002e28:	f000 bc08 	b.w	800363c <_svfprintf_r+0xc28>
 8002e2c:	1d33      	adds	r3, r6, #4
 8002e2e:	f01a 0f10 	tst.w	sl, #16
 8002e32:	930c      	str	r3, [sp, #48]	; 0x30
 8002e34:	d002      	beq.n	8002e3c <_svfprintf_r+0x428>
 8002e36:	6836      	ldr	r6, [r6, #0]
 8002e38:	17f7      	asrs	r7, r6, #31
 8002e3a:	e7de      	b.n	8002dfa <_svfprintf_r+0x3e6>
 8002e3c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8002e40:	6836      	ldr	r6, [r6, #0]
 8002e42:	d001      	beq.n	8002e48 <_svfprintf_r+0x434>
 8002e44:	b236      	sxth	r6, r6
 8002e46:	e7f7      	b.n	8002e38 <_svfprintf_r+0x424>
 8002e48:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8002e4c:	bf18      	it	ne
 8002e4e:	b276      	sxtbne	r6, r6
 8002e50:	e7f2      	b.n	8002e38 <_svfprintf_r+0x424>
 8002e52:	3607      	adds	r6, #7
 8002e54:	f026 0607 	bic.w	r6, r6, #7
 8002e58:	f106 0308 	add.w	r3, r6, #8
 8002e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8002e5e:	6833      	ldr	r3, [r6, #0]
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e64:	9314      	str	r3, [sp, #80]	; 0x50
 8002e66:	6873      	ldr	r3, [r6, #4]
 8002e68:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002e6a:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8002e6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e70:	4638      	mov	r0, r7
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <_svfprintf_r+0x528>)
 8002e74:	4631      	mov	r1, r6
 8002e76:	f7fd fdc9 	bl	8000a0c <__aeabi_dcmpun>
 8002e7a:	bb00      	cbnz	r0, 8002ebe <_svfprintf_r+0x4aa>
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e80:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <_svfprintf_r+0x528>)
 8002e82:	4638      	mov	r0, r7
 8002e84:	4631      	mov	r1, r6
 8002e86:	f7fd fda3 	bl	80009d0 <__aeabi_dcmple>
 8002e8a:	b9c0      	cbnz	r0, 8002ebe <_svfprintf_r+0x4aa>
 8002e8c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8002e90:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8002e94:	f7fd fd92 	bl	80009bc <__aeabi_dcmplt>
 8002e98:	b110      	cbz	r0, 8002ea0 <_svfprintf_r+0x48c>
 8002e9a:	232d      	movs	r3, #45	; 0x2d
 8002e9c:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002ea0:	4a27      	ldr	r2, [pc, #156]	; (8002f40 <_svfprintf_r+0x52c>)
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <_svfprintf_r+0x530>)
 8002ea4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002ea6:	f04f 0800 	mov.w	r8, #0
 8002eaa:	2947      	cmp	r1, #71	; 0x47
 8002eac:	bfcc      	ite	gt
 8002eae:	4693      	movgt	fp, r2
 8002eb0:	469b      	movle	fp, r3
 8002eb2:	2503      	movs	r5, #3
 8002eb4:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8002eb8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8002ebc:	e3c4      	b.n	8003648 <_svfprintf_r+0xc34>
 8002ebe:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8002ec2:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8002ec6:	f7fd fda1 	bl	8000a0c <__aeabi_dcmpun>
 8002eca:	4680      	mov	r8, r0
 8002ecc:	b140      	cbz	r0, 8002ee0 <_svfprintf_r+0x4cc>
 8002ece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <_svfprintf_r+0x534>)
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfbc      	itt	lt
 8002ed6:	232d      	movlt	r3, #45	; 0x2d
 8002ed8:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <_svfprintf_r+0x538>)
 8002ede:	e7e1      	b.n	8002ea4 <_svfprintf_r+0x490>
 8002ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ee2:	f023 0320 	bic.w	r3, r3, #32
 8002ee6:	2b41      	cmp	r3, #65	; 0x41
 8002ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eea:	d131      	bne.n	8002f50 <_svfprintf_r+0x53c>
 8002eec:	2330      	movs	r3, #48	; 0x30
 8002eee:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8002ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ef4:	f04a 0a02 	orr.w	sl, sl, #2
 8002ef8:	2b61      	cmp	r3, #97	; 0x61
 8002efa:	bf14      	ite	ne
 8002efc:	2358      	movne	r3, #88	; 0x58
 8002efe:	2378      	moveq	r3, #120	; 0x78
 8002f00:	2d63      	cmp	r5, #99	; 0x63
 8002f02:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8002f06:	f340 8111 	ble.w	800312c <_svfprintf_r+0x718>
 8002f0a:	1c69      	adds	r1, r5, #1
 8002f0c:	9807      	ldr	r0, [sp, #28]
 8002f0e:	f001 ff05 	bl	8004d1c <_malloc_r>
 8002f12:	4683      	mov	fp, r0
 8002f14:	2800      	cmp	r0, #0
 8002f16:	f040 810c 	bne.w	8003132 <_svfprintf_r+0x71e>
 8002f1a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f22:	f8a9 300c 	strh.w	r3, [r9, #12]
 8002f26:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002f2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f30:	bf18      	it	ne
 8002f32:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002f36:	e591      	b.n	8002a5c <_svfprintf_r+0x48>
 8002f38:	08005eb9 	.word	0x08005eb9
 8002f3c:	7fefffff 	.word	0x7fefffff
 8002f40:	08005e9c 	.word	0x08005e9c
 8002f44:	08005e98 	.word	0x08005e98
 8002f48:	08005ea4 	.word	0x08005ea4
 8002f4c:	08005ea0 	.word	0x08005ea0
 8002f50:	1c69      	adds	r1, r5, #1
 8002f52:	f000 80f0 	beq.w	8003136 <_svfprintf_r+0x722>
 8002f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f58:	2b47      	cmp	r3, #71	; 0x47
 8002f5a:	d102      	bne.n	8002f62 <_svfprintf_r+0x54e>
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	f000 80ec 	beq.w	800313a <_svfprintf_r+0x726>
 8002f62:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8002f66:	9315      	str	r3, [sp, #84]	; 0x54
 8002f68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f6a:	1e1e      	subs	r6, r3, #0
 8002f6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f6e:	9308      	str	r3, [sp, #32]
 8002f70:	bfb7      	itett	lt
 8002f72:	4633      	movlt	r3, r6
 8002f74:	2300      	movge	r3, #0
 8002f76:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8002f7a:	232d      	movlt	r3, #45	; 0x2d
 8002f7c:	9319      	str	r3, [sp, #100]	; 0x64
 8002f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f80:	2b41      	cmp	r3, #65	; 0x41
 8002f82:	f040 80eb 	bne.w	800315c <_svfprintf_r+0x748>
 8002f86:	aa22      	add	r2, sp, #136	; 0x88
 8002f88:	9808      	ldr	r0, [sp, #32]
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	f002 fbd4 	bl	8005738 <frexp>
 8002f90:	2200      	movs	r2, #0
 8002f92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002f96:	f7fd fa9f 	bl	80004d8 <__aeabi_dmul>
 8002f9a:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8002f9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002fa2:	f7fd fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8002fa6:	b108      	cbz	r0, 8002fac <_svfprintf_r+0x598>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	9322      	str	r3, [sp, #136]	; 0x88
 8002fac:	4fac      	ldr	r7, [pc, #688]	; (8003260 <_svfprintf_r+0x84c>)
 8002fae:	4bad      	ldr	r3, [pc, #692]	; (8003264 <_svfprintf_r+0x850>)
 8002fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fb2:	465e      	mov	r6, fp
 8002fb4:	2a61      	cmp	r2, #97	; 0x61
 8002fb6:	bf08      	it	eq
 8002fb8:	461f      	moveq	r7, r3
 8002fba:	9712      	str	r7, [sp, #72]	; 0x48
 8002fbc:	1e6f      	subs	r7, r5, #1
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002fc4:	4ba8      	ldr	r3, [pc, #672]	; (8003268 <_svfprintf_r+0x854>)
 8002fc6:	f7fd fa87 	bl	80004d8 <__aeabi_dmul>
 8002fca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002fce:	f7fd fd33 	bl	8000a38 <__aeabi_d2iz>
 8002fd2:	901e      	str	r0, [sp, #120]	; 0x78
 8002fd4:	f7fd fa16 	bl	8000404 <__aeabi_i2d>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002fe0:	f7fd f8c2 	bl	8000168 <__aeabi_dsub>
 8002fe4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002fe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002fec:	5c9b      	ldrb	r3, [r3, r2]
 8002fee:	1c7a      	adds	r2, r7, #1
 8002ff0:	f806 3b01 	strb.w	r3, [r6], #1
 8002ff4:	971f      	str	r7, [sp, #124]	; 0x7c
 8002ff6:	d006      	beq.n	8003006 <_svfprintf_r+0x5f2>
 8002ff8:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8002ffc:	3f01      	subs	r7, #1
 8002ffe:	f7fd fcd3 	bl	80009a8 <__aeabi_dcmpeq>
 8003002:	2800      	cmp	r0, #0
 8003004:	d0db      	beq.n	8002fbe <_svfprintf_r+0x5aa>
 8003006:	2200      	movs	r2, #0
 8003008:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800300c:	4b97      	ldr	r3, [pc, #604]	; (800326c <_svfprintf_r+0x858>)
 800300e:	f7fd fcf3 	bl	80009f8 <__aeabi_dcmpgt>
 8003012:	b960      	cbnz	r0, 800302e <_svfprintf_r+0x61a>
 8003014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003018:	2200      	movs	r2, #0
 800301a:	4b94      	ldr	r3, [pc, #592]	; (800326c <_svfprintf_r+0x858>)
 800301c:	f7fd fcc4 	bl	80009a8 <__aeabi_dcmpeq>
 8003020:	2800      	cmp	r0, #0
 8003022:	f000 8096 	beq.w	8003152 <_svfprintf_r+0x73e>
 8003026:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003028:	07db      	lsls	r3, r3, #31
 800302a:	f140 8092 	bpl.w	8003152 <_svfprintf_r+0x73e>
 800302e:	2030      	movs	r0, #48	; 0x30
 8003030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003032:	9626      	str	r6, [sp, #152]	; 0x98
 8003034:	7bd9      	ldrb	r1, [r3, #15]
 8003036:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003038:	1e53      	subs	r3, r2, #1
 800303a:	9326      	str	r3, [sp, #152]	; 0x98
 800303c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8003040:	428b      	cmp	r3, r1
 8003042:	d07d      	beq.n	8003140 <_svfprintf_r+0x72c>
 8003044:	2b39      	cmp	r3, #57	; 0x39
 8003046:	bf0b      	itete	eq
 8003048:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 800304a:	3301      	addne	r3, #1
 800304c:	7a9b      	ldrbeq	r3, [r3, #10]
 800304e:	b2db      	uxtbne	r3, r3
 8003050:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003054:	4633      	mov	r3, r6
 8003056:	eba3 030b 	sub.w	r3, r3, fp
 800305a:	9308      	str	r3, [sp, #32]
 800305c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800305e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8003060:	2b47      	cmp	r3, #71	; 0x47
 8003062:	f040 80c7 	bne.w	80031f4 <_svfprintf_r+0x7e0>
 8003066:	1cf7      	adds	r7, r6, #3
 8003068:	db02      	blt.n	8003070 <_svfprintf_r+0x65c>
 800306a:	42b5      	cmp	r5, r6
 800306c:	f280 80ed 	bge.w	800324a <_svfprintf_r+0x836>
 8003070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003072:	3b02      	subs	r3, #2
 8003074:	930a      	str	r3, [sp, #40]	; 0x28
 8003076:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003078:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800307c:	f021 0120 	bic.w	r1, r1, #32
 8003080:	2941      	cmp	r1, #65	; 0x41
 8003082:	bf08      	it	eq
 8003084:	320f      	addeq	r2, #15
 8003086:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 800308a:	bf06      	itte	eq
 800308c:	b2d2      	uxtbeq	r2, r2
 800308e:	2101      	moveq	r1, #1
 8003090:	2100      	movne	r1, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8003098:	bfb4      	ite	lt
 800309a:	222d      	movlt	r2, #45	; 0x2d
 800309c:	222b      	movge	r2, #43	; 0x2b
 800309e:	9322      	str	r3, [sp, #136]	; 0x88
 80030a0:	bfb8      	it	lt
 80030a2:	f1c6 0301 	rsblt	r3, r6, #1
 80030a6:	2b09      	cmp	r3, #9
 80030a8:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 80030ac:	f340 80b9 	ble.w	8003222 <_svfprintf_r+0x80e>
 80030b0:	250a      	movs	r5, #10
 80030b2:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 80030b6:	fb93 f0f5 	sdiv	r0, r3, r5
 80030ba:	fb05 3310 	mls	r3, r5, r0, r3
 80030be:	2809      	cmp	r0, #9
 80030c0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80030c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80030c8:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80030cc:	4603      	mov	r3, r0
 80030ce:	f300 80a1 	bgt.w	8003214 <_svfprintf_r+0x800>
 80030d2:	3330      	adds	r3, #48	; 0x30
 80030d4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80030d8:	3a02      	subs	r2, #2
 80030da:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 80030de:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 80030e2:	4282      	cmp	r2, r0
 80030e4:	4619      	mov	r1, r3
 80030e6:	f0c0 8097 	bcc.w	8003218 <_svfprintf_r+0x804>
 80030ea:	9a08      	ldr	r2, [sp, #32]
 80030ec:	ab24      	add	r3, sp, #144	; 0x90
 80030ee:	1acb      	subs	r3, r1, r3
 80030f0:	2a01      	cmp	r2, #1
 80030f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80030f4:	eb03 0502 	add.w	r5, r3, r2
 80030f8:	dc02      	bgt.n	8003100 <_svfprintf_r+0x6ec>
 80030fa:	f01a 0f01 	tst.w	sl, #1
 80030fe:	d001      	beq.n	8003104 <_svfprintf_r+0x6f0>
 8003100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003102:	441d      	add	r5, r3
 8003104:	2700      	movs	r7, #0
 8003106:	463e      	mov	r6, r7
 8003108:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	9315      	str	r3, [sp, #84]	; 0x54
 8003112:	970b      	str	r7, [sp, #44]	; 0x2c
 8003114:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 830b 	beq.w	8003732 <_svfprintf_r+0xd1e>
 800311c:	232d      	movs	r3, #45	; 0x2d
 800311e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003122:	2300      	movs	r3, #0
 8003124:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8003128:	9312      	str	r3, [sp, #72]	; 0x48
 800312a:	e158      	b.n	80033de <_svfprintf_r+0x9ca>
 800312c:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8003130:	e717      	b.n	8002f62 <_svfprintf_r+0x54e>
 8003132:	4680      	mov	r8, r0
 8003134:	e715      	b.n	8002f62 <_svfprintf_r+0x54e>
 8003136:	2506      	movs	r5, #6
 8003138:	e713      	b.n	8002f62 <_svfprintf_r+0x54e>
 800313a:	46a8      	mov	r8, r5
 800313c:	2501      	movs	r5, #1
 800313e:	e710      	b.n	8002f62 <_svfprintf_r+0x54e>
 8003140:	f802 0c01 	strb.w	r0, [r2, #-1]
 8003144:	e777      	b.n	8003036 <_svfprintf_r+0x622>
 8003146:	f803 1b01 	strb.w	r1, [r3], #1
 800314a:	1af2      	subs	r2, r6, r3
 800314c:	2a00      	cmp	r2, #0
 800314e:	dafa      	bge.n	8003146 <_svfprintf_r+0x732>
 8003150:	e781      	b.n	8003056 <_svfprintf_r+0x642>
 8003152:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003154:	4633      	mov	r3, r6
 8003156:	2130      	movs	r1, #48	; 0x30
 8003158:	4416      	add	r6, r2
 800315a:	e7f6      	b.n	800314a <_svfprintf_r+0x736>
 800315c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800315e:	2b46      	cmp	r3, #70	; 0x46
 8003160:	d004      	beq.n	800316c <_svfprintf_r+0x758>
 8003162:	2b45      	cmp	r3, #69	; 0x45
 8003164:	d140      	bne.n	80031e8 <_svfprintf_r+0x7d4>
 8003166:	1c6f      	adds	r7, r5, #1
 8003168:	2302      	movs	r3, #2
 800316a:	e001      	b.n	8003170 <_svfprintf_r+0x75c>
 800316c:	462f      	mov	r7, r5
 800316e:	2303      	movs	r3, #3
 8003170:	aa26      	add	r2, sp, #152	; 0x98
 8003172:	9204      	str	r2, [sp, #16]
 8003174:	aa23      	add	r2, sp, #140	; 0x8c
 8003176:	9203      	str	r2, [sp, #12]
 8003178:	aa22      	add	r2, sp, #136	; 0x88
 800317a:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	9a08      	ldr	r2, [sp, #32]
 8003182:	4633      	mov	r3, r6
 8003184:	9807      	ldr	r0, [sp, #28]
 8003186:	f000 fef3 	bl	8003f70 <_dtoa_r>
 800318a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800318c:	4683      	mov	fp, r0
 800318e:	2b47      	cmp	r3, #71	; 0x47
 8003190:	d102      	bne.n	8003198 <_svfprintf_r+0x784>
 8003192:	f01a 0f01 	tst.w	sl, #1
 8003196:	d02b      	beq.n	80031f0 <_svfprintf_r+0x7dc>
 8003198:	eb0b 0307 	add.w	r3, fp, r7
 800319c:	9312      	str	r3, [sp, #72]	; 0x48
 800319e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031a0:	2b46      	cmp	r3, #70	; 0x46
 80031a2:	d111      	bne.n	80031c8 <_svfprintf_r+0x7b4>
 80031a4:	f89b 3000 	ldrb.w	r3, [fp]
 80031a8:	2b30      	cmp	r3, #48	; 0x30
 80031aa:	d109      	bne.n	80031c0 <_svfprintf_r+0x7ac>
 80031ac:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80031b0:	9808      	ldr	r0, [sp, #32]
 80031b2:	4631      	mov	r1, r6
 80031b4:	f7fd fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80031b8:	b910      	cbnz	r0, 80031c0 <_svfprintf_r+0x7ac>
 80031ba:	f1c7 0701 	rsb	r7, r7, #1
 80031be:	9722      	str	r7, [sp, #136]	; 0x88
 80031c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80031c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031c4:	441a      	add	r2, r3
 80031c6:	9212      	str	r2, [sp, #72]	; 0x48
 80031c8:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80031cc:	9808      	ldr	r0, [sp, #32]
 80031ce:	4631      	mov	r1, r6
 80031d0:	f7fd fbea 	bl	80009a8 <__aeabi_dcmpeq>
 80031d4:	b950      	cbnz	r0, 80031ec <_svfprintf_r+0x7d8>
 80031d6:	2230      	movs	r2, #48	; 0x30
 80031d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80031dc:	4299      	cmp	r1, r3
 80031de:	d907      	bls.n	80031f0 <_svfprintf_r+0x7dc>
 80031e0:	1c59      	adds	r1, r3, #1
 80031e2:	9126      	str	r1, [sp, #152]	; 0x98
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e7f7      	b.n	80031d8 <_svfprintf_r+0x7c4>
 80031e8:	462f      	mov	r7, r5
 80031ea:	e7bd      	b.n	8003168 <_svfprintf_r+0x754>
 80031ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80031ee:	9326      	str	r3, [sp, #152]	; 0x98
 80031f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031f2:	e730      	b.n	8003056 <_svfprintf_r+0x642>
 80031f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031f6:	2b46      	cmp	r3, #70	; 0x46
 80031f8:	f47f af3d 	bne.w	8003076 <_svfprintf_r+0x662>
 80031fc:	2e00      	cmp	r6, #0
 80031fe:	dd1d      	ble.n	800323c <_svfprintf_r+0x828>
 8003200:	b915      	cbnz	r5, 8003208 <_svfprintf_r+0x7f4>
 8003202:	f01a 0f01 	tst.w	sl, #1
 8003206:	d03d      	beq.n	8003284 <_svfprintf_r+0x870>
 8003208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800320a:	18f3      	adds	r3, r6, r3
 800320c:	441d      	add	r5, r3
 800320e:	2366      	movs	r3, #102	; 0x66
 8003210:	930a      	str	r3, [sp, #40]	; 0x28
 8003212:	e03c      	b.n	800328e <_svfprintf_r+0x87a>
 8003214:	460a      	mov	r2, r1
 8003216:	e74e      	b.n	80030b6 <_svfprintf_r+0x6a2>
 8003218:	f812 1b01 	ldrb.w	r1, [r2], #1
 800321c:	f803 1b01 	strb.w	r1, [r3], #1
 8003220:	e75f      	b.n	80030e2 <_svfprintf_r+0x6ce>
 8003222:	b941      	cbnz	r1, 8003236 <_svfprintf_r+0x822>
 8003224:	2230      	movs	r2, #48	; 0x30
 8003226:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 800322a:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 800322e:	3330      	adds	r3, #48	; 0x30
 8003230:	1c51      	adds	r1, r2, #1
 8003232:	7013      	strb	r3, [r2, #0]
 8003234:	e759      	b.n	80030ea <_svfprintf_r+0x6d6>
 8003236:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 800323a:	e7f8      	b.n	800322e <_svfprintf_r+0x81a>
 800323c:	b915      	cbnz	r5, 8003244 <_svfprintf_r+0x830>
 800323e:	f01a 0f01 	tst.w	sl, #1
 8003242:	d021      	beq.n	8003288 <_svfprintf_r+0x874>
 8003244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003246:	3301      	adds	r3, #1
 8003248:	e7e0      	b.n	800320c <_svfprintf_r+0x7f8>
 800324a:	9b08      	ldr	r3, [sp, #32]
 800324c:	42b3      	cmp	r3, r6
 800324e:	dc0f      	bgt.n	8003270 <_svfprintf_r+0x85c>
 8003250:	f01a 0f01 	tst.w	sl, #1
 8003254:	d02e      	beq.n	80032b4 <_svfprintf_r+0x8a0>
 8003256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003258:	18f5      	adds	r5, r6, r3
 800325a:	2367      	movs	r3, #103	; 0x67
 800325c:	e7d8      	b.n	8003210 <_svfprintf_r+0x7fc>
 800325e:	bf00      	nop
 8003260:	08005eb9 	.word	0x08005eb9
 8003264:	08005ea8 	.word	0x08005ea8
 8003268:	40300000 	.word	0x40300000
 800326c:	3fe00000 	.word	0x3fe00000
 8003270:	9b08      	ldr	r3, [sp, #32]
 8003272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003274:	2e00      	cmp	r6, #0
 8003276:	eb03 0502 	add.w	r5, r3, r2
 800327a:	dcee      	bgt.n	800325a <_svfprintf_r+0x846>
 800327c:	f1c6 0301 	rsb	r3, r6, #1
 8003280:	441d      	add	r5, r3
 8003282:	e7ea      	b.n	800325a <_svfprintf_r+0x846>
 8003284:	4635      	mov	r5, r6
 8003286:	e7c2      	b.n	800320e <_svfprintf_r+0x7fa>
 8003288:	2366      	movs	r3, #102	; 0x66
 800328a:	2501      	movs	r5, #1
 800328c:	930a      	str	r3, [sp, #40]	; 0x28
 800328e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8003292:	930b      	str	r3, [sp, #44]	; 0x2c
 8003294:	d01f      	beq.n	80032d6 <_svfprintf_r+0x8c2>
 8003296:	2700      	movs	r7, #0
 8003298:	2e00      	cmp	r6, #0
 800329a:	970b      	str	r7, [sp, #44]	; 0x2c
 800329c:	f77f af3a 	ble.w	8003114 <_svfprintf_r+0x700>
 80032a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2bff      	cmp	r3, #255	; 0xff
 80032a6:	d107      	bne.n	80032b8 <_svfprintf_r+0x8a4>
 80032a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80032ac:	443b      	add	r3, r7
 80032ae:	fb02 5503 	mla	r5, r2, r3, r5
 80032b2:	e72f      	b.n	8003114 <_svfprintf_r+0x700>
 80032b4:	4635      	mov	r5, r6
 80032b6:	e7d0      	b.n	800325a <_svfprintf_r+0x846>
 80032b8:	42b3      	cmp	r3, r6
 80032ba:	daf5      	bge.n	80032a8 <_svfprintf_r+0x894>
 80032bc:	1af6      	subs	r6, r6, r3
 80032be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	b133      	cbz	r3, 80032d2 <_svfprintf_r+0x8be>
 80032c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032c6:	3301      	adds	r3, #1
 80032c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032cc:	3301      	adds	r3, #1
 80032ce:	930d      	str	r3, [sp, #52]	; 0x34
 80032d0:	e7e6      	b.n	80032a0 <_svfprintf_r+0x88c>
 80032d2:	3701      	adds	r7, #1
 80032d4:	e7e4      	b.n	80032a0 <_svfprintf_r+0x88c>
 80032d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80032d8:	e71c      	b.n	8003114 <_svfprintf_r+0x700>
 80032da:	4632      	mov	r2, r6
 80032dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80032e0:	f01a 0f20 	tst.w	sl, #32
 80032e4:	920c      	str	r2, [sp, #48]	; 0x30
 80032e6:	d009      	beq.n	80032fc <_svfprintf_r+0x8e8>
 80032e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80032ea:	4610      	mov	r0, r2
 80032ec:	17d1      	asrs	r1, r2, #31
 80032ee:	e9c3 0100 	strd	r0, r1, [r3]
 80032f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80032f4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80032f8:	f7ff bbc8 	b.w	8002a8c <_svfprintf_r+0x78>
 80032fc:	f01a 0f10 	tst.w	sl, #16
 8003300:	d002      	beq.n	8003308 <_svfprintf_r+0x8f4>
 8003302:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e7f4      	b.n	80032f2 <_svfprintf_r+0x8de>
 8003308:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800330c:	d002      	beq.n	8003314 <_svfprintf_r+0x900>
 800330e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	e7ee      	b.n	80032f2 <_svfprintf_r+0x8de>
 8003314:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003318:	d0f3      	beq.n	8003302 <_svfprintf_r+0x8ee>
 800331a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e7e8      	b.n	80032f2 <_svfprintf_r+0x8de>
 8003320:	f04a 0a10 	orr.w	sl, sl, #16
 8003324:	f01a 0f20 	tst.w	sl, #32
 8003328:	d01e      	beq.n	8003368 <_svfprintf_r+0x954>
 800332a:	3607      	adds	r6, #7
 800332c:	f026 0607 	bic.w	r6, r6, #7
 8003330:	f106 0308 	add.w	r3, r6, #8
 8003334:	930c      	str	r3, [sp, #48]	; 0x30
 8003336:	e9d6 6700 	ldrd	r6, r7, [r6]
 800333a:	2300      	movs	r3, #0
 800333c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8003340:	2200      	movs	r2, #0
 8003342:	1c69      	adds	r1, r5, #1
 8003344:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8003348:	f000 8158 	beq.w	80035fc <_svfprintf_r+0xbe8>
 800334c:	4652      	mov	r2, sl
 800334e:	ea56 0107 	orrs.w	r1, r6, r7
 8003352:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8003356:	f040 8151 	bne.w	80035fc <_svfprintf_r+0xbe8>
 800335a:	2d00      	cmp	r5, #0
 800335c:	f000 81d3 	beq.w	8003706 <_svfprintf_r+0xcf2>
 8003360:	2b01      	cmp	r3, #1
 8003362:	f040 814e 	bne.w	8003602 <_svfprintf_r+0xbee>
 8003366:	e55a      	b.n	8002e1e <_svfprintf_r+0x40a>
 8003368:	1d33      	adds	r3, r6, #4
 800336a:	f01a 0f10 	tst.w	sl, #16
 800336e:	930c      	str	r3, [sp, #48]	; 0x30
 8003370:	d001      	beq.n	8003376 <_svfprintf_r+0x962>
 8003372:	6836      	ldr	r6, [r6, #0]
 8003374:	e003      	b.n	800337e <_svfprintf_r+0x96a>
 8003376:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800337a:	d002      	beq.n	8003382 <_svfprintf_r+0x96e>
 800337c:	8836      	ldrh	r6, [r6, #0]
 800337e:	2700      	movs	r7, #0
 8003380:	e7db      	b.n	800333a <_svfprintf_r+0x926>
 8003382:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003386:	d0f4      	beq.n	8003372 <_svfprintf_r+0x95e>
 8003388:	7836      	ldrb	r6, [r6, #0]
 800338a:	e7f8      	b.n	800337e <_svfprintf_r+0x96a>
 800338c:	1d33      	adds	r3, r6, #4
 800338e:	930c      	str	r3, [sp, #48]	; 0x30
 8003390:	f647 0330 	movw	r3, #30768	; 0x7830
 8003394:	2278      	movs	r2, #120	; 0x78
 8003396:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 800339a:	4baf      	ldr	r3, [pc, #700]	; (8003658 <_svfprintf_r+0xc44>)
 800339c:	6836      	ldr	r6, [r6, #0]
 800339e:	931c      	str	r3, [sp, #112]	; 0x70
 80033a0:	2700      	movs	r7, #0
 80033a2:	f04a 0a02 	orr.w	sl, sl, #2
 80033a6:	2302      	movs	r3, #2
 80033a8:	920a      	str	r2, [sp, #40]	; 0x28
 80033aa:	e7c9      	b.n	8003340 <_svfprintf_r+0x92c>
 80033ac:	1d33      	adds	r3, r6, #4
 80033ae:	f8d6 b000 	ldr.w	fp, [r6]
 80033b2:	2600      	movs	r6, #0
 80033b4:	1c68      	adds	r0, r5, #1
 80033b6:	930c      	str	r3, [sp, #48]	; 0x30
 80033b8:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 80033bc:	f000 80de 	beq.w	800357c <_svfprintf_r+0xb68>
 80033c0:	462a      	mov	r2, r5
 80033c2:	4631      	mov	r1, r6
 80033c4:	4658      	mov	r0, fp
 80033c6:	f001 fedf 	bl	8005188 <memchr>
 80033ca:	4680      	mov	r8, r0
 80033cc:	2800      	cmp	r0, #0
 80033ce:	f43f ad73 	beq.w	8002eb8 <_svfprintf_r+0x4a4>
 80033d2:	46b0      	mov	r8, r6
 80033d4:	4637      	mov	r7, r6
 80033d6:	eba0 050b 	sub.w	r5, r0, fp
 80033da:	9612      	str	r6, [sp, #72]	; 0x48
 80033dc:	960b      	str	r6, [sp, #44]	; 0x2c
 80033de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80033e0:	42ab      	cmp	r3, r5
 80033e2:	bfb8      	it	lt
 80033e4:	462b      	movlt	r3, r5
 80033e6:	9315      	str	r3, [sp, #84]	; 0x54
 80033e8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80033ec:	b113      	cbz	r3, 80033f4 <_svfprintf_r+0x9e0>
 80033ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80033f0:	3301      	adds	r3, #1
 80033f2:	9315      	str	r3, [sp, #84]	; 0x54
 80033f4:	f01a 0302 	ands.w	r3, sl, #2
 80033f8:	931e      	str	r3, [sp, #120]	; 0x78
 80033fa:	bf1e      	ittt	ne
 80033fc:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 80033fe:	3302      	addne	r3, #2
 8003400:	9315      	strne	r3, [sp, #84]	; 0x54
 8003402:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8003406:	931f      	str	r3, [sp, #124]	; 0x7c
 8003408:	d121      	bne.n	800344e <_svfprintf_r+0xa3a>
 800340a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800340c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	9319      	str	r3, [sp, #100]	; 0x64
 8003414:	dd1b      	ble.n	800344e <_svfprintf_r+0xa3a>
 8003416:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800341a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800341c:	3201      	adds	r2, #1
 800341e:	2810      	cmp	r0, #16
 8003420:	488e      	ldr	r0, [pc, #568]	; (800365c <_svfprintf_r+0xc48>)
 8003422:	f104 0108 	add.w	r1, r4, #8
 8003426:	6020      	str	r0, [r4, #0]
 8003428:	f300 8187 	bgt.w	800373a <_svfprintf_r+0xd26>
 800342c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800342e:	2a07      	cmp	r2, #7
 8003430:	4403      	add	r3, r0
 8003432:	6060      	str	r0, [r4, #4]
 8003434:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003438:	f340 8194 	ble.w	8003764 <_svfprintf_r+0xd50>
 800343c:	aa28      	add	r2, sp, #160	; 0xa0
 800343e:	4649      	mov	r1, r9
 8003440:	9807      	ldr	r0, [sp, #28]
 8003442:	f002 f9d0 	bl	80057e6 <__ssprint_r>
 8003446:	2800      	cmp	r0, #0
 8003448:	f040 84c0 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 800344c:	ac2b      	add	r4, sp, #172	; 0xac
 800344e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8003452:	b173      	cbz	r3, 8003472 <_svfprintf_r+0xa5e>
 8003454:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	2301      	movs	r3, #1
 800345c:	6063      	str	r3, [r4, #4]
 800345e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003460:	3301      	adds	r3, #1
 8003462:	932a      	str	r3, [sp, #168]	; 0xa8
 8003464:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003466:	3301      	adds	r3, #1
 8003468:	2b07      	cmp	r3, #7
 800346a:	9329      	str	r3, [sp, #164]	; 0xa4
 800346c:	f300 817c 	bgt.w	8003768 <_svfprintf_r+0xd54>
 8003470:	3408      	adds	r4, #8
 8003472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003474:	b16b      	cbz	r3, 8003492 <_svfprintf_r+0xa7e>
 8003476:	ab21      	add	r3, sp, #132	; 0x84
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	2302      	movs	r3, #2
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003480:	3302      	adds	r3, #2
 8003482:	932a      	str	r3, [sp, #168]	; 0xa8
 8003484:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003486:	3301      	adds	r3, #1
 8003488:	2b07      	cmp	r3, #7
 800348a:	9329      	str	r3, [sp, #164]	; 0xa4
 800348c:	f300 8176 	bgt.w	800377c <_svfprintf_r+0xd68>
 8003490:	3408      	adds	r4, #8
 8003492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003494:	2b80      	cmp	r3, #128	; 0x80
 8003496:	d121      	bne.n	80034dc <_svfprintf_r+0xac8>
 8003498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800349a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	9319      	str	r3, [sp, #100]	; 0x64
 80034a2:	dd1b      	ble.n	80034dc <_svfprintf_r+0xac8>
 80034a4:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80034a8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80034aa:	3201      	adds	r2, #1
 80034ac:	2810      	cmp	r0, #16
 80034ae:	486c      	ldr	r0, [pc, #432]	; (8003660 <_svfprintf_r+0xc4c>)
 80034b0:	f104 0108 	add.w	r1, r4, #8
 80034b4:	6020      	str	r0, [r4, #0]
 80034b6:	f300 816b 	bgt.w	8003790 <_svfprintf_r+0xd7c>
 80034ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80034bc:	2a07      	cmp	r2, #7
 80034be:	4403      	add	r3, r0
 80034c0:	6060      	str	r0, [r4, #4]
 80034c2:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80034c6:	f340 8178 	ble.w	80037ba <_svfprintf_r+0xda6>
 80034ca:	aa28      	add	r2, sp, #160	; 0xa0
 80034cc:	4649      	mov	r1, r9
 80034ce:	9807      	ldr	r0, [sp, #28]
 80034d0:	f002 f989 	bl	80057e6 <__ssprint_r>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	f040 8479 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 80034da:	ac2b      	add	r4, sp, #172	; 0xac
 80034dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80034de:	1b5b      	subs	r3, r3, r5
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	9312      	str	r3, [sp, #72]	; 0x48
 80034e4:	dd1b      	ble.n	800351e <_svfprintf_r+0xb0a>
 80034e6:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80034ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80034ec:	3201      	adds	r2, #1
 80034ee:	2810      	cmp	r0, #16
 80034f0:	485b      	ldr	r0, [pc, #364]	; (8003660 <_svfprintf_r+0xc4c>)
 80034f2:	f104 0108 	add.w	r1, r4, #8
 80034f6:	6020      	str	r0, [r4, #0]
 80034f8:	f300 8161 	bgt.w	80037be <_svfprintf_r+0xdaa>
 80034fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80034fe:	2a07      	cmp	r2, #7
 8003500:	4403      	add	r3, r0
 8003502:	6060      	str	r0, [r4, #4]
 8003504:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003508:	f340 816e 	ble.w	80037e8 <_svfprintf_r+0xdd4>
 800350c:	aa28      	add	r2, sp, #160	; 0xa0
 800350e:	4649      	mov	r1, r9
 8003510:	9807      	ldr	r0, [sp, #28]
 8003512:	f002 f968 	bl	80057e6 <__ssprint_r>
 8003516:	2800      	cmp	r0, #0
 8003518:	f040 8458 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 800351c:	ac2b      	add	r4, sp, #172	; 0xac
 800351e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003520:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003524:	9312      	str	r3, [sp, #72]	; 0x48
 8003526:	f040 8161 	bne.w	80037ec <_svfprintf_r+0xdd8>
 800352a:	e9c4 b500 	strd	fp, r5, [r4]
 800352e:	441d      	add	r5, r3
 8003530:	952a      	str	r5, [sp, #168]	; 0xa8
 8003532:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003534:	3301      	adds	r3, #1
 8003536:	2b07      	cmp	r3, #7
 8003538:	9329      	str	r3, [sp, #164]	; 0xa4
 800353a:	f300 819d 	bgt.w	8003878 <_svfprintf_r+0xe64>
 800353e:	3408      	adds	r4, #8
 8003540:	f01a 0f04 	tst.w	sl, #4
 8003544:	f040 8424 	bne.w	8003d90 <_svfprintf_r+0x137c>
 8003548:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800354c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800354e:	428a      	cmp	r2, r1
 8003550:	bfac      	ite	ge
 8003552:	189b      	addge	r3, r3, r2
 8003554:	185b      	addlt	r3, r3, r1
 8003556:	9310      	str	r3, [sp, #64]	; 0x40
 8003558:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800355a:	b13b      	cbz	r3, 800356c <_svfprintf_r+0xb58>
 800355c:	aa28      	add	r2, sp, #160	; 0xa0
 800355e:	4649      	mov	r1, r9
 8003560:	9807      	ldr	r0, [sp, #28]
 8003562:	f002 f940 	bl	80057e6 <__ssprint_r>
 8003566:	2800      	cmp	r0, #0
 8003568:	f040 8430 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 800356c:	2300      	movs	r3, #0
 800356e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003570:	f1b8 0f00 	cmp.w	r8, #0
 8003574:	f040 8446 	bne.w	8003e04 <_svfprintf_r+0x13f0>
 8003578:	ac2b      	add	r4, sp, #172	; 0xac
 800357a:	e6ba      	b.n	80032f2 <_svfprintf_r+0x8de>
 800357c:	4658      	mov	r0, fp
 800357e:	f7fc fde7 	bl	8000150 <strlen>
 8003582:	46b0      	mov	r8, r6
 8003584:	4605      	mov	r5, r0
 8003586:	e497      	b.n	8002eb8 <_svfprintf_r+0x4a4>
 8003588:	f04a 0a10 	orr.w	sl, sl, #16
 800358c:	f01a 0f20 	tst.w	sl, #32
 8003590:	d009      	beq.n	80035a6 <_svfprintf_r+0xb92>
 8003592:	3607      	adds	r6, #7
 8003594:	f026 0607 	bic.w	r6, r6, #7
 8003598:	f106 0308 	add.w	r3, r6, #8
 800359c:	930c      	str	r3, [sp, #48]	; 0x30
 800359e:	e9d6 6700 	ldrd	r6, r7, [r6]
 80035a2:	2301      	movs	r3, #1
 80035a4:	e6cc      	b.n	8003340 <_svfprintf_r+0x92c>
 80035a6:	1d33      	adds	r3, r6, #4
 80035a8:	f01a 0f10 	tst.w	sl, #16
 80035ac:	930c      	str	r3, [sp, #48]	; 0x30
 80035ae:	d001      	beq.n	80035b4 <_svfprintf_r+0xba0>
 80035b0:	6836      	ldr	r6, [r6, #0]
 80035b2:	e003      	b.n	80035bc <_svfprintf_r+0xba8>
 80035b4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80035b8:	d002      	beq.n	80035c0 <_svfprintf_r+0xbac>
 80035ba:	8836      	ldrh	r6, [r6, #0]
 80035bc:	2700      	movs	r7, #0
 80035be:	e7f0      	b.n	80035a2 <_svfprintf_r+0xb8e>
 80035c0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80035c4:	d0f4      	beq.n	80035b0 <_svfprintf_r+0xb9c>
 80035c6:	7836      	ldrb	r6, [r6, #0]
 80035c8:	e7f8      	b.n	80035bc <_svfprintf_r+0xba8>
 80035ca:	4b23      	ldr	r3, [pc, #140]	; (8003658 <_svfprintf_r+0xc44>)
 80035cc:	f7ff bb59 	b.w	8002c82 <_svfprintf_r+0x26e>
 80035d0:	1d33      	adds	r3, r6, #4
 80035d2:	f01a 0f10 	tst.w	sl, #16
 80035d6:	930c      	str	r3, [sp, #48]	; 0x30
 80035d8:	d001      	beq.n	80035de <_svfprintf_r+0xbca>
 80035da:	6836      	ldr	r6, [r6, #0]
 80035dc:	e003      	b.n	80035e6 <_svfprintf_r+0xbd2>
 80035de:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80035e2:	d003      	beq.n	80035ec <_svfprintf_r+0xbd8>
 80035e4:	8836      	ldrh	r6, [r6, #0]
 80035e6:	2700      	movs	r7, #0
 80035e8:	f7ff bb58 	b.w	8002c9c <_svfprintf_r+0x288>
 80035ec:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80035f0:	d0f3      	beq.n	80035da <_svfprintf_r+0xbc6>
 80035f2:	7836      	ldrb	r6, [r6, #0]
 80035f4:	e7f7      	b.n	80035e6 <_svfprintf_r+0xbd2>
 80035f6:	4652      	mov	r2, sl
 80035f8:	2301      	movs	r3, #1
 80035fa:	e6a8      	b.n	800334e <_svfprintf_r+0x93a>
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	f43f ac09 	beq.w	8002e14 <_svfprintf_r+0x400>
 8003602:	2b02      	cmp	r3, #2
 8003604:	d06d      	beq.n	80036e2 <_svfprintf_r+0xcce>
 8003606:	ab54      	add	r3, sp, #336	; 0x150
 8003608:	08f1      	lsrs	r1, r6, #3
 800360a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800360e:	08f8      	lsrs	r0, r7, #3
 8003610:	f006 0207 	and.w	r2, r6, #7
 8003614:	4607      	mov	r7, r0
 8003616:	460e      	mov	r6, r1
 8003618:	3230      	adds	r2, #48	; 0x30
 800361a:	ea56 0107 	orrs.w	r1, r6, r7
 800361e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003622:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003626:	d114      	bne.n	8003652 <_svfprintf_r+0xc3e>
 8003628:	f01a 0f01 	tst.w	sl, #1
 800362c:	d006      	beq.n	800363c <_svfprintf_r+0xc28>
 800362e:	2a30      	cmp	r2, #48	; 0x30
 8003630:	d004      	beq.n	800363c <_svfprintf_r+0xc28>
 8003632:	2230      	movs	r2, #48	; 0x30
 8003634:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8003638:	f1a3 0b02 	sub.w	fp, r3, #2
 800363c:	f04f 0800 	mov.w	r8, #0
 8003640:	ab54      	add	r3, sp, #336	; 0x150
 8003642:	9512      	str	r5, [sp, #72]	; 0x48
 8003644:	eba3 050b 	sub.w	r5, r3, fp
 8003648:	4647      	mov	r7, r8
 800364a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800364e:	4646      	mov	r6, r8
 8003650:	e6c5      	b.n	80033de <_svfprintf_r+0x9ca>
 8003652:	465b      	mov	r3, fp
 8003654:	e7d8      	b.n	8003608 <_svfprintf_r+0xbf4>
 8003656:	bf00      	nop
 8003658:	08005ea8 	.word	0x08005ea8
 800365c:	08005ecc 	.word	0x08005ecc
 8003660:	08005edc 	.word	0x08005edc
 8003664:	2300      	movs	r3, #0
 8003666:	9308      	str	r3, [sp, #32]
 8003668:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800366c:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8003670:	930b      	str	r3, [sp, #44]	; 0x2c
 8003672:	220a      	movs	r2, #10
 8003674:	2300      	movs	r3, #0
 8003676:	4630      	mov	r0, r6
 8003678:	4639      	mov	r1, r7
 800367a:	f7fd fa05 	bl	8000a88 <__aeabi_uldivmod>
 800367e:	9b08      	ldr	r3, [sp, #32]
 8003680:	3230      	adds	r2, #48	; 0x30
 8003682:	3301      	adds	r3, #1
 8003684:	9308      	str	r3, [sp, #32]
 8003686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003688:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 800368c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003690:	b1d3      	cbz	r3, 80036c8 <_svfprintf_r+0xcb4>
 8003692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003694:	9a08      	ldr	r2, [sp, #32]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d115      	bne.n	80036c8 <_svfprintf_r+0xcb4>
 800369c:	2aff      	cmp	r2, #255	; 0xff
 800369e:	d013      	beq.n	80036c8 <_svfprintf_r+0xcb4>
 80036a0:	2f00      	cmp	r7, #0
 80036a2:	bf08      	it	eq
 80036a4:	2e0a      	cmpeq	r6, #10
 80036a6:	d30f      	bcc.n	80036c8 <_svfprintf_r+0xcb4>
 80036a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80036aa:	991d      	ldr	r1, [sp, #116]	; 0x74
 80036ac:	ebab 0b03 	sub.w	fp, fp, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	4658      	mov	r0, fp
 80036b4:	f002 f882 	bl	80057bc <strncpy>
 80036b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	b11b      	cbz	r3, 80036c6 <_svfprintf_r+0xcb2>
 80036be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036c0:	3301      	adds	r3, #1
 80036c2:	930d      	str	r3, [sp, #52]	; 0x34
 80036c4:	2300      	movs	r3, #0
 80036c6:	9308      	str	r3, [sp, #32]
 80036c8:	2300      	movs	r3, #0
 80036ca:	4630      	mov	r0, r6
 80036cc:	4639      	mov	r1, r7
 80036ce:	220a      	movs	r2, #10
 80036d0:	f7fd f9da 	bl	8000a88 <__aeabi_uldivmod>
 80036d4:	4606      	mov	r6, r0
 80036d6:	460f      	mov	r7, r1
 80036d8:	ea56 0307 	orrs.w	r3, r6, r7
 80036dc:	d0ae      	beq.n	800363c <_svfprintf_r+0xc28>
 80036de:	46d8      	mov	r8, fp
 80036e0:	e7c7      	b.n	8003672 <_svfprintf_r+0xc5e>
 80036e2:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80036e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80036e8:	f006 030f 	and.w	r3, r6, #15
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	093a      	lsrs	r2, r7, #4
 80036f0:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80036f4:	0933      	lsrs	r3, r6, #4
 80036f6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80036fa:	461e      	mov	r6, r3
 80036fc:	4617      	mov	r7, r2
 80036fe:	ea56 0307 	orrs.w	r3, r6, r7
 8003702:	d1f0      	bne.n	80036e6 <_svfprintf_r+0xcd2>
 8003704:	e79a      	b.n	800363c <_svfprintf_r+0xc28>
 8003706:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 800370a:	2b00      	cmp	r3, #0
 800370c:	d196      	bne.n	800363c <_svfprintf_r+0xc28>
 800370e:	07d2      	lsls	r2, r2, #31
 8003710:	bf44      	itt	mi
 8003712:	2330      	movmi	r3, #48	; 0x30
 8003714:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8003718:	e790      	b.n	800363c <_svfprintf_r+0xc28>
 800371a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8377 	beq.w	8003e10 <_svfprintf_r+0x13fc>
 8003722:	2000      	movs	r0, #0
 8003724:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8003728:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 800372c:	960c      	str	r6, [sp, #48]	; 0x30
 800372e:	f7ff bb4e 	b.w	8002dce <_svfprintf_r+0x3ba>
 8003732:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8003736:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003738:	e4f6      	b.n	8003128 <_svfprintf_r+0x714>
 800373a:	2010      	movs	r0, #16
 800373c:	2a07      	cmp	r2, #7
 800373e:	4403      	add	r3, r0
 8003740:	6060      	str	r0, [r4, #4]
 8003742:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003746:	dd08      	ble.n	800375a <_svfprintf_r+0xd46>
 8003748:	aa28      	add	r2, sp, #160	; 0xa0
 800374a:	4649      	mov	r1, r9
 800374c:	9807      	ldr	r0, [sp, #28]
 800374e:	f002 f84a 	bl	80057e6 <__ssprint_r>
 8003752:	2800      	cmp	r0, #0
 8003754:	f040 833a 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003758:	a92b      	add	r1, sp, #172	; 0xac
 800375a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800375c:	460c      	mov	r4, r1
 800375e:	3b10      	subs	r3, #16
 8003760:	9319      	str	r3, [sp, #100]	; 0x64
 8003762:	e658      	b.n	8003416 <_svfprintf_r+0xa02>
 8003764:	460c      	mov	r4, r1
 8003766:	e672      	b.n	800344e <_svfprintf_r+0xa3a>
 8003768:	aa28      	add	r2, sp, #160	; 0xa0
 800376a:	4649      	mov	r1, r9
 800376c:	9807      	ldr	r0, [sp, #28]
 800376e:	f002 f83a 	bl	80057e6 <__ssprint_r>
 8003772:	2800      	cmp	r0, #0
 8003774:	f040 832a 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003778:	ac2b      	add	r4, sp, #172	; 0xac
 800377a:	e67a      	b.n	8003472 <_svfprintf_r+0xa5e>
 800377c:	aa28      	add	r2, sp, #160	; 0xa0
 800377e:	4649      	mov	r1, r9
 8003780:	9807      	ldr	r0, [sp, #28]
 8003782:	f002 f830 	bl	80057e6 <__ssprint_r>
 8003786:	2800      	cmp	r0, #0
 8003788:	f040 8320 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 800378c:	ac2b      	add	r4, sp, #172	; 0xac
 800378e:	e680      	b.n	8003492 <_svfprintf_r+0xa7e>
 8003790:	2010      	movs	r0, #16
 8003792:	2a07      	cmp	r2, #7
 8003794:	4403      	add	r3, r0
 8003796:	6060      	str	r0, [r4, #4]
 8003798:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800379c:	dd08      	ble.n	80037b0 <_svfprintf_r+0xd9c>
 800379e:	aa28      	add	r2, sp, #160	; 0xa0
 80037a0:	4649      	mov	r1, r9
 80037a2:	9807      	ldr	r0, [sp, #28]
 80037a4:	f002 f81f 	bl	80057e6 <__ssprint_r>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	f040 830f 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 80037ae:	a92b      	add	r1, sp, #172	; 0xac
 80037b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80037b2:	460c      	mov	r4, r1
 80037b4:	3b10      	subs	r3, #16
 80037b6:	9319      	str	r3, [sp, #100]	; 0x64
 80037b8:	e674      	b.n	80034a4 <_svfprintf_r+0xa90>
 80037ba:	460c      	mov	r4, r1
 80037bc:	e68e      	b.n	80034dc <_svfprintf_r+0xac8>
 80037be:	2010      	movs	r0, #16
 80037c0:	2a07      	cmp	r2, #7
 80037c2:	4403      	add	r3, r0
 80037c4:	6060      	str	r0, [r4, #4]
 80037c6:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80037ca:	dd08      	ble.n	80037de <_svfprintf_r+0xdca>
 80037cc:	aa28      	add	r2, sp, #160	; 0xa0
 80037ce:	4649      	mov	r1, r9
 80037d0:	9807      	ldr	r0, [sp, #28]
 80037d2:	f002 f808 	bl	80057e6 <__ssprint_r>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	f040 82f8 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 80037dc:	a92b      	add	r1, sp, #172	; 0xac
 80037de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037e0:	460c      	mov	r4, r1
 80037e2:	3b10      	subs	r3, #16
 80037e4:	9312      	str	r3, [sp, #72]	; 0x48
 80037e6:	e67e      	b.n	80034e6 <_svfprintf_r+0xad2>
 80037e8:	460c      	mov	r4, r1
 80037ea:	e698      	b.n	800351e <_svfprintf_r+0xb0a>
 80037ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ee:	2b65      	cmp	r3, #101	; 0x65
 80037f0:	f340 8234 	ble.w	8003c5c <_svfprintf_r+0x1248>
 80037f4:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80037f8:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80037fc:	f7fd f8d4 	bl	80009a8 <__aeabi_dcmpeq>
 8003800:	2800      	cmp	r0, #0
 8003802:	d069      	beq.n	80038d8 <_svfprintf_r+0xec4>
 8003804:	4b6e      	ldr	r3, [pc, #440]	; (80039c0 <_svfprintf_r+0xfac>)
 8003806:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	2301      	movs	r3, #1
 800380c:	441d      	add	r5, r3
 800380e:	6063      	str	r3, [r4, #4]
 8003810:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003812:	952a      	str	r5, [sp, #168]	; 0xa8
 8003814:	3301      	adds	r3, #1
 8003816:	2b07      	cmp	r3, #7
 8003818:	9329      	str	r3, [sp, #164]	; 0xa4
 800381a:	dc37      	bgt.n	800388c <_svfprintf_r+0xe78>
 800381c:	3408      	adds	r4, #8
 800381e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003820:	9a08      	ldr	r2, [sp, #32]
 8003822:	4293      	cmp	r3, r2
 8003824:	db03      	blt.n	800382e <_svfprintf_r+0xe1a>
 8003826:	f01a 0f01 	tst.w	sl, #1
 800382a:	f43f ae89 	beq.w	8003540 <_svfprintf_r+0xb2c>
 800382e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003832:	6023      	str	r3, [r4, #0]
 8003834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003836:	6063      	str	r3, [r4, #4]
 8003838:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800383a:	4413      	add	r3, r2
 800383c:	932a      	str	r3, [sp, #168]	; 0xa8
 800383e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003840:	3301      	adds	r3, #1
 8003842:	2b07      	cmp	r3, #7
 8003844:	9329      	str	r3, [sp, #164]	; 0xa4
 8003846:	dc2b      	bgt.n	80038a0 <_svfprintf_r+0xe8c>
 8003848:	3408      	adds	r4, #8
 800384a:	9b08      	ldr	r3, [sp, #32]
 800384c:	1e5d      	subs	r5, r3, #1
 800384e:	2d00      	cmp	r5, #0
 8003850:	f77f ae76 	ble.w	8003540 <_svfprintf_r+0xb2c>
 8003854:	2710      	movs	r7, #16
 8003856:	4e5b      	ldr	r6, [pc, #364]	; (80039c4 <_svfprintf_r+0xfb0>)
 8003858:	2d10      	cmp	r5, #16
 800385a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800385e:	f104 0108 	add.w	r1, r4, #8
 8003862:	f103 0301 	add.w	r3, r3, #1
 8003866:	6026      	str	r6, [r4, #0]
 8003868:	dc24      	bgt.n	80038b4 <_svfprintf_r+0xea0>
 800386a:	6065      	str	r5, [r4, #4]
 800386c:	2b07      	cmp	r3, #7
 800386e:	4415      	add	r5, r2
 8003870:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003874:	f340 8289 	ble.w	8003d8a <_svfprintf_r+0x1376>
 8003878:	aa28      	add	r2, sp, #160	; 0xa0
 800387a:	4649      	mov	r1, r9
 800387c:	9807      	ldr	r0, [sp, #28]
 800387e:	f001 ffb2 	bl	80057e6 <__ssprint_r>
 8003882:	2800      	cmp	r0, #0
 8003884:	f040 82a2 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003888:	ac2b      	add	r4, sp, #172	; 0xac
 800388a:	e659      	b.n	8003540 <_svfprintf_r+0xb2c>
 800388c:	aa28      	add	r2, sp, #160	; 0xa0
 800388e:	4649      	mov	r1, r9
 8003890:	9807      	ldr	r0, [sp, #28]
 8003892:	f001 ffa8 	bl	80057e6 <__ssprint_r>
 8003896:	2800      	cmp	r0, #0
 8003898:	f040 8298 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 800389c:	ac2b      	add	r4, sp, #172	; 0xac
 800389e:	e7be      	b.n	800381e <_svfprintf_r+0xe0a>
 80038a0:	aa28      	add	r2, sp, #160	; 0xa0
 80038a2:	4649      	mov	r1, r9
 80038a4:	9807      	ldr	r0, [sp, #28]
 80038a6:	f001 ff9e 	bl	80057e6 <__ssprint_r>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	f040 828e 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 80038b0:	ac2b      	add	r4, sp, #172	; 0xac
 80038b2:	e7ca      	b.n	800384a <_svfprintf_r+0xe36>
 80038b4:	3210      	adds	r2, #16
 80038b6:	2b07      	cmp	r3, #7
 80038b8:	6067      	str	r7, [r4, #4]
 80038ba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80038be:	dd08      	ble.n	80038d2 <_svfprintf_r+0xebe>
 80038c0:	aa28      	add	r2, sp, #160	; 0xa0
 80038c2:	4649      	mov	r1, r9
 80038c4:	9807      	ldr	r0, [sp, #28]
 80038c6:	f001 ff8e 	bl	80057e6 <__ssprint_r>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	f040 827e 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 80038d0:	a92b      	add	r1, sp, #172	; 0xac
 80038d2:	3d10      	subs	r5, #16
 80038d4:	460c      	mov	r4, r1
 80038d6:	e7bf      	b.n	8003858 <_svfprintf_r+0xe44>
 80038d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038da:	2b00      	cmp	r3, #0
 80038dc:	dc74      	bgt.n	80039c8 <_svfprintf_r+0xfb4>
 80038de:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <_svfprintf_r+0xfac>)
 80038e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80038e2:	6023      	str	r3, [r4, #0]
 80038e4:	2301      	movs	r3, #1
 80038e6:	441d      	add	r5, r3
 80038e8:	6063      	str	r3, [r4, #4]
 80038ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80038ec:	952a      	str	r5, [sp, #168]	; 0xa8
 80038ee:	3301      	adds	r3, #1
 80038f0:	2b07      	cmp	r3, #7
 80038f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80038f4:	dc3e      	bgt.n	8003974 <_svfprintf_r+0xf60>
 80038f6:	3408      	adds	r4, #8
 80038f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038fa:	b92b      	cbnz	r3, 8003908 <_svfprintf_r+0xef4>
 80038fc:	9b08      	ldr	r3, [sp, #32]
 80038fe:	b91b      	cbnz	r3, 8003908 <_svfprintf_r+0xef4>
 8003900:	f01a 0f01 	tst.w	sl, #1
 8003904:	f43f ae1c 	beq.w	8003540 <_svfprintf_r+0xb2c>
 8003908:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800390a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003910:	6063      	str	r3, [r4, #4]
 8003912:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003914:	4413      	add	r3, r2
 8003916:	932a      	str	r3, [sp, #168]	; 0xa8
 8003918:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800391a:	3301      	adds	r3, #1
 800391c:	2b07      	cmp	r3, #7
 800391e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003920:	dc32      	bgt.n	8003988 <_svfprintf_r+0xf74>
 8003922:	3408      	adds	r4, #8
 8003924:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8003926:	2d00      	cmp	r5, #0
 8003928:	da1b      	bge.n	8003962 <_svfprintf_r+0xf4e>
 800392a:	4623      	mov	r3, r4
 800392c:	2710      	movs	r7, #16
 800392e:	4e25      	ldr	r6, [pc, #148]	; (80039c4 <_svfprintf_r+0xfb0>)
 8003930:	426d      	negs	r5, r5
 8003932:	2d10      	cmp	r5, #16
 8003934:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8003938:	f104 0408 	add.w	r4, r4, #8
 800393c:	f102 0201 	add.w	r2, r2, #1
 8003940:	601e      	str	r6, [r3, #0]
 8003942:	dc2b      	bgt.n	800399c <_svfprintf_r+0xf88>
 8003944:	605d      	str	r5, [r3, #4]
 8003946:	2a07      	cmp	r2, #7
 8003948:	440d      	add	r5, r1
 800394a:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 800394e:	dd08      	ble.n	8003962 <_svfprintf_r+0xf4e>
 8003950:	aa28      	add	r2, sp, #160	; 0xa0
 8003952:	4649      	mov	r1, r9
 8003954:	9807      	ldr	r0, [sp, #28]
 8003956:	f001 ff46 	bl	80057e6 <__ssprint_r>
 800395a:	2800      	cmp	r0, #0
 800395c:	f040 8236 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003960:	ac2b      	add	r4, sp, #172	; 0xac
 8003962:	9b08      	ldr	r3, [sp, #32]
 8003964:	9a08      	ldr	r2, [sp, #32]
 8003966:	6063      	str	r3, [r4, #4]
 8003968:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800396a:	f8c4 b000 	str.w	fp, [r4]
 800396e:	4413      	add	r3, r2
 8003970:	932a      	str	r3, [sp, #168]	; 0xa8
 8003972:	e5de      	b.n	8003532 <_svfprintf_r+0xb1e>
 8003974:	aa28      	add	r2, sp, #160	; 0xa0
 8003976:	4649      	mov	r1, r9
 8003978:	9807      	ldr	r0, [sp, #28]
 800397a:	f001 ff34 	bl	80057e6 <__ssprint_r>
 800397e:	2800      	cmp	r0, #0
 8003980:	f040 8224 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003984:	ac2b      	add	r4, sp, #172	; 0xac
 8003986:	e7b7      	b.n	80038f8 <_svfprintf_r+0xee4>
 8003988:	aa28      	add	r2, sp, #160	; 0xa0
 800398a:	4649      	mov	r1, r9
 800398c:	9807      	ldr	r0, [sp, #28]
 800398e:	f001 ff2a 	bl	80057e6 <__ssprint_r>
 8003992:	2800      	cmp	r0, #0
 8003994:	f040 821a 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003998:	ac2b      	add	r4, sp, #172	; 0xac
 800399a:	e7c3      	b.n	8003924 <_svfprintf_r+0xf10>
 800399c:	3110      	adds	r1, #16
 800399e:	2a07      	cmp	r2, #7
 80039a0:	605f      	str	r7, [r3, #4]
 80039a2:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 80039a6:	dd08      	ble.n	80039ba <_svfprintf_r+0xfa6>
 80039a8:	aa28      	add	r2, sp, #160	; 0xa0
 80039aa:	4649      	mov	r1, r9
 80039ac:	9807      	ldr	r0, [sp, #28]
 80039ae:	f001 ff1a 	bl	80057e6 <__ssprint_r>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	f040 820a 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 80039b8:	ac2b      	add	r4, sp, #172	; 0xac
 80039ba:	3d10      	subs	r5, #16
 80039bc:	4623      	mov	r3, r4
 80039be:	e7b8      	b.n	8003932 <_svfprintf_r+0xf1e>
 80039c0:	08005eca 	.word	0x08005eca
 80039c4:	08005edc 	.word	0x08005edc
 80039c8:	9b08      	ldr	r3, [sp, #32]
 80039ca:	42b3      	cmp	r3, r6
 80039cc:	bfa8      	it	ge
 80039ce:	4633      	movge	r3, r6
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	461d      	mov	r5, r3
 80039d4:	dd0b      	ble.n	80039ee <_svfprintf_r+0xfda>
 80039d6:	e9c4 b300 	strd	fp, r3, [r4]
 80039da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80039dc:	442b      	add	r3, r5
 80039de:	932a      	str	r3, [sp, #168]	; 0xa8
 80039e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80039e2:	3301      	adds	r3, #1
 80039e4:	2b07      	cmp	r3, #7
 80039e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80039e8:	f300 8086 	bgt.w	8003af8 <_svfprintf_r+0x10e4>
 80039ec:	3408      	adds	r4, #8
 80039ee:	2d00      	cmp	r5, #0
 80039f0:	bfb4      	ite	lt
 80039f2:	4635      	movlt	r5, r6
 80039f4:	1b75      	subge	r5, r6, r5
 80039f6:	2d00      	cmp	r5, #0
 80039f8:	dd19      	ble.n	8003a2e <_svfprintf_r+0x101a>
 80039fa:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80039fe:	4896      	ldr	r0, [pc, #600]	; (8003c58 <_svfprintf_r+0x1244>)
 8003a00:	2d10      	cmp	r5, #16
 8003a02:	f103 0301 	add.w	r3, r3, #1
 8003a06:	f104 0108 	add.w	r1, r4, #8
 8003a0a:	6020      	str	r0, [r4, #0]
 8003a0c:	dc7e      	bgt.n	8003b0c <_svfprintf_r+0x10f8>
 8003a0e:	6065      	str	r5, [r4, #4]
 8003a10:	2b07      	cmp	r3, #7
 8003a12:	4415      	add	r5, r2
 8003a14:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003a18:	f340 808b 	ble.w	8003b32 <_svfprintf_r+0x111e>
 8003a1c:	aa28      	add	r2, sp, #160	; 0xa0
 8003a1e:	4649      	mov	r1, r9
 8003a20:	9807      	ldr	r0, [sp, #28]
 8003a22:	f001 fee0 	bl	80057e6 <__ssprint_r>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	f040 81d0 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003a2c:	ac2b      	add	r4, sp, #172	; 0xac
 8003a2e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8003a32:	445e      	add	r6, fp
 8003a34:	d009      	beq.n	8003a4a <_svfprintf_r+0x1036>
 8003a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d17c      	bne.n	8003b36 <_svfprintf_r+0x1122>
 8003a3c:	2f00      	cmp	r7, #0
 8003a3e:	d17c      	bne.n	8003b3a <_svfprintf_r+0x1126>
 8003a40:	9b08      	ldr	r3, [sp, #32]
 8003a42:	445b      	add	r3, fp
 8003a44:	429e      	cmp	r6, r3
 8003a46:	bf28      	it	cs
 8003a48:	461e      	movcs	r6, r3
 8003a4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a4c:	9a08      	ldr	r2, [sp, #32]
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	db02      	blt.n	8003a58 <_svfprintf_r+0x1044>
 8003a52:	f01a 0f01 	tst.w	sl, #1
 8003a56:	d00e      	beq.n	8003a76 <_svfprintf_r+0x1062>
 8003a58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003a5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a60:	6063      	str	r3, [r4, #4]
 8003a62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003a64:	4413      	add	r3, r2
 8003a66:	932a      	str	r3, [sp, #168]	; 0xa8
 8003a68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003a70:	f300 80dd 	bgt.w	8003c2e <_svfprintf_r+0x121a>
 8003a74:	3408      	adds	r4, #8
 8003a76:	9b08      	ldr	r3, [sp, #32]
 8003a78:	9a08      	ldr	r2, [sp, #32]
 8003a7a:	eb0b 0503 	add.w	r5, fp, r3
 8003a7e:	1bab      	subs	r3, r5, r6
 8003a80:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8003a82:	1b55      	subs	r5, r2, r5
 8003a84:	429d      	cmp	r5, r3
 8003a86:	bfa8      	it	ge
 8003a88:	461d      	movge	r5, r3
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	dd0b      	ble.n	8003aa6 <_svfprintf_r+0x1092>
 8003a8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003a90:	e9c4 6500 	strd	r6, r5, [r4]
 8003a94:	442b      	add	r3, r5
 8003a96:	932a      	str	r3, [sp, #168]	; 0xa8
 8003a98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	2b07      	cmp	r3, #7
 8003a9e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003aa0:	f300 80cf 	bgt.w	8003c42 <_svfprintf_r+0x122e>
 8003aa4:	3408      	adds	r4, #8
 8003aa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aa8:	9a08      	ldr	r2, [sp, #32]
 8003aaa:	2d00      	cmp	r5, #0
 8003aac:	eba2 0303 	sub.w	r3, r2, r3
 8003ab0:	bfb4      	ite	lt
 8003ab2:	461d      	movlt	r5, r3
 8003ab4:	1b5d      	subge	r5, r3, r5
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	f77f ad42 	ble.w	8003540 <_svfprintf_r+0xb2c>
 8003abc:	2710      	movs	r7, #16
 8003abe:	4e66      	ldr	r6, [pc, #408]	; (8003c58 <_svfprintf_r+0x1244>)
 8003ac0:	2d10      	cmp	r5, #16
 8003ac2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8003ac6:	f104 0108 	add.w	r1, r4, #8
 8003aca:	f103 0301 	add.w	r3, r3, #1
 8003ace:	6026      	str	r6, [r4, #0]
 8003ad0:	f77f aecb 	ble.w	800386a <_svfprintf_r+0xe56>
 8003ad4:	3210      	adds	r2, #16
 8003ad6:	2b07      	cmp	r3, #7
 8003ad8:	6067      	str	r7, [r4, #4]
 8003ada:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8003ade:	dd08      	ble.n	8003af2 <_svfprintf_r+0x10de>
 8003ae0:	aa28      	add	r2, sp, #160	; 0xa0
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	9807      	ldr	r0, [sp, #28]
 8003ae6:	f001 fe7e 	bl	80057e6 <__ssprint_r>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	f040 816e 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003af0:	a92b      	add	r1, sp, #172	; 0xac
 8003af2:	3d10      	subs	r5, #16
 8003af4:	460c      	mov	r4, r1
 8003af6:	e7e3      	b.n	8003ac0 <_svfprintf_r+0x10ac>
 8003af8:	aa28      	add	r2, sp, #160	; 0xa0
 8003afa:	4649      	mov	r1, r9
 8003afc:	9807      	ldr	r0, [sp, #28]
 8003afe:	f001 fe72 	bl	80057e6 <__ssprint_r>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	f040 8162 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003b08:	ac2b      	add	r4, sp, #172	; 0xac
 8003b0a:	e770      	b.n	80039ee <_svfprintf_r+0xfda>
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	2b07      	cmp	r3, #7
 8003b10:	4402      	add	r2, r0
 8003b12:	6060      	str	r0, [r4, #4]
 8003b14:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8003b18:	dd08      	ble.n	8003b2c <_svfprintf_r+0x1118>
 8003b1a:	aa28      	add	r2, sp, #160	; 0xa0
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	9807      	ldr	r0, [sp, #28]
 8003b20:	f001 fe61 	bl	80057e6 <__ssprint_r>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	f040 8151 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003b2a:	a92b      	add	r1, sp, #172	; 0xac
 8003b2c:	3d10      	subs	r5, #16
 8003b2e:	460c      	mov	r4, r1
 8003b30:	e763      	b.n	80039fa <_svfprintf_r+0xfe6>
 8003b32:	460c      	mov	r4, r1
 8003b34:	e77b      	b.n	8003a2e <_svfprintf_r+0x101a>
 8003b36:	2f00      	cmp	r7, #0
 8003b38:	d049      	beq.n	8003bce <_svfprintf_r+0x11ba>
 8003b3a:	3f01      	subs	r7, #1
 8003b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b44:	6063      	str	r3, [r4, #4]
 8003b46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003b48:	4413      	add	r3, r2
 8003b4a:	932a      	str	r3, [sp, #168]	; 0xa8
 8003b4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003b4e:	3301      	adds	r3, #1
 8003b50:	2b07      	cmp	r3, #7
 8003b52:	9329      	str	r3, [sp, #164]	; 0xa4
 8003b54:	dc42      	bgt.n	8003bdc <_svfprintf_r+0x11c8>
 8003b56:	3408      	adds	r4, #8
 8003b58:	9b08      	ldr	r3, [sp, #32]
 8003b5a:	445b      	add	r3, fp
 8003b5c:	1b9a      	subs	r2, r3, r6
 8003b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bfa8      	it	ge
 8003b66:	4613      	movge	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	dd0a      	ble.n	8003b84 <_svfprintf_r+0x1170>
 8003b6e:	e9c4 6300 	strd	r6, r3, [r4]
 8003b72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003b74:	442b      	add	r3, r5
 8003b76:	932a      	str	r3, [sp, #168]	; 0xa8
 8003b78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003b80:	dc36      	bgt.n	8003bf0 <_svfprintf_r+0x11dc>
 8003b82:	3408      	adds	r4, #8
 8003b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b86:	2d00      	cmp	r5, #0
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	bfb4      	ite	lt
 8003b8c:	461d      	movlt	r5, r3
 8003b8e:	1b5d      	subge	r5, r3, r5
 8003b90:	2d00      	cmp	r5, #0
 8003b92:	dd18      	ble.n	8003bc6 <_svfprintf_r+0x11b2>
 8003b94:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8003b98:	482f      	ldr	r0, [pc, #188]	; (8003c58 <_svfprintf_r+0x1244>)
 8003b9a:	2d10      	cmp	r5, #16
 8003b9c:	f102 0201 	add.w	r2, r2, #1
 8003ba0:	f104 0108 	add.w	r1, r4, #8
 8003ba4:	6020      	str	r0, [r4, #0]
 8003ba6:	dc2d      	bgt.n	8003c04 <_svfprintf_r+0x11f0>
 8003ba8:	442b      	add	r3, r5
 8003baa:	2a07      	cmp	r2, #7
 8003bac:	6065      	str	r5, [r4, #4]
 8003bae:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003bb2:	dd3a      	ble.n	8003c2a <_svfprintf_r+0x1216>
 8003bb4:	aa28      	add	r2, sp, #160	; 0xa0
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	9807      	ldr	r0, [sp, #28]
 8003bba:	f001 fe14 	bl	80057e6 <__ssprint_r>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	f040 8104 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003bc4:	ac2b      	add	r4, sp, #172	; 0xac
 8003bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	441e      	add	r6, r3
 8003bcc:	e733      	b.n	8003a36 <_svfprintf_r+0x1022>
 8003bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8003bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bda:	e7af      	b.n	8003b3c <_svfprintf_r+0x1128>
 8003bdc:	aa28      	add	r2, sp, #160	; 0xa0
 8003bde:	4649      	mov	r1, r9
 8003be0:	9807      	ldr	r0, [sp, #28]
 8003be2:	f001 fe00 	bl	80057e6 <__ssprint_r>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	f040 80f0 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003bec:	ac2b      	add	r4, sp, #172	; 0xac
 8003bee:	e7b3      	b.n	8003b58 <_svfprintf_r+0x1144>
 8003bf0:	aa28      	add	r2, sp, #160	; 0xa0
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	9807      	ldr	r0, [sp, #28]
 8003bf6:	f001 fdf6 	bl	80057e6 <__ssprint_r>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	f040 80e6 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003c00:	ac2b      	add	r4, sp, #172	; 0xac
 8003c02:	e7bf      	b.n	8003b84 <_svfprintf_r+0x1170>
 8003c04:	2010      	movs	r0, #16
 8003c06:	2a07      	cmp	r2, #7
 8003c08:	4403      	add	r3, r0
 8003c0a:	6060      	str	r0, [r4, #4]
 8003c0c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003c10:	dd08      	ble.n	8003c24 <_svfprintf_r+0x1210>
 8003c12:	aa28      	add	r2, sp, #160	; 0xa0
 8003c14:	4649      	mov	r1, r9
 8003c16:	9807      	ldr	r0, [sp, #28]
 8003c18:	f001 fde5 	bl	80057e6 <__ssprint_r>
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	f040 80d5 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003c22:	a92b      	add	r1, sp, #172	; 0xac
 8003c24:	3d10      	subs	r5, #16
 8003c26:	460c      	mov	r4, r1
 8003c28:	e7b4      	b.n	8003b94 <_svfprintf_r+0x1180>
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	e7cb      	b.n	8003bc6 <_svfprintf_r+0x11b2>
 8003c2e:	aa28      	add	r2, sp, #160	; 0xa0
 8003c30:	4649      	mov	r1, r9
 8003c32:	9807      	ldr	r0, [sp, #28]
 8003c34:	f001 fdd7 	bl	80057e6 <__ssprint_r>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	f040 80c7 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003c3e:	ac2b      	add	r4, sp, #172	; 0xac
 8003c40:	e719      	b.n	8003a76 <_svfprintf_r+0x1062>
 8003c42:	aa28      	add	r2, sp, #160	; 0xa0
 8003c44:	4649      	mov	r1, r9
 8003c46:	9807      	ldr	r0, [sp, #28]
 8003c48:	f001 fdcd 	bl	80057e6 <__ssprint_r>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	f040 80bd 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003c52:	ac2b      	add	r4, sp, #172	; 0xac
 8003c54:	e727      	b.n	8003aa6 <_svfprintf_r+0x1092>
 8003c56:	bf00      	nop
 8003c58:	08005edc 	.word	0x08005edc
 8003c5c:	9a08      	ldr	r2, [sp, #32]
 8003c5e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003c60:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003c62:	2a01      	cmp	r2, #1
 8003c64:	f105 0501 	add.w	r5, r5, #1
 8003c68:	f103 0301 	add.w	r3, r3, #1
 8003c6c:	f104 0608 	add.w	r6, r4, #8
 8003c70:	dc02      	bgt.n	8003c78 <_svfprintf_r+0x1264>
 8003c72:	f01a 0f01 	tst.w	sl, #1
 8003c76:	d07d      	beq.n	8003d74 <_svfprintf_r+0x1360>
 8003c78:	2201      	movs	r2, #1
 8003c7a:	2b07      	cmp	r3, #7
 8003c7c:	f8c4 b000 	str.w	fp, [r4]
 8003c80:	6062      	str	r2, [r4, #4]
 8003c82:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003c86:	dd08      	ble.n	8003c9a <_svfprintf_r+0x1286>
 8003c88:	aa28      	add	r2, sp, #160	; 0xa0
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	9807      	ldr	r0, [sp, #28]
 8003c8e:	f001 fdaa 	bl	80057e6 <__ssprint_r>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	f040 809a 	bne.w	8003dcc <_svfprintf_r+0x13b8>
 8003c98:	ae2b      	add	r6, sp, #172	; 0xac
 8003c9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c9e:	6033      	str	r3, [r6, #0]
 8003ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ca2:	6073      	str	r3, [r6, #4]
 8003ca4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003ca6:	4413      	add	r3, r2
 8003ca8:	932a      	str	r3, [sp, #168]	; 0xa8
 8003caa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003cac:	3301      	adds	r3, #1
 8003cae:	2b07      	cmp	r3, #7
 8003cb0:	9329      	str	r3, [sp, #164]	; 0xa4
 8003cb2:	dc31      	bgt.n	8003d18 <_svfprintf_r+0x1304>
 8003cb4:	3608      	adds	r6, #8
 8003cb6:	9b08      	ldr	r3, [sp, #32]
 8003cb8:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8003cbc:	1e5c      	subs	r4, r3, #1
 8003cbe:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003cc2:	f7fc fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d12f      	bne.n	8003d2a <_svfprintf_r+0x1316>
 8003cca:	f10b 0301 	add.w	r3, fp, #1
 8003cce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003cd0:	e9c6 3400 	strd	r3, r4, [r6]
 8003cd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003cd6:	9908      	ldr	r1, [sp, #32]
 8003cd8:	3201      	adds	r2, #1
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	440b      	add	r3, r1
 8003cde:	2a07      	cmp	r2, #7
 8003ce0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003ce4:	dd4f      	ble.n	8003d86 <_svfprintf_r+0x1372>
 8003ce6:	aa28      	add	r2, sp, #160	; 0xa0
 8003ce8:	4649      	mov	r1, r9
 8003cea:	9807      	ldr	r0, [sp, #28]
 8003cec:	f001 fd7b 	bl	80057e6 <__ssprint_r>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d16b      	bne.n	8003dcc <_svfprintf_r+0x13b8>
 8003cf4:	ae2b      	add	r6, sp, #172	; 0xac
 8003cf6:	ab24      	add	r3, sp, #144	; 0x90
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cfc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003cfe:	6073      	str	r3, [r6, #4]
 8003d00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003d02:	4413      	add	r3, r2
 8003d04:	932a      	str	r3, [sp, #168]	; 0xa8
 8003d06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003d08:	3301      	adds	r3, #1
 8003d0a:	2b07      	cmp	r3, #7
 8003d0c:	9329      	str	r3, [sp, #164]	; 0xa4
 8003d0e:	f73f adb3 	bgt.w	8003878 <_svfprintf_r+0xe64>
 8003d12:	f106 0408 	add.w	r4, r6, #8
 8003d16:	e413      	b.n	8003540 <_svfprintf_r+0xb2c>
 8003d18:	aa28      	add	r2, sp, #160	; 0xa0
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	9807      	ldr	r0, [sp, #28]
 8003d1e:	f001 fd62 	bl	80057e6 <__ssprint_r>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d152      	bne.n	8003dcc <_svfprintf_r+0x13b8>
 8003d26:	ae2b      	add	r6, sp, #172	; 0xac
 8003d28:	e7c5      	b.n	8003cb6 <_svfprintf_r+0x12a2>
 8003d2a:	2c00      	cmp	r4, #0
 8003d2c:	dde3      	ble.n	8003cf6 <_svfprintf_r+0x12e2>
 8003d2e:	2710      	movs	r7, #16
 8003d30:	4d3d      	ldr	r5, [pc, #244]	; (8003e28 <_svfprintf_r+0x1414>)
 8003d32:	2c10      	cmp	r4, #16
 8003d34:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8003d38:	f106 0108 	add.w	r1, r6, #8
 8003d3c:	f103 0301 	add.w	r3, r3, #1
 8003d40:	6035      	str	r5, [r6, #0]
 8003d42:	dc07      	bgt.n	8003d54 <_svfprintf_r+0x1340>
 8003d44:	6074      	str	r4, [r6, #4]
 8003d46:	2b07      	cmp	r3, #7
 8003d48:	4414      	add	r4, r2
 8003d4a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8003d4e:	dcca      	bgt.n	8003ce6 <_svfprintf_r+0x12d2>
 8003d50:	460e      	mov	r6, r1
 8003d52:	e7d0      	b.n	8003cf6 <_svfprintf_r+0x12e2>
 8003d54:	3210      	adds	r2, #16
 8003d56:	2b07      	cmp	r3, #7
 8003d58:	6077      	str	r7, [r6, #4]
 8003d5a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8003d5e:	dd06      	ble.n	8003d6e <_svfprintf_r+0x135a>
 8003d60:	aa28      	add	r2, sp, #160	; 0xa0
 8003d62:	4649      	mov	r1, r9
 8003d64:	9807      	ldr	r0, [sp, #28]
 8003d66:	f001 fd3e 	bl	80057e6 <__ssprint_r>
 8003d6a:	bb78      	cbnz	r0, 8003dcc <_svfprintf_r+0x13b8>
 8003d6c:	a92b      	add	r1, sp, #172	; 0xac
 8003d6e:	3c10      	subs	r4, #16
 8003d70:	460e      	mov	r6, r1
 8003d72:	e7de      	b.n	8003d32 <_svfprintf_r+0x131e>
 8003d74:	2201      	movs	r2, #1
 8003d76:	2b07      	cmp	r3, #7
 8003d78:	f8c4 b000 	str.w	fp, [r4]
 8003d7c:	6062      	str	r2, [r4, #4]
 8003d7e:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003d82:	ddb8      	ble.n	8003cf6 <_svfprintf_r+0x12e2>
 8003d84:	e7af      	b.n	8003ce6 <_svfprintf_r+0x12d2>
 8003d86:	3608      	adds	r6, #8
 8003d88:	e7b5      	b.n	8003cf6 <_svfprintf_r+0x12e2>
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	f7ff bbd8 	b.w	8003540 <_svfprintf_r+0xb2c>
 8003d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d94:	1a9d      	subs	r5, r3, r2
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	f77f abd6 	ble.w	8003548 <_svfprintf_r+0xb34>
 8003d9c:	2710      	movs	r7, #16
 8003d9e:	4e23      	ldr	r6, [pc, #140]	; (8003e2c <_svfprintf_r+0x1418>)
 8003da0:	2d10      	cmp	r5, #16
 8003da2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8003da6:	6026      	str	r6, [r4, #0]
 8003da8:	f103 0301 	add.w	r3, r3, #1
 8003dac:	dc18      	bgt.n	8003de0 <_svfprintf_r+0x13cc>
 8003dae:	6065      	str	r5, [r4, #4]
 8003db0:	2b07      	cmp	r3, #7
 8003db2:	4415      	add	r5, r2
 8003db4:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003db8:	f77f abc6 	ble.w	8003548 <_svfprintf_r+0xb34>
 8003dbc:	aa28      	add	r2, sp, #160	; 0xa0
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	9807      	ldr	r0, [sp, #28]
 8003dc2:	f001 fd10 	bl	80057e6 <__ssprint_r>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	f43f abbe 	beq.w	8003548 <_svfprintf_r+0xb34>
 8003dcc:	f1b8 0f00 	cmp.w	r8, #0
 8003dd0:	f43f a8a9 	beq.w	8002f26 <_svfprintf_r+0x512>
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	9807      	ldr	r0, [sp, #28]
 8003dd8:	f000 fed4 	bl	8004b84 <_free_r>
 8003ddc:	f7ff b8a3 	b.w	8002f26 <_svfprintf_r+0x512>
 8003de0:	3210      	adds	r2, #16
 8003de2:	2b07      	cmp	r3, #7
 8003de4:	6067      	str	r7, [r4, #4]
 8003de6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8003dea:	dc02      	bgt.n	8003df2 <_svfprintf_r+0x13de>
 8003dec:	3408      	adds	r4, #8
 8003dee:	3d10      	subs	r5, #16
 8003df0:	e7d6      	b.n	8003da0 <_svfprintf_r+0x138c>
 8003df2:	aa28      	add	r2, sp, #160	; 0xa0
 8003df4:	4649      	mov	r1, r9
 8003df6:	9807      	ldr	r0, [sp, #28]
 8003df8:	f001 fcf5 	bl	80057e6 <__ssprint_r>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d1e5      	bne.n	8003dcc <_svfprintf_r+0x13b8>
 8003e00:	ac2b      	add	r4, sp, #172	; 0xac
 8003e02:	e7f4      	b.n	8003dee <_svfprintf_r+0x13da>
 8003e04:	4641      	mov	r1, r8
 8003e06:	9807      	ldr	r0, [sp, #28]
 8003e08:	f000 febc 	bl	8004b84 <_free_r>
 8003e0c:	f7ff bbb4 	b.w	8003578 <_svfprintf_r+0xb64>
 8003e10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f43f a887 	beq.w	8002f26 <_svfprintf_r+0x512>
 8003e18:	aa28      	add	r2, sp, #160	; 0xa0
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	9807      	ldr	r0, [sp, #28]
 8003e1e:	f001 fce2 	bl	80057e6 <__ssprint_r>
 8003e22:	f7ff b880 	b.w	8002f26 <_svfprintf_r+0x512>
 8003e26:	bf00      	nop
 8003e28:	08005edc 	.word	0x08005edc
 8003e2c:	08005ecc 	.word	0x08005ecc

08003e30 <register_fini>:
 8003e30:	4b02      	ldr	r3, [pc, #8]	; (8003e3c <register_fini+0xc>)
 8003e32:	b113      	cbz	r3, 8003e3a <register_fini+0xa>
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <register_fini+0x10>)
 8003e36:	f000 b805 	b.w	8003e44 <atexit>
 8003e3a:	4770      	bx	lr
 8003e3c:	00000000 	.word	0x00000000
 8003e40:	08004ab5 	.word	0x08004ab5

08003e44 <atexit>:
 8003e44:	2300      	movs	r3, #0
 8003e46:	4601      	mov	r1, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 bd50 	b.w	80058f0 <__register_exitproc>

08003e50 <quorem>:
 8003e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e54:	6903      	ldr	r3, [r0, #16]
 8003e56:	690c      	ldr	r4, [r1, #16]
 8003e58:	4680      	mov	r8, r0
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	f2c0 8084 	blt.w	8003f68 <quorem+0x118>
 8003e60:	3c01      	subs	r4, #1
 8003e62:	f101 0714 	add.w	r7, r1, #20
 8003e66:	f100 0614 	add.w	r6, r0, #20
 8003e6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003e6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003e72:	3501      	adds	r5, #1
 8003e74:	fbb0 f5f5 	udiv	r5, r0, r5
 8003e78:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003e7c:	eb06 030c 	add.w	r3, r6, ip
 8003e80:	eb07 090c 	add.w	r9, r7, ip
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	b39d      	cbz	r5, 8003ef0 <quorem+0xa0>
 8003e88:	f04f 0a00 	mov.w	sl, #0
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	46b6      	mov	lr, r6
 8003e90:	46d3      	mov	fp, sl
 8003e92:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e96:	b293      	uxth	r3, r2
 8003e98:	fb05 a303 	mla	r3, r5, r3, sl
 8003e9c:	0c12      	lsrs	r2, r2, #16
 8003e9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ea2:	fb05 a202 	mla	r2, r5, r2, sl
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	ebab 0303 	sub.w	r3, fp, r3
 8003eac:	f8de b000 	ldr.w	fp, [lr]
 8003eb0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003eb4:	fa1f fb8b 	uxth.w	fp, fp
 8003eb8:	445b      	add	r3, fp
 8003eba:	fa1f fb82 	uxth.w	fp, r2
 8003ebe:	f8de 2000 	ldr.w	r2, [lr]
 8003ec2:	4581      	cmp	r9, r0
 8003ec4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ed2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003ed6:	f84e 3b04 	str.w	r3, [lr], #4
 8003eda:	d2da      	bcs.n	8003e92 <quorem+0x42>
 8003edc:	f856 300c 	ldr.w	r3, [r6, ip]
 8003ee0:	b933      	cbnz	r3, 8003ef0 <quorem+0xa0>
 8003ee2:	9b01      	ldr	r3, [sp, #4]
 8003ee4:	3b04      	subs	r3, #4
 8003ee6:	429e      	cmp	r6, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	d331      	bcc.n	8003f50 <quorem+0x100>
 8003eec:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	f001 fb59 	bl	80055a8 <__mcmp>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	db26      	blt.n	8003f48 <quorem+0xf8>
 8003efa:	4630      	mov	r0, r6
 8003efc:	f04f 0c00 	mov.w	ip, #0
 8003f00:	3501      	adds	r5, #1
 8003f02:	f857 1b04 	ldr.w	r1, [r7], #4
 8003f06:	f8d0 e000 	ldr.w	lr, [r0]
 8003f0a:	b28b      	uxth	r3, r1
 8003f0c:	ebac 0303 	sub.w	r3, ip, r3
 8003f10:	fa1f f28e 	uxth.w	r2, lr
 8003f14:	4413      	add	r3, r2
 8003f16:	0c0a      	lsrs	r2, r1, #16
 8003f18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f26:	45b9      	cmp	r9, r7
 8003f28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f2c:	f840 3b04 	str.w	r3, [r0], #4
 8003f30:	d2e7      	bcs.n	8003f02 <quorem+0xb2>
 8003f32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003f36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003f3a:	b92a      	cbnz	r2, 8003f48 <quorem+0xf8>
 8003f3c:	3b04      	subs	r3, #4
 8003f3e:	429e      	cmp	r6, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	d30b      	bcc.n	8003f5c <quorem+0x10c>
 8003f44:	f8c8 4010 	str.w	r4, [r8, #16]
 8003f48:	4628      	mov	r0, r5
 8003f4a:	b003      	add	sp, #12
 8003f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	3b04      	subs	r3, #4
 8003f54:	2a00      	cmp	r2, #0
 8003f56:	d1c9      	bne.n	8003eec <quorem+0x9c>
 8003f58:	3c01      	subs	r4, #1
 8003f5a:	e7c4      	b.n	8003ee6 <quorem+0x96>
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	2a00      	cmp	r2, #0
 8003f62:	d1ef      	bne.n	8003f44 <quorem+0xf4>
 8003f64:	3c01      	subs	r4, #1
 8003f66:	e7ea      	b.n	8003f3e <quorem+0xee>
 8003f68:	2000      	movs	r0, #0
 8003f6a:	e7ee      	b.n	8003f4a <quorem+0xfa>
 8003f6c:	0000      	movs	r0, r0
	...

08003f70 <_dtoa_r>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	4616      	mov	r6, r2
 8003f76:	461f      	mov	r7, r3
 8003f78:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f7a:	b095      	sub	sp, #84	; 0x54
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003f80:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003f84:	b141      	cbz	r1, 8003f98 <_dtoa_r+0x28>
 8003f86:	2301      	movs	r3, #1
 8003f88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f8a:	4093      	lsls	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
 8003f8e:	604a      	str	r2, [r1, #4]
 8003f90:	f001 f945 	bl	800521e <_Bfree>
 8003f94:	2300      	movs	r3, #0
 8003f96:	6423      	str	r3, [r4, #64]	; 0x40
 8003f98:	1e3b      	subs	r3, r7, #0
 8003f9a:	bfaf      	iteee	ge
 8003f9c:	2300      	movge	r3, #0
 8003f9e:	2201      	movlt	r2, #1
 8003fa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003fa4:	9303      	strlt	r3, [sp, #12]
 8003fa6:	bfa8      	it	ge
 8003fa8:	602b      	strge	r3, [r5, #0]
 8003faa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003fae:	4bb0      	ldr	r3, [pc, #704]	; (8004270 <_dtoa_r+0x300>)
 8003fb0:	bfb8      	it	lt
 8003fb2:	602a      	strlt	r2, [r5, #0]
 8003fb4:	ea33 0308 	bics.w	r3, r3, r8
 8003fb8:	d116      	bne.n	8003fe8 <_dtoa_r+0x78>
 8003fba:	f242 730f 	movw	r3, #9999	; 0x270f
 8003fbe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	9b02      	ldr	r3, [sp, #8]
 8003fc4:	b923      	cbnz	r3, 8003fd0 <_dtoa_r+0x60>
 8003fc6:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f000 853f 	beq.w	8004a4e <_dtoa_r+0xade>
 8003fd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fd2:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8004284 <_dtoa_r+0x314>
 8003fd6:	b11b      	cbz	r3, 8003fe0 <_dtoa_r+0x70>
 8003fd8:	f10b 0303 	add.w	r3, fp, #3
 8003fdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4658      	mov	r0, fp
 8003fe2:	b015      	add	sp, #84	; 0x54
 8003fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2300      	movs	r3, #0
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	f7fc fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8003ff8:	4682      	mov	sl, r0
 8003ffa:	b160      	cbz	r0, 8004016 <_dtoa_r+0xa6>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 851e 	beq.w	8004a46 <_dtoa_r+0xad6>
 800400a:	4b9a      	ldr	r3, [pc, #616]	; (8004274 <_dtoa_r+0x304>)
 800400c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800400e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e7e4      	b.n	8003fe0 <_dtoa_r+0x70>
 8004016:	ab12      	add	r3, sp, #72	; 0x48
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	ab13      	add	r3, sp, #76	; 0x4c
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4632      	mov	r2, r6
 8004020:	463b      	mov	r3, r7
 8004022:	4620      	mov	r0, r4
 8004024:	f001 fb38 	bl	8005698 <__d2b>
 8004028:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800402c:	9006      	str	r0, [sp, #24]
 800402e:	2d00      	cmp	r5, #0
 8004030:	d07d      	beq.n	800412e <_dtoa_r+0x1be>
 8004032:	46b0      	mov	r8, r6
 8004034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004038:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800403c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004040:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004044:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004048:	2200      	movs	r2, #0
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <_dtoa_r+0x308>)
 800404c:	4640      	mov	r0, r8
 800404e:	4649      	mov	r1, r9
 8004050:	f7fc f88a 	bl	8000168 <__aeabi_dsub>
 8004054:	a380      	add	r3, pc, #512	; (adr r3, 8004258 <_dtoa_r+0x2e8>)
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f7fc fa3d 	bl	80004d8 <__aeabi_dmul>
 800405e:	a380      	add	r3, pc, #512	; (adr r3, 8004260 <_dtoa_r+0x2f0>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc f882 	bl	800016c <__adddf3>
 8004068:	4606      	mov	r6, r0
 800406a:	4628      	mov	r0, r5
 800406c:	460f      	mov	r7, r1
 800406e:	f7fc f9c9 	bl	8000404 <__aeabi_i2d>
 8004072:	a37d      	add	r3, pc, #500	; (adr r3, 8004268 <_dtoa_r+0x2f8>)
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f7fc fa2e 	bl	80004d8 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4630      	mov	r0, r6
 8004082:	4639      	mov	r1, r7
 8004084:	f7fc f872 	bl	800016c <__adddf3>
 8004088:	4606      	mov	r6, r0
 800408a:	460f      	mov	r7, r1
 800408c:	f7fc fcd4 	bl	8000a38 <__aeabi_d2iz>
 8004090:	2200      	movs	r2, #0
 8004092:	4682      	mov	sl, r0
 8004094:	2300      	movs	r3, #0
 8004096:	4630      	mov	r0, r6
 8004098:	4639      	mov	r1, r7
 800409a:	f7fc fc8f 	bl	80009bc <__aeabi_dcmplt>
 800409e:	b148      	cbz	r0, 80040b4 <_dtoa_r+0x144>
 80040a0:	4650      	mov	r0, sl
 80040a2:	f7fc f9af 	bl	8000404 <__aeabi_i2d>
 80040a6:	4632      	mov	r2, r6
 80040a8:	463b      	mov	r3, r7
 80040aa:	f7fc fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80040ae:	b908      	cbnz	r0, 80040b4 <_dtoa_r+0x144>
 80040b0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80040b4:	f1ba 0f16 	cmp.w	sl, #22
 80040b8:	d85a      	bhi.n	8004170 <_dtoa_r+0x200>
 80040ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040be:	496f      	ldr	r1, [pc, #444]	; (800427c <_dtoa_r+0x30c>)
 80040c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80040c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c8:	f7fc fc96 	bl	80009f8 <__aeabi_dcmpgt>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d051      	beq.n	8004174 <_dtoa_r+0x204>
 80040d0:	2300      	movs	r3, #0
 80040d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80040d6:	930d      	str	r3, [sp, #52]	; 0x34
 80040d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040da:	1b5d      	subs	r5, r3, r5
 80040dc:	1e6b      	subs	r3, r5, #1
 80040de:	9307      	str	r3, [sp, #28]
 80040e0:	bf43      	ittte	mi
 80040e2:	2300      	movmi	r3, #0
 80040e4:	f1c5 0901 	rsbmi	r9, r5, #1
 80040e8:	9307      	strmi	r3, [sp, #28]
 80040ea:	f04f 0900 	movpl.w	r9, #0
 80040ee:	f1ba 0f00 	cmp.w	sl, #0
 80040f2:	db41      	blt.n	8004178 <_dtoa_r+0x208>
 80040f4:	9b07      	ldr	r3, [sp, #28]
 80040f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80040fa:	4453      	add	r3, sl
 80040fc:	9307      	str	r3, [sp, #28]
 80040fe:	2300      	movs	r3, #0
 8004100:	9308      	str	r3, [sp, #32]
 8004102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004104:	2b09      	cmp	r3, #9
 8004106:	f200 808c 	bhi.w	8004222 <_dtoa_r+0x2b2>
 800410a:	2b05      	cmp	r3, #5
 800410c:	bfc4      	itt	gt
 800410e:	3b04      	subgt	r3, #4
 8004110:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004114:	bfc8      	it	gt
 8004116:	2500      	movgt	r5, #0
 8004118:	f1a3 0302 	sub.w	r3, r3, #2
 800411c:	bfd8      	it	le
 800411e:	2501      	movle	r5, #1
 8004120:	2b03      	cmp	r3, #3
 8004122:	f200 808a 	bhi.w	800423a <_dtoa_r+0x2ca>
 8004126:	e8df f003 	tbb	[pc, r3]
 800412a:	7a78      	.short	0x7a78
 800412c:	6c2f      	.short	0x6c2f
 800412e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004132:	441d      	add	r5, r3
 8004134:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004138:	2820      	cmp	r0, #32
 800413a:	dd13      	ble.n	8004164 <_dtoa_r+0x1f4>
 800413c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004140:	9b02      	ldr	r3, [sp, #8]
 8004142:	fa08 f800 	lsl.w	r8, r8, r0
 8004146:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800414a:	fa23 f000 	lsr.w	r0, r3, r0
 800414e:	ea48 0000 	orr.w	r0, r8, r0
 8004152:	f7fc f947 	bl	80003e4 <__aeabi_ui2d>
 8004156:	2301      	movs	r3, #1
 8004158:	4680      	mov	r8, r0
 800415a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800415e:	3d01      	subs	r5, #1
 8004160:	9310      	str	r3, [sp, #64]	; 0x40
 8004162:	e771      	b.n	8004048 <_dtoa_r+0xd8>
 8004164:	9b02      	ldr	r3, [sp, #8]
 8004166:	f1c0 0020 	rsb	r0, r0, #32
 800416a:	fa03 f000 	lsl.w	r0, r3, r0
 800416e:	e7f0      	b.n	8004152 <_dtoa_r+0x1e2>
 8004170:	2301      	movs	r3, #1
 8004172:	e7b0      	b.n	80040d6 <_dtoa_r+0x166>
 8004174:	900d      	str	r0, [sp, #52]	; 0x34
 8004176:	e7af      	b.n	80040d8 <_dtoa_r+0x168>
 8004178:	f1ca 0300 	rsb	r3, sl, #0
 800417c:	9308      	str	r3, [sp, #32]
 800417e:	2300      	movs	r3, #0
 8004180:	eba9 090a 	sub.w	r9, r9, sl
 8004184:	930c      	str	r3, [sp, #48]	; 0x30
 8004186:	e7bc      	b.n	8004102 <_dtoa_r+0x192>
 8004188:	2301      	movs	r3, #1
 800418a:	9309      	str	r3, [sp, #36]	; 0x24
 800418c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800418e:	2b00      	cmp	r3, #0
 8004190:	dd56      	ble.n	8004240 <_dtoa_r+0x2d0>
 8004192:	4698      	mov	r8, r3
 8004194:	9304      	str	r3, [sp, #16]
 8004196:	2200      	movs	r2, #0
 8004198:	6462      	str	r2, [r4, #68]	; 0x44
 800419a:	2204      	movs	r2, #4
 800419c:	f102 0014 	add.w	r0, r2, #20
 80041a0:	4298      	cmp	r0, r3
 80041a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80041a4:	d951      	bls.n	800424a <_dtoa_r+0x2da>
 80041a6:	4620      	mov	r0, r4
 80041a8:	f001 f814 	bl	80051d4 <_Balloc>
 80041ac:	f1b8 0f0e 	cmp.w	r8, #14
 80041b0:	4683      	mov	fp, r0
 80041b2:	6420      	str	r0, [r4, #64]	; 0x40
 80041b4:	f200 80ed 	bhi.w	8004392 <_dtoa_r+0x422>
 80041b8:	2d00      	cmp	r5, #0
 80041ba:	f000 80ea 	beq.w	8004392 <_dtoa_r+0x422>
 80041be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041c2:	f1ba 0f00 	cmp.w	sl, #0
 80041c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80041ca:	dd77      	ble.n	80042bc <_dtoa_r+0x34c>
 80041cc:	4a2b      	ldr	r2, [pc, #172]	; (800427c <_dtoa_r+0x30c>)
 80041ce:	f00a 030f 	and.w	r3, sl, #15
 80041d2:	ea4f 162a 	mov.w	r6, sl, asr #4
 80041d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041da:	06f0      	lsls	r0, r6, #27
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80041e4:	d568      	bpl.n	80042b8 <_dtoa_r+0x348>
 80041e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041ea:	4b25      	ldr	r3, [pc, #148]	; (8004280 <_dtoa_r+0x310>)
 80041ec:	2503      	movs	r5, #3
 80041ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041f2:	f7fc fa9b 	bl	800072c <__aeabi_ddiv>
 80041f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041fa:	f006 060f 	and.w	r6, r6, #15
 80041fe:	4f20      	ldr	r7, [pc, #128]	; (8004280 <_dtoa_r+0x310>)
 8004200:	e04f      	b.n	80042a2 <_dtoa_r+0x332>
 8004202:	2301      	movs	r3, #1
 8004204:	9309      	str	r3, [sp, #36]	; 0x24
 8004206:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004208:	4453      	add	r3, sl
 800420a:	f103 0801 	add.w	r8, r3, #1
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	4643      	mov	r3, r8
 8004212:	2b01      	cmp	r3, #1
 8004214:	bfb8      	it	lt
 8004216:	2301      	movlt	r3, #1
 8004218:	e7bd      	b.n	8004196 <_dtoa_r+0x226>
 800421a:	2300      	movs	r3, #0
 800421c:	e7b5      	b.n	800418a <_dtoa_r+0x21a>
 800421e:	2300      	movs	r3, #0
 8004220:	e7f0      	b.n	8004204 <_dtoa_r+0x294>
 8004222:	2501      	movs	r5, #1
 8004224:	2300      	movs	r3, #0
 8004226:	9509      	str	r5, [sp, #36]	; 0x24
 8004228:	931e      	str	r3, [sp, #120]	; 0x78
 800422a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422e:	2200      	movs	r2, #0
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	4698      	mov	r8, r3
 8004234:	2312      	movs	r3, #18
 8004236:	921f      	str	r2, [sp, #124]	; 0x7c
 8004238:	e7ad      	b.n	8004196 <_dtoa_r+0x226>
 800423a:	2301      	movs	r3, #1
 800423c:	9309      	str	r3, [sp, #36]	; 0x24
 800423e:	e7f4      	b.n	800422a <_dtoa_r+0x2ba>
 8004240:	2301      	movs	r3, #1
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	4698      	mov	r8, r3
 8004246:	461a      	mov	r2, r3
 8004248:	e7f5      	b.n	8004236 <_dtoa_r+0x2c6>
 800424a:	3101      	adds	r1, #1
 800424c:	6461      	str	r1, [r4, #68]	; 0x44
 800424e:	0052      	lsls	r2, r2, #1
 8004250:	e7a4      	b.n	800419c <_dtoa_r+0x22c>
 8004252:	bf00      	nop
 8004254:	f3af 8000 	nop.w
 8004258:	636f4361 	.word	0x636f4361
 800425c:	3fd287a7 	.word	0x3fd287a7
 8004260:	8b60c8b3 	.word	0x8b60c8b3
 8004264:	3fc68a28 	.word	0x3fc68a28
 8004268:	509f79fb 	.word	0x509f79fb
 800426c:	3fd34413 	.word	0x3fd34413
 8004270:	7ff00000 	.word	0x7ff00000
 8004274:	08005ecb 	.word	0x08005ecb
 8004278:	3ff80000 	.word	0x3ff80000
 800427c:	08005f28 	.word	0x08005f28
 8004280:	08005f00 	.word	0x08005f00
 8004284:	08005ef5 	.word	0x08005ef5
 8004288:	07f1      	lsls	r1, r6, #31
 800428a:	d508      	bpl.n	800429e <_dtoa_r+0x32e>
 800428c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004294:	f7fc f920 	bl	80004d8 <__aeabi_dmul>
 8004298:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800429c:	3501      	adds	r5, #1
 800429e:	1076      	asrs	r6, r6, #1
 80042a0:	3708      	adds	r7, #8
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	d1f0      	bne.n	8004288 <_dtoa_r+0x318>
 80042a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ae:	f7fc fa3d 	bl	800072c <__aeabi_ddiv>
 80042b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b6:	e01b      	b.n	80042f0 <_dtoa_r+0x380>
 80042b8:	2502      	movs	r5, #2
 80042ba:	e7a0      	b.n	80041fe <_dtoa_r+0x28e>
 80042bc:	f000 80a4 	beq.w	8004408 <_dtoa_r+0x498>
 80042c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042c4:	f1ca 0600 	rsb	r6, sl, #0
 80042c8:	4ba0      	ldr	r3, [pc, #640]	; (800454c <_dtoa_r+0x5dc>)
 80042ca:	f006 020f 	and.w	r2, r6, #15
 80042ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc f8ff 	bl	80004d8 <__aeabi_dmul>
 80042da:	2502      	movs	r5, #2
 80042dc:	2300      	movs	r3, #0
 80042de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042e2:	4f9b      	ldr	r7, [pc, #620]	; (8004550 <_dtoa_r+0x5e0>)
 80042e4:	1136      	asrs	r6, r6, #4
 80042e6:	2e00      	cmp	r6, #0
 80042e8:	f040 8083 	bne.w	80043f2 <_dtoa_r+0x482>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e0      	bne.n	80042b2 <_dtoa_r+0x342>
 80042f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 808a 	beq.w	800440c <_dtoa_r+0x49c>
 80042f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004304:	2200      	movs	r2, #0
 8004306:	4b93      	ldr	r3, [pc, #588]	; (8004554 <_dtoa_r+0x5e4>)
 8004308:	f7fc fb58 	bl	80009bc <__aeabi_dcmplt>
 800430c:	2800      	cmp	r0, #0
 800430e:	d07d      	beq.n	800440c <_dtoa_r+0x49c>
 8004310:	f1b8 0f00 	cmp.w	r8, #0
 8004314:	d07a      	beq.n	800440c <_dtoa_r+0x49c>
 8004316:	9b04      	ldr	r3, [sp, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	dd36      	ble.n	800438a <_dtoa_r+0x41a>
 800431c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004320:	2200      	movs	r2, #0
 8004322:	4b8d      	ldr	r3, [pc, #564]	; (8004558 <_dtoa_r+0x5e8>)
 8004324:	f7fc f8d8 	bl	80004d8 <__aeabi_dmul>
 8004328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800432c:	9e04      	ldr	r6, [sp, #16]
 800432e:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004332:	3501      	adds	r5, #1
 8004334:	4628      	mov	r0, r5
 8004336:	f7fc f865 	bl	8000404 <__aeabi_i2d>
 800433a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800433e:	f7fc f8cb 	bl	80004d8 <__aeabi_dmul>
 8004342:	2200      	movs	r2, #0
 8004344:	4b85      	ldr	r3, [pc, #532]	; (800455c <_dtoa_r+0x5ec>)
 8004346:	f7fb ff11 	bl	800016c <__adddf3>
 800434a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800434e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004352:	950b      	str	r5, [sp, #44]	; 0x2c
 8004354:	2e00      	cmp	r6, #0
 8004356:	d15c      	bne.n	8004412 <_dtoa_r+0x4a2>
 8004358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	4b80      	ldr	r3, [pc, #512]	; (8004560 <_dtoa_r+0x5f0>)
 8004360:	f7fb ff02 	bl	8000168 <__aeabi_dsub>
 8004364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004366:	462b      	mov	r3, r5
 8004368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800436c:	f7fc fb44 	bl	80009f8 <__aeabi_dcmpgt>
 8004370:	2800      	cmp	r0, #0
 8004372:	f040 8282 	bne.w	800487a <_dtoa_r+0x90a>
 8004376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800437a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800437c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004380:	f7fc fb1c 	bl	80009bc <__aeabi_dcmplt>
 8004384:	2800      	cmp	r0, #0
 8004386:	f040 8276 	bne.w	8004876 <_dtoa_r+0x906>
 800438a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800438e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004392:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004394:	2b00      	cmp	r3, #0
 8004396:	f2c0 814c 	blt.w	8004632 <_dtoa_r+0x6c2>
 800439a:	f1ba 0f0e 	cmp.w	sl, #14
 800439e:	f300 8148 	bgt.w	8004632 <_dtoa_r+0x6c2>
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <_dtoa_r+0x5dc>)
 80043a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f280 80d8 	bge.w	8004568 <_dtoa_r+0x5f8>
 80043b8:	f1b8 0f00 	cmp.w	r8, #0
 80043bc:	f300 80d4 	bgt.w	8004568 <_dtoa_r+0x5f8>
 80043c0:	f040 8258 	bne.w	8004874 <_dtoa_r+0x904>
 80043c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043c8:	2200      	movs	r2, #0
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <_dtoa_r+0x5f0>)
 80043cc:	f7fc f884 	bl	80004d8 <__aeabi_dmul>
 80043d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043d4:	f7fc fb06 	bl	80009e4 <__aeabi_dcmpge>
 80043d8:	4646      	mov	r6, r8
 80043da:	4647      	mov	r7, r8
 80043dc:	2800      	cmp	r0, #0
 80043de:	f040 822e 	bne.w	800483e <_dtoa_r+0x8ce>
 80043e2:	2331      	movs	r3, #49	; 0x31
 80043e4:	f10b 0501 	add.w	r5, fp, #1
 80043e8:	f88b 3000 	strb.w	r3, [fp]
 80043ec:	f10a 0a01 	add.w	sl, sl, #1
 80043f0:	e229      	b.n	8004846 <_dtoa_r+0x8d6>
 80043f2:	07f2      	lsls	r2, r6, #31
 80043f4:	d505      	bpl.n	8004402 <_dtoa_r+0x492>
 80043f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043fa:	f7fc f86d 	bl	80004d8 <__aeabi_dmul>
 80043fe:	2301      	movs	r3, #1
 8004400:	3501      	adds	r5, #1
 8004402:	1076      	asrs	r6, r6, #1
 8004404:	3708      	adds	r7, #8
 8004406:	e76e      	b.n	80042e6 <_dtoa_r+0x376>
 8004408:	2502      	movs	r5, #2
 800440a:	e771      	b.n	80042f0 <_dtoa_r+0x380>
 800440c:	4657      	mov	r7, sl
 800440e:	4646      	mov	r6, r8
 8004410:	e790      	b.n	8004334 <_dtoa_r+0x3c4>
 8004412:	4b4e      	ldr	r3, [pc, #312]	; (800454c <_dtoa_r+0x5dc>)
 8004414:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004418:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800441c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441e:	2b00      	cmp	r3, #0
 8004420:	d048      	beq.n	80044b4 <_dtoa_r+0x544>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	2000      	movs	r0, #0
 8004428:	494e      	ldr	r1, [pc, #312]	; (8004564 <_dtoa_r+0x5f4>)
 800442a:	f7fc f97f 	bl	800072c <__aeabi_ddiv>
 800442e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004432:	f7fb fe99 	bl	8000168 <__aeabi_dsub>
 8004436:	465d      	mov	r5, fp
 8004438:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800443c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004440:	f7fc fafa 	bl	8000a38 <__aeabi_d2iz>
 8004444:	9011      	str	r0, [sp, #68]	; 0x44
 8004446:	f7fb ffdd 	bl	8000404 <__aeabi_i2d>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004452:	f7fb fe89 	bl	8000168 <__aeabi_dsub>
 8004456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800445c:	3330      	adds	r3, #48	; 0x30
 800445e:	f805 3b01 	strb.w	r3, [r5], #1
 8004462:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004466:	f7fc faa9 	bl	80009bc <__aeabi_dcmplt>
 800446a:	2800      	cmp	r0, #0
 800446c:	d163      	bne.n	8004536 <_dtoa_r+0x5c6>
 800446e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004472:	2000      	movs	r0, #0
 8004474:	4937      	ldr	r1, [pc, #220]	; (8004554 <_dtoa_r+0x5e4>)
 8004476:	f7fb fe77 	bl	8000168 <__aeabi_dsub>
 800447a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800447e:	f7fc fa9d 	bl	80009bc <__aeabi_dcmplt>
 8004482:	2800      	cmp	r0, #0
 8004484:	f040 80b6 	bne.w	80045f4 <_dtoa_r+0x684>
 8004488:	eba5 030b 	sub.w	r3, r5, fp
 800448c:	429e      	cmp	r6, r3
 800448e:	f77f af7c 	ble.w	800438a <_dtoa_r+0x41a>
 8004492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004496:	2200      	movs	r2, #0
 8004498:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <_dtoa_r+0x5e8>)
 800449a:	f7fc f81d 	bl	80004d8 <__aeabi_dmul>
 800449e:	2200      	movs	r2, #0
 80044a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <_dtoa_r+0x5e8>)
 80044aa:	f7fc f815 	bl	80004d8 <__aeabi_dmul>
 80044ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044b2:	e7c3      	b.n	800443c <_dtoa_r+0x4cc>
 80044b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044b8:	f7fc f80e 	bl	80004d8 <__aeabi_dmul>
 80044bc:	eb0b 0506 	add.w	r5, fp, r6
 80044c0:	465e      	mov	r6, fp
 80044c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ca:	f7fc fab5 	bl	8000a38 <__aeabi_d2iz>
 80044ce:	9011      	str	r0, [sp, #68]	; 0x44
 80044d0:	f7fb ff98 	bl	8000404 <__aeabi_i2d>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044dc:	f7fb fe44 	bl	8000168 <__aeabi_dsub>
 80044e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044e6:	3330      	adds	r3, #48	; 0x30
 80044e8:	f806 3b01 	strb.w	r3, [r6], #1
 80044ec:	42ae      	cmp	r6, r5
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	d124      	bne.n	800453e <_dtoa_r+0x5ce>
 80044f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <_dtoa_r+0x5f4>)
 80044fa:	f7fb fe37 	bl	800016c <__adddf3>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004506:	f7fc fa77 	bl	80009f8 <__aeabi_dcmpgt>
 800450a:	2800      	cmp	r0, #0
 800450c:	d172      	bne.n	80045f4 <_dtoa_r+0x684>
 800450e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004512:	2000      	movs	r0, #0
 8004514:	4913      	ldr	r1, [pc, #76]	; (8004564 <_dtoa_r+0x5f4>)
 8004516:	f7fb fe27 	bl	8000168 <__aeabi_dsub>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004522:	f7fc fa4b 	bl	80009bc <__aeabi_dcmplt>
 8004526:	2800      	cmp	r0, #0
 8004528:	f43f af2f 	beq.w	800438a <_dtoa_r+0x41a>
 800452c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004530:	1e6a      	subs	r2, r5, #1
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d001      	beq.n	800453a <_dtoa_r+0x5ca>
 8004536:	46ba      	mov	sl, r7
 8004538:	e04b      	b.n	80045d2 <_dtoa_r+0x662>
 800453a:	4615      	mov	r5, r2
 800453c:	e7f6      	b.n	800452c <_dtoa_r+0x5bc>
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <_dtoa_r+0x5e8>)
 8004540:	f7fb ffca 	bl	80004d8 <__aeabi_dmul>
 8004544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004548:	e7bd      	b.n	80044c6 <_dtoa_r+0x556>
 800454a:	bf00      	nop
 800454c:	08005f28 	.word	0x08005f28
 8004550:	08005f00 	.word	0x08005f00
 8004554:	3ff00000 	.word	0x3ff00000
 8004558:	40240000 	.word	0x40240000
 800455c:	401c0000 	.word	0x401c0000
 8004560:	40140000 	.word	0x40140000
 8004564:	3fe00000 	.word	0x3fe00000
 8004568:	465d      	mov	r5, fp
 800456a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800456e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004572:	4630      	mov	r0, r6
 8004574:	4639      	mov	r1, r7
 8004576:	f7fc f8d9 	bl	800072c <__aeabi_ddiv>
 800457a:	f7fc fa5d 	bl	8000a38 <__aeabi_d2iz>
 800457e:	4681      	mov	r9, r0
 8004580:	f7fb ff40 	bl	8000404 <__aeabi_i2d>
 8004584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004588:	f7fb ffa6 	bl	80004d8 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4630      	mov	r0, r6
 8004592:	4639      	mov	r1, r7
 8004594:	f7fb fde8 	bl	8000168 <__aeabi_dsub>
 8004598:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800459c:	f805 6b01 	strb.w	r6, [r5], #1
 80045a0:	eba5 060b 	sub.w	r6, r5, fp
 80045a4:	45b0      	cmp	r8, r6
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	d135      	bne.n	8004618 <_dtoa_r+0x6a8>
 80045ac:	f7fb fdde 	bl	800016c <__adddf3>
 80045b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045b4:	4606      	mov	r6, r0
 80045b6:	460f      	mov	r7, r1
 80045b8:	f7fc fa1e 	bl	80009f8 <__aeabi_dcmpgt>
 80045bc:	b9c8      	cbnz	r0, 80045f2 <_dtoa_r+0x682>
 80045be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045c2:	4630      	mov	r0, r6
 80045c4:	4639      	mov	r1, r7
 80045c6:	f7fc f9ef 	bl	80009a8 <__aeabi_dcmpeq>
 80045ca:	b110      	cbz	r0, 80045d2 <_dtoa_r+0x662>
 80045cc:	f019 0f01 	tst.w	r9, #1
 80045d0:	d10f      	bne.n	80045f2 <_dtoa_r+0x682>
 80045d2:	9906      	ldr	r1, [sp, #24]
 80045d4:	4620      	mov	r0, r4
 80045d6:	f000 fe22 	bl	800521e <_Bfree>
 80045da:	2300      	movs	r3, #0
 80045dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045de:	702b      	strb	r3, [r5, #0]
 80045e0:	f10a 0301 	add.w	r3, sl, #1
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f43f acf9 	beq.w	8003fe0 <_dtoa_r+0x70>
 80045ee:	601d      	str	r5, [r3, #0]
 80045f0:	e4f6      	b.n	8003fe0 <_dtoa_r+0x70>
 80045f2:	4657      	mov	r7, sl
 80045f4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80045f8:	1e6b      	subs	r3, r5, #1
 80045fa:	2a39      	cmp	r2, #57	; 0x39
 80045fc:	d106      	bne.n	800460c <_dtoa_r+0x69c>
 80045fe:	459b      	cmp	fp, r3
 8004600:	d108      	bne.n	8004614 <_dtoa_r+0x6a4>
 8004602:	2330      	movs	r3, #48	; 0x30
 8004604:	f88b 3000 	strb.w	r3, [fp]
 8004608:	465b      	mov	r3, fp
 800460a:	3701      	adds	r7, #1
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	3201      	adds	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	e790      	b.n	8004536 <_dtoa_r+0x5c6>
 8004614:	461d      	mov	r5, r3
 8004616:	e7ed      	b.n	80045f4 <_dtoa_r+0x684>
 8004618:	2200      	movs	r2, #0
 800461a:	4b99      	ldr	r3, [pc, #612]	; (8004880 <_dtoa_r+0x910>)
 800461c:	f7fb ff5c 	bl	80004d8 <__aeabi_dmul>
 8004620:	2200      	movs	r2, #0
 8004622:	2300      	movs	r3, #0
 8004624:	4606      	mov	r6, r0
 8004626:	460f      	mov	r7, r1
 8004628:	f7fc f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800462c:	2800      	cmp	r0, #0
 800462e:	d09e      	beq.n	800456e <_dtoa_r+0x5fe>
 8004630:	e7cf      	b.n	80045d2 <_dtoa_r+0x662>
 8004632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004634:	2a00      	cmp	r2, #0
 8004636:	f000 8088 	beq.w	800474a <_dtoa_r+0x7da>
 800463a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800463c:	2a01      	cmp	r2, #1
 800463e:	dc6d      	bgt.n	800471c <_dtoa_r+0x7ac>
 8004640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004642:	2a00      	cmp	r2, #0
 8004644:	d066      	beq.n	8004714 <_dtoa_r+0x7a4>
 8004646:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800464a:	464d      	mov	r5, r9
 800464c:	9e08      	ldr	r6, [sp, #32]
 800464e:	9a07      	ldr	r2, [sp, #28]
 8004650:	2101      	movs	r1, #1
 8004652:	441a      	add	r2, r3
 8004654:	4620      	mov	r0, r4
 8004656:	4499      	add	r9, r3
 8004658:	9207      	str	r2, [sp, #28]
 800465a:	f000 fe72 	bl	8005342 <__i2b>
 800465e:	4607      	mov	r7, r0
 8004660:	2d00      	cmp	r5, #0
 8004662:	dd0b      	ble.n	800467c <_dtoa_r+0x70c>
 8004664:	9b07      	ldr	r3, [sp, #28]
 8004666:	2b00      	cmp	r3, #0
 8004668:	dd08      	ble.n	800467c <_dtoa_r+0x70c>
 800466a:	42ab      	cmp	r3, r5
 800466c:	bfa8      	it	ge
 800466e:	462b      	movge	r3, r5
 8004670:	9a07      	ldr	r2, [sp, #28]
 8004672:	eba9 0903 	sub.w	r9, r9, r3
 8004676:	1aed      	subs	r5, r5, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	9307      	str	r3, [sp, #28]
 800467c:	9b08      	ldr	r3, [sp, #32]
 800467e:	b1eb      	cbz	r3, 80046bc <_dtoa_r+0x74c>
 8004680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004682:	2b00      	cmp	r3, #0
 8004684:	d065      	beq.n	8004752 <_dtoa_r+0x7e2>
 8004686:	b18e      	cbz	r6, 80046ac <_dtoa_r+0x73c>
 8004688:	4639      	mov	r1, r7
 800468a:	4632      	mov	r2, r6
 800468c:	4620      	mov	r0, r4
 800468e:	f000 fef7 	bl	8005480 <__pow5mult>
 8004692:	9a06      	ldr	r2, [sp, #24]
 8004694:	4601      	mov	r1, r0
 8004696:	4607      	mov	r7, r0
 8004698:	4620      	mov	r0, r4
 800469a:	f000 fe5b 	bl	8005354 <__multiply>
 800469e:	9906      	ldr	r1, [sp, #24]
 80046a0:	900a      	str	r0, [sp, #40]	; 0x28
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 fdbb 	bl	800521e <_Bfree>
 80046a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046aa:	9306      	str	r3, [sp, #24]
 80046ac:	9b08      	ldr	r3, [sp, #32]
 80046ae:	1b9a      	subs	r2, r3, r6
 80046b0:	d004      	beq.n	80046bc <_dtoa_r+0x74c>
 80046b2:	9906      	ldr	r1, [sp, #24]
 80046b4:	4620      	mov	r0, r4
 80046b6:	f000 fee3 	bl	8005480 <__pow5mult>
 80046ba:	9006      	str	r0, [sp, #24]
 80046bc:	2101      	movs	r1, #1
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 fe3f 	bl	8005342 <__i2b>
 80046c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046c6:	4606      	mov	r6, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 81ca 	beq.w	8004a62 <_dtoa_r+0xaf2>
 80046ce:	461a      	mov	r2, r3
 80046d0:	4601      	mov	r1, r0
 80046d2:	4620      	mov	r0, r4
 80046d4:	f000 fed4 	bl	8005480 <__pow5mult>
 80046d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046da:	4606      	mov	r6, r0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	dc3e      	bgt.n	800475e <_dtoa_r+0x7ee>
 80046e0:	9b02      	ldr	r3, [sp, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d137      	bne.n	8004756 <_dtoa_r+0x7e6>
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d134      	bne.n	800475a <_dtoa_r+0x7ea>
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046f6:	0d1b      	lsrs	r3, r3, #20
 80046f8:	051b      	lsls	r3, r3, #20
 80046fa:	b12b      	cbz	r3, 8004708 <_dtoa_r+0x798>
 80046fc:	9b07      	ldr	r3, [sp, #28]
 80046fe:	f109 0901 	add.w	r9, r9, #1
 8004702:	3301      	adds	r3, #1
 8004704:	9307      	str	r3, [sp, #28]
 8004706:	2301      	movs	r3, #1
 8004708:	9308      	str	r3, [sp, #32]
 800470a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800470c:	2b00      	cmp	r3, #0
 800470e:	d128      	bne.n	8004762 <_dtoa_r+0x7f2>
 8004710:	2001      	movs	r0, #1
 8004712:	e02e      	b.n	8004772 <_dtoa_r+0x802>
 8004714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800471a:	e796      	b.n	800464a <_dtoa_r+0x6da>
 800471c:	9b08      	ldr	r3, [sp, #32]
 800471e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8004722:	42b3      	cmp	r3, r6
 8004724:	bfb7      	itett	lt
 8004726:	9b08      	ldrlt	r3, [sp, #32]
 8004728:	1b9e      	subge	r6, r3, r6
 800472a:	1af2      	sublt	r2, r6, r3
 800472c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800472e:	bfbf      	itttt	lt
 8004730:	9608      	strlt	r6, [sp, #32]
 8004732:	189b      	addlt	r3, r3, r2
 8004734:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004736:	2600      	movlt	r6, #0
 8004738:	f1b8 0f00 	cmp.w	r8, #0
 800473c:	bfb9      	ittee	lt
 800473e:	eba9 0508 	sublt.w	r5, r9, r8
 8004742:	2300      	movlt	r3, #0
 8004744:	464d      	movge	r5, r9
 8004746:	4643      	movge	r3, r8
 8004748:	e781      	b.n	800464e <_dtoa_r+0x6de>
 800474a:	9e08      	ldr	r6, [sp, #32]
 800474c:	464d      	mov	r5, r9
 800474e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004750:	e786      	b.n	8004660 <_dtoa_r+0x6f0>
 8004752:	9a08      	ldr	r2, [sp, #32]
 8004754:	e7ad      	b.n	80046b2 <_dtoa_r+0x742>
 8004756:	2300      	movs	r3, #0
 8004758:	e7d6      	b.n	8004708 <_dtoa_r+0x798>
 800475a:	9b02      	ldr	r3, [sp, #8]
 800475c:	e7d4      	b.n	8004708 <_dtoa_r+0x798>
 800475e:	2300      	movs	r3, #0
 8004760:	9308      	str	r3, [sp, #32]
 8004762:	6933      	ldr	r3, [r6, #16]
 8004764:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004768:	6918      	ldr	r0, [r3, #16]
 800476a:	f000 fd9c 	bl	80052a6 <__hi0bits>
 800476e:	f1c0 0020 	rsb	r0, r0, #32
 8004772:	9b07      	ldr	r3, [sp, #28]
 8004774:	4418      	add	r0, r3
 8004776:	f010 001f 	ands.w	r0, r0, #31
 800477a:	d047      	beq.n	800480c <_dtoa_r+0x89c>
 800477c:	f1c0 0320 	rsb	r3, r0, #32
 8004780:	2b04      	cmp	r3, #4
 8004782:	dd3b      	ble.n	80047fc <_dtoa_r+0x88c>
 8004784:	9b07      	ldr	r3, [sp, #28]
 8004786:	f1c0 001c 	rsb	r0, r0, #28
 800478a:	4481      	add	r9, r0
 800478c:	4405      	add	r5, r0
 800478e:	4403      	add	r3, r0
 8004790:	9307      	str	r3, [sp, #28]
 8004792:	f1b9 0f00 	cmp.w	r9, #0
 8004796:	dd05      	ble.n	80047a4 <_dtoa_r+0x834>
 8004798:	464a      	mov	r2, r9
 800479a:	9906      	ldr	r1, [sp, #24]
 800479c:	4620      	mov	r0, r4
 800479e:	f000 feaf 	bl	8005500 <__lshift>
 80047a2:	9006      	str	r0, [sp, #24]
 80047a4:	9b07      	ldr	r3, [sp, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	dd05      	ble.n	80047b6 <_dtoa_r+0x846>
 80047aa:	4631      	mov	r1, r6
 80047ac:	461a      	mov	r2, r3
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 fea6 	bl	8005500 <__lshift>
 80047b4:	4606      	mov	r6, r0
 80047b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047b8:	b353      	cbz	r3, 8004810 <_dtoa_r+0x8a0>
 80047ba:	4631      	mov	r1, r6
 80047bc:	9806      	ldr	r0, [sp, #24]
 80047be:	f000 fef3 	bl	80055a8 <__mcmp>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	da24      	bge.n	8004810 <_dtoa_r+0x8a0>
 80047c6:	2300      	movs	r3, #0
 80047c8:	220a      	movs	r2, #10
 80047ca:	9906      	ldr	r1, [sp, #24]
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 fd2f 	bl	8005230 <__multadd>
 80047d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80047d8:	9006      	str	r0, [sp, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8148 	beq.w	8004a70 <_dtoa_r+0xb00>
 80047e0:	2300      	movs	r3, #0
 80047e2:	4639      	mov	r1, r7
 80047e4:	220a      	movs	r2, #10
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 fd22 	bl	8005230 <__multadd>
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	4607      	mov	r7, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	dc4d      	bgt.n	8004890 <_dtoa_r+0x920>
 80047f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	dd4a      	ble.n	8004890 <_dtoa_r+0x920>
 80047fa:	e011      	b.n	8004820 <_dtoa_r+0x8b0>
 80047fc:	d0c9      	beq.n	8004792 <_dtoa_r+0x822>
 80047fe:	9a07      	ldr	r2, [sp, #28]
 8004800:	331c      	adds	r3, #28
 8004802:	441a      	add	r2, r3
 8004804:	4499      	add	r9, r3
 8004806:	441d      	add	r5, r3
 8004808:	4613      	mov	r3, r2
 800480a:	e7c1      	b.n	8004790 <_dtoa_r+0x820>
 800480c:	4603      	mov	r3, r0
 800480e:	e7f6      	b.n	80047fe <_dtoa_r+0x88e>
 8004810:	f1b8 0f00 	cmp.w	r8, #0
 8004814:	dc36      	bgt.n	8004884 <_dtoa_r+0x914>
 8004816:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004818:	2b02      	cmp	r3, #2
 800481a:	dd33      	ble.n	8004884 <_dtoa_r+0x914>
 800481c:	f8cd 8010 	str.w	r8, [sp, #16]
 8004820:	9b04      	ldr	r3, [sp, #16]
 8004822:	b963      	cbnz	r3, 800483e <_dtoa_r+0x8ce>
 8004824:	4631      	mov	r1, r6
 8004826:	2205      	movs	r2, #5
 8004828:	4620      	mov	r0, r4
 800482a:	f000 fd01 	bl	8005230 <__multadd>
 800482e:	4601      	mov	r1, r0
 8004830:	4606      	mov	r6, r0
 8004832:	9806      	ldr	r0, [sp, #24]
 8004834:	f000 feb8 	bl	80055a8 <__mcmp>
 8004838:	2800      	cmp	r0, #0
 800483a:	f73f add2 	bgt.w	80043e2 <_dtoa_r+0x472>
 800483e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004840:	465d      	mov	r5, fp
 8004842:	ea6f 0a03 	mvn.w	sl, r3
 8004846:	f04f 0900 	mov.w	r9, #0
 800484a:	4631      	mov	r1, r6
 800484c:	4620      	mov	r0, r4
 800484e:	f000 fce6 	bl	800521e <_Bfree>
 8004852:	2f00      	cmp	r7, #0
 8004854:	f43f aebd 	beq.w	80045d2 <_dtoa_r+0x662>
 8004858:	f1b9 0f00 	cmp.w	r9, #0
 800485c:	d005      	beq.n	800486a <_dtoa_r+0x8fa>
 800485e:	45b9      	cmp	r9, r7
 8004860:	d003      	beq.n	800486a <_dtoa_r+0x8fa>
 8004862:	4649      	mov	r1, r9
 8004864:	4620      	mov	r0, r4
 8004866:	f000 fcda 	bl	800521e <_Bfree>
 800486a:	4639      	mov	r1, r7
 800486c:	4620      	mov	r0, r4
 800486e:	f000 fcd6 	bl	800521e <_Bfree>
 8004872:	e6ae      	b.n	80045d2 <_dtoa_r+0x662>
 8004874:	2600      	movs	r6, #0
 8004876:	4637      	mov	r7, r6
 8004878:	e7e1      	b.n	800483e <_dtoa_r+0x8ce>
 800487a:	46ba      	mov	sl, r7
 800487c:	4637      	mov	r7, r6
 800487e:	e5b0      	b.n	80043e2 <_dtoa_r+0x472>
 8004880:	40240000 	.word	0x40240000
 8004884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004886:	f8cd 8010 	str.w	r8, [sp, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80f7 	beq.w	8004a7e <_dtoa_r+0xb0e>
 8004890:	2d00      	cmp	r5, #0
 8004892:	dd05      	ble.n	80048a0 <_dtoa_r+0x930>
 8004894:	4639      	mov	r1, r7
 8004896:	462a      	mov	r2, r5
 8004898:	4620      	mov	r0, r4
 800489a:	f000 fe31 	bl	8005500 <__lshift>
 800489e:	4607      	mov	r7, r0
 80048a0:	9b08      	ldr	r3, [sp, #32]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d04c      	beq.n	8004940 <_dtoa_r+0x9d0>
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 fc93 	bl	80051d4 <_Balloc>
 80048ae:	4605      	mov	r5, r0
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	f107 010c 	add.w	r1, r7, #12
 80048b6:	3202      	adds	r2, #2
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	300c      	adds	r0, #12
 80048bc:	f000 fc72 	bl	80051a4 <memcpy>
 80048c0:	2201      	movs	r2, #1
 80048c2:	4629      	mov	r1, r5
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 fe1b 	bl	8005500 <__lshift>
 80048ca:	46b9      	mov	r9, r7
 80048cc:	4607      	mov	r7, r0
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	f8cd b01c 	str.w	fp, [sp, #28]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	9308      	str	r3, [sp, #32]
 80048da:	4631      	mov	r1, r6
 80048dc:	9806      	ldr	r0, [sp, #24]
 80048de:	f7ff fab7 	bl	8003e50 <quorem>
 80048e2:	4649      	mov	r1, r9
 80048e4:	4605      	mov	r5, r0
 80048e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80048ea:	9806      	ldr	r0, [sp, #24]
 80048ec:	f000 fe5c 	bl	80055a8 <__mcmp>
 80048f0:	463a      	mov	r2, r7
 80048f2:	9002      	str	r0, [sp, #8]
 80048f4:	4631      	mov	r1, r6
 80048f6:	4620      	mov	r0, r4
 80048f8:	f000 fe70 	bl	80055dc <__mdiff>
 80048fc:	68c3      	ldr	r3, [r0, #12]
 80048fe:	4602      	mov	r2, r0
 8004900:	bb03      	cbnz	r3, 8004944 <_dtoa_r+0x9d4>
 8004902:	4601      	mov	r1, r0
 8004904:	9009      	str	r0, [sp, #36]	; 0x24
 8004906:	9806      	ldr	r0, [sp, #24]
 8004908:	f000 fe4e 	bl	80055a8 <__mcmp>
 800490c:	4603      	mov	r3, r0
 800490e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004910:	4611      	mov	r1, r2
 8004912:	4620      	mov	r0, r4
 8004914:	9309      	str	r3, [sp, #36]	; 0x24
 8004916:	f000 fc82 	bl	800521e <_Bfree>
 800491a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491c:	b9a3      	cbnz	r3, 8004948 <_dtoa_r+0x9d8>
 800491e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004920:	b992      	cbnz	r2, 8004948 <_dtoa_r+0x9d8>
 8004922:	9a08      	ldr	r2, [sp, #32]
 8004924:	b982      	cbnz	r2, 8004948 <_dtoa_r+0x9d8>
 8004926:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800492a:	d029      	beq.n	8004980 <_dtoa_r+0xa10>
 800492c:	9b02      	ldr	r3, [sp, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	dd01      	ble.n	8004936 <_dtoa_r+0x9c6>
 8004932:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004936:	9b07      	ldr	r3, [sp, #28]
 8004938:	1c5d      	adds	r5, r3, #1
 800493a:	f883 8000 	strb.w	r8, [r3]
 800493e:	e784      	b.n	800484a <_dtoa_r+0x8da>
 8004940:	4638      	mov	r0, r7
 8004942:	e7c2      	b.n	80048ca <_dtoa_r+0x95a>
 8004944:	2301      	movs	r3, #1
 8004946:	e7e3      	b.n	8004910 <_dtoa_r+0x9a0>
 8004948:	9a02      	ldr	r2, [sp, #8]
 800494a:	2a00      	cmp	r2, #0
 800494c:	db04      	blt.n	8004958 <_dtoa_r+0x9e8>
 800494e:	d124      	bne.n	800499a <_dtoa_r+0xa2a>
 8004950:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004952:	bb12      	cbnz	r2, 800499a <_dtoa_r+0xa2a>
 8004954:	9a08      	ldr	r2, [sp, #32]
 8004956:	bb02      	cbnz	r2, 800499a <_dtoa_r+0xa2a>
 8004958:	2b00      	cmp	r3, #0
 800495a:	ddec      	ble.n	8004936 <_dtoa_r+0x9c6>
 800495c:	2201      	movs	r2, #1
 800495e:	9906      	ldr	r1, [sp, #24]
 8004960:	4620      	mov	r0, r4
 8004962:	f000 fdcd 	bl	8005500 <__lshift>
 8004966:	4631      	mov	r1, r6
 8004968:	9006      	str	r0, [sp, #24]
 800496a:	f000 fe1d 	bl	80055a8 <__mcmp>
 800496e:	2800      	cmp	r0, #0
 8004970:	dc03      	bgt.n	800497a <_dtoa_r+0xa0a>
 8004972:	d1e0      	bne.n	8004936 <_dtoa_r+0x9c6>
 8004974:	f018 0f01 	tst.w	r8, #1
 8004978:	d0dd      	beq.n	8004936 <_dtoa_r+0x9c6>
 800497a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800497e:	d1d8      	bne.n	8004932 <_dtoa_r+0x9c2>
 8004980:	9b07      	ldr	r3, [sp, #28]
 8004982:	9a07      	ldr	r2, [sp, #28]
 8004984:	1c5d      	adds	r5, r3, #1
 8004986:	2339      	movs	r3, #57	; 0x39
 8004988:	7013      	strb	r3, [r2, #0]
 800498a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800498e:	1e6a      	subs	r2, r5, #1
 8004990:	2b39      	cmp	r3, #57	; 0x39
 8004992:	d04e      	beq.n	8004a32 <_dtoa_r+0xac2>
 8004994:	3301      	adds	r3, #1
 8004996:	7013      	strb	r3, [r2, #0]
 8004998:	e757      	b.n	800484a <_dtoa_r+0x8da>
 800499a:	9a07      	ldr	r2, [sp, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f102 0501 	add.w	r5, r2, #1
 80049a2:	dd06      	ble.n	80049b2 <_dtoa_r+0xa42>
 80049a4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80049a8:	d0ea      	beq.n	8004980 <_dtoa_r+0xa10>
 80049aa:	f108 0801 	add.w	r8, r8, #1
 80049ae:	9b07      	ldr	r3, [sp, #28]
 80049b0:	e7c3      	b.n	800493a <_dtoa_r+0x9ca>
 80049b2:	9a04      	ldr	r2, [sp, #16]
 80049b4:	eba5 030b 	sub.w	r3, r5, fp
 80049b8:	4293      	cmp	r3, r2
 80049ba:	f805 8c01 	strb.w	r8, [r5, #-1]
 80049be:	d021      	beq.n	8004a04 <_dtoa_r+0xa94>
 80049c0:	2300      	movs	r3, #0
 80049c2:	220a      	movs	r2, #10
 80049c4:	9906      	ldr	r1, [sp, #24]
 80049c6:	4620      	mov	r0, r4
 80049c8:	f000 fc32 	bl	8005230 <__multadd>
 80049cc:	45b9      	cmp	r9, r7
 80049ce:	9006      	str	r0, [sp, #24]
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f04f 020a 	mov.w	r2, #10
 80049d8:	4649      	mov	r1, r9
 80049da:	4620      	mov	r0, r4
 80049dc:	d105      	bne.n	80049ea <_dtoa_r+0xa7a>
 80049de:	f000 fc27 	bl	8005230 <__multadd>
 80049e2:	4681      	mov	r9, r0
 80049e4:	4607      	mov	r7, r0
 80049e6:	9507      	str	r5, [sp, #28]
 80049e8:	e777      	b.n	80048da <_dtoa_r+0x96a>
 80049ea:	f000 fc21 	bl	8005230 <__multadd>
 80049ee:	4639      	mov	r1, r7
 80049f0:	4681      	mov	r9, r0
 80049f2:	2300      	movs	r3, #0
 80049f4:	220a      	movs	r2, #10
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 fc1a 	bl	8005230 <__multadd>
 80049fc:	4607      	mov	r7, r0
 80049fe:	e7f2      	b.n	80049e6 <_dtoa_r+0xa76>
 8004a00:	f04f 0900 	mov.w	r9, #0
 8004a04:	2201      	movs	r2, #1
 8004a06:	9906      	ldr	r1, [sp, #24]
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fd79 	bl	8005500 <__lshift>
 8004a0e:	4631      	mov	r1, r6
 8004a10:	9006      	str	r0, [sp, #24]
 8004a12:	f000 fdc9 	bl	80055a8 <__mcmp>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	dcb7      	bgt.n	800498a <_dtoa_r+0xa1a>
 8004a1a:	d102      	bne.n	8004a22 <_dtoa_r+0xab2>
 8004a1c:	f018 0f01 	tst.w	r8, #1
 8004a20:	d1b3      	bne.n	800498a <_dtoa_r+0xa1a>
 8004a22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a26:	1e6a      	subs	r2, r5, #1
 8004a28:	2b30      	cmp	r3, #48	; 0x30
 8004a2a:	f47f af0e 	bne.w	800484a <_dtoa_r+0x8da>
 8004a2e:	4615      	mov	r5, r2
 8004a30:	e7f7      	b.n	8004a22 <_dtoa_r+0xab2>
 8004a32:	4593      	cmp	fp, r2
 8004a34:	d105      	bne.n	8004a42 <_dtoa_r+0xad2>
 8004a36:	2331      	movs	r3, #49	; 0x31
 8004a38:	f10a 0a01 	add.w	sl, sl, #1
 8004a3c:	f88b 3000 	strb.w	r3, [fp]
 8004a40:	e703      	b.n	800484a <_dtoa_r+0x8da>
 8004a42:	4615      	mov	r5, r2
 8004a44:	e7a1      	b.n	800498a <_dtoa_r+0xa1a>
 8004a46:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004aac <_dtoa_r+0xb3c>
 8004a4a:	f7ff bac9 	b.w	8003fe0 <_dtoa_r+0x70>
 8004a4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a50:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8004ab0 <_dtoa_r+0xb40>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f43f aac3 	beq.w	8003fe0 <_dtoa_r+0x70>
 8004a5a:	f10b 0308 	add.w	r3, fp, #8
 8004a5e:	f7ff babd 	b.w	8003fdc <_dtoa_r+0x6c>
 8004a62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	f77f ae3b 	ble.w	80046e0 <_dtoa_r+0x770>
 8004a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a6c:	9308      	str	r3, [sp, #32]
 8004a6e:	e64f      	b.n	8004710 <_dtoa_r+0x7a0>
 8004a70:	9b04      	ldr	r3, [sp, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dc03      	bgt.n	8004a7e <_dtoa_r+0xb0e>
 8004a76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	f73f aed1 	bgt.w	8004820 <_dtoa_r+0x8b0>
 8004a7e:	465d      	mov	r5, fp
 8004a80:	4631      	mov	r1, r6
 8004a82:	9806      	ldr	r0, [sp, #24]
 8004a84:	f7ff f9e4 	bl	8003e50 <quorem>
 8004a88:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a8c:	f805 8b01 	strb.w	r8, [r5], #1
 8004a90:	9a04      	ldr	r2, [sp, #16]
 8004a92:	eba5 030b 	sub.w	r3, r5, fp
 8004a96:	429a      	cmp	r2, r3
 8004a98:	ddb2      	ble.n	8004a00 <_dtoa_r+0xa90>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	220a      	movs	r2, #10
 8004a9e:	9906      	ldr	r1, [sp, #24]
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 fbc5 	bl	8005230 <__multadd>
 8004aa6:	9006      	str	r0, [sp, #24]
 8004aa8:	e7ea      	b.n	8004a80 <_dtoa_r+0xb10>
 8004aaa:	bf00      	nop
 8004aac:	08005eca 	.word	0x08005eca
 8004ab0:	08005eec 	.word	0x08005eec

08004ab4 <__libc_fini_array>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d07      	ldr	r5, [pc, #28]	; (8004ad4 <__libc_fini_array+0x20>)
 8004ab8:	4c07      	ldr	r4, [pc, #28]	; (8004ad8 <__libc_fini_array+0x24>)
 8004aba:	1b64      	subs	r4, r4, r5
 8004abc:	10a4      	asrs	r4, r4, #2
 8004abe:	b91c      	cbnz	r4, 8004ac8 <__libc_fini_array+0x14>
 8004ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ac4:	f001 b982 	b.w	8005dcc <_fini>
 8004ac8:	3c01      	subs	r4, #1
 8004aca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004ace:	4798      	blx	r3
 8004ad0:	e7f5      	b.n	8004abe <__libc_fini_array+0xa>
 8004ad2:	bf00      	nop
 8004ad4:	08006118 	.word	0x08006118
 8004ad8:	0800611c 	.word	0x0800611c

08004adc <_malloc_trim_r>:
 8004adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	2008      	movs	r0, #8
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	f000 fef6 	bl	80058d6 <sysconf>
 8004aea:	4680      	mov	r8, r0
 8004aec:	4f22      	ldr	r7, [pc, #136]	; (8004b78 <_malloc_trim_r+0x9c>)
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 fb64 	bl	80051bc <__malloc_lock>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	685e      	ldr	r6, [r3, #4]
 8004af8:	f026 0603 	bic.w	r6, r6, #3
 8004afc:	1b34      	subs	r4, r6, r4
 8004afe:	3c11      	subs	r4, #17
 8004b00:	4444      	add	r4, r8
 8004b02:	fbb4 f4f8 	udiv	r4, r4, r8
 8004b06:	3c01      	subs	r4, #1
 8004b08:	fb08 f404 	mul.w	r4, r8, r4
 8004b0c:	45a0      	cmp	r8, r4
 8004b0e:	dd05      	ble.n	8004b1c <_malloc_trim_r+0x40>
 8004b10:	4628      	mov	r0, r5
 8004b12:	f000 fb59 	bl	80051c8 <__malloc_unlock>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 fe3c 	bl	800579c <_sbrk_r>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4433      	add	r3, r6
 8004b28:	4298      	cmp	r0, r3
 8004b2a:	d1f1      	bne.n	8004b10 <_malloc_trim_r+0x34>
 8004b2c:	4261      	negs	r1, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 fe34 	bl	800579c <_sbrk_r>
 8004b34:	3001      	adds	r0, #1
 8004b36:	d110      	bne.n	8004b5a <_malloc_trim_r+0x7e>
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 fe2e 	bl	800579c <_sbrk_r>
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	1a83      	subs	r3, r0, r2
 8004b44:	2b0f      	cmp	r3, #15
 8004b46:	dde3      	ble.n	8004b10 <_malloc_trim_r+0x34>
 8004b48:	490c      	ldr	r1, [pc, #48]	; (8004b7c <_malloc_trim_r+0xa0>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6809      	ldr	r1, [r1, #0]
 8004b50:	6053      	str	r3, [r2, #4]
 8004b52:	1a40      	subs	r0, r0, r1
 8004b54:	490a      	ldr	r1, [pc, #40]	; (8004b80 <_malloc_trim_r+0xa4>)
 8004b56:	6008      	str	r0, [r1, #0]
 8004b58:	e7da      	b.n	8004b10 <_malloc_trim_r+0x34>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <_malloc_trim_r+0xa4>)
 8004b5e:	1b36      	subs	r6, r6, r4
 8004b60:	f046 0601 	orr.w	r6, r6, #1
 8004b64:	605e      	str	r6, [r3, #4]
 8004b66:	6813      	ldr	r3, [r2, #0]
 8004b68:	4628      	mov	r0, r5
 8004b6a:	1b1c      	subs	r4, r3, r4
 8004b6c:	6014      	str	r4, [r2, #0]
 8004b6e:	f000 fb2b 	bl	80051c8 <__malloc_unlock>
 8004b72:	2001      	movs	r0, #1
 8004b74:	e7d0      	b.n	8004b18 <_malloc_trim_r+0x3c>
 8004b76:	bf00      	nop
 8004b78:	20000444 	.word	0x20000444
 8004b7c:	2000084c 	.word	0x2000084c
 8004b80:	20000b48 	.word	0x20000b48

08004b84 <_free_r>:
 8004b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b88:	4604      	mov	r4, r0
 8004b8a:	4688      	mov	r8, r1
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	f000 80ab 	beq.w	8004ce8 <_free_r+0x164>
 8004b92:	f000 fb13 	bl	80051bc <__malloc_lock>
 8004b96:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004b9a:	4d54      	ldr	r5, [pc, #336]	; (8004cec <_free_r+0x168>)
 8004b9c:	f022 0001 	bic.w	r0, r2, #1
 8004ba0:	f1a8 0308 	sub.w	r3, r8, #8
 8004ba4:	181f      	adds	r7, r3, r0
 8004ba6:	68a9      	ldr	r1, [r5, #8]
 8004ba8:	687e      	ldr	r6, [r7, #4]
 8004baa:	42b9      	cmp	r1, r7
 8004bac:	f026 0603 	bic.w	r6, r6, #3
 8004bb0:	f002 0201 	and.w	r2, r2, #1
 8004bb4:	d11b      	bne.n	8004bee <_free_r+0x6a>
 8004bb6:	4430      	add	r0, r6
 8004bb8:	b93a      	cbnz	r2, 8004bca <_free_r+0x46>
 8004bba:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	4410      	add	r0, r2
 8004bc2:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004bc6:	60ca      	str	r2, [r1, #12]
 8004bc8:	6091      	str	r1, [r2, #8]
 8004bca:	f040 0201 	orr.w	r2, r0, #1
 8004bce:	605a      	str	r2, [r3, #4]
 8004bd0:	60ab      	str	r3, [r5, #8]
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <_free_r+0x16c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4283      	cmp	r3, r0
 8004bd8:	d804      	bhi.n	8004be4 <_free_r+0x60>
 8004bda:	4b46      	ldr	r3, [pc, #280]	; (8004cf4 <_free_r+0x170>)
 8004bdc:	4620      	mov	r0, r4
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	f7ff ff7c 	bl	8004adc <_malloc_trim_r>
 8004be4:	4620      	mov	r0, r4
 8004be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	f000 baed 	b.w	80051c8 <__malloc_unlock>
 8004bee:	607e      	str	r6, [r7, #4]
 8004bf0:	2a00      	cmp	r2, #0
 8004bf2:	d139      	bne.n	8004c68 <_free_r+0xe4>
 8004bf4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004bf8:	f105 0c08 	add.w	ip, r5, #8
 8004bfc:	1a5b      	subs	r3, r3, r1
 8004bfe:	4408      	add	r0, r1
 8004c00:	6899      	ldr	r1, [r3, #8]
 8004c02:	4561      	cmp	r1, ip
 8004c04:	d032      	beq.n	8004c6c <_free_r+0xe8>
 8004c06:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004c0a:	f8c1 c00c 	str.w	ip, [r1, #12]
 8004c0e:	f8cc 1008 	str.w	r1, [ip, #8]
 8004c12:	19b9      	adds	r1, r7, r6
 8004c14:	6849      	ldr	r1, [r1, #4]
 8004c16:	07c9      	lsls	r1, r1, #31
 8004c18:	d40a      	bmi.n	8004c30 <_free_r+0xac>
 8004c1a:	4430      	add	r0, r6
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	bb3a      	cbnz	r2, 8004c70 <_free_r+0xec>
 8004c20:	4e35      	ldr	r6, [pc, #212]	; (8004cf8 <_free_r+0x174>)
 8004c22:	42b1      	cmp	r1, r6
 8004c24:	d124      	bne.n	8004c70 <_free_r+0xec>
 8004c26:	2201      	movs	r2, #1
 8004c28:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8004c2c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8004c30:	f040 0101 	orr.w	r1, r0, #1
 8004c34:	6059      	str	r1, [r3, #4]
 8004c36:	5018      	str	r0, [r3, r0]
 8004c38:	2a00      	cmp	r2, #0
 8004c3a:	d1d3      	bne.n	8004be4 <_free_r+0x60>
 8004c3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004c40:	d21a      	bcs.n	8004c78 <_free_r+0xf4>
 8004c42:	2201      	movs	r2, #1
 8004c44:	08c0      	lsrs	r0, r0, #3
 8004c46:	1081      	asrs	r1, r0, #2
 8004c48:	408a      	lsls	r2, r1
 8004c4a:	6869      	ldr	r1, [r5, #4]
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	606a      	str	r2, [r5, #4]
 8004c52:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004c56:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004c5a:	3a08      	subs	r2, #8
 8004c5c:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004c60:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004c64:	60cb      	str	r3, [r1, #12]
 8004c66:	e7bd      	b.n	8004be4 <_free_r+0x60>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	e7d2      	b.n	8004c12 <_free_r+0x8e>
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	e7d0      	b.n	8004c12 <_free_r+0x8e>
 8004c70:	68fe      	ldr	r6, [r7, #12]
 8004c72:	60ce      	str	r6, [r1, #12]
 8004c74:	60b1      	str	r1, [r6, #8]
 8004c76:	e7db      	b.n	8004c30 <_free_r+0xac>
 8004c78:	0a42      	lsrs	r2, r0, #9
 8004c7a:	2a04      	cmp	r2, #4
 8004c7c:	d813      	bhi.n	8004ca6 <_free_r+0x122>
 8004c7e:	0982      	lsrs	r2, r0, #6
 8004c80:	3238      	adds	r2, #56	; 0x38
 8004c82:	1c51      	adds	r1, r2, #1
 8004c84:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004c88:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004c8c:	428e      	cmp	r6, r1
 8004c8e:	d124      	bne.n	8004cda <_free_r+0x156>
 8004c90:	2001      	movs	r0, #1
 8004c92:	1092      	asrs	r2, r2, #2
 8004c94:	fa00 f202 	lsl.w	r2, r0, r2
 8004c98:	6868      	ldr	r0, [r5, #4]
 8004c9a:	4302      	orrs	r2, r0
 8004c9c:	606a      	str	r2, [r5, #4]
 8004c9e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8004ca2:	60b3      	str	r3, [r6, #8]
 8004ca4:	e7de      	b.n	8004c64 <_free_r+0xe0>
 8004ca6:	2a14      	cmp	r2, #20
 8004ca8:	d801      	bhi.n	8004cae <_free_r+0x12a>
 8004caa:	325b      	adds	r2, #91	; 0x5b
 8004cac:	e7e9      	b.n	8004c82 <_free_r+0xfe>
 8004cae:	2a54      	cmp	r2, #84	; 0x54
 8004cb0:	d802      	bhi.n	8004cb8 <_free_r+0x134>
 8004cb2:	0b02      	lsrs	r2, r0, #12
 8004cb4:	326e      	adds	r2, #110	; 0x6e
 8004cb6:	e7e4      	b.n	8004c82 <_free_r+0xfe>
 8004cb8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004cbc:	d802      	bhi.n	8004cc4 <_free_r+0x140>
 8004cbe:	0bc2      	lsrs	r2, r0, #15
 8004cc0:	3277      	adds	r2, #119	; 0x77
 8004cc2:	e7de      	b.n	8004c82 <_free_r+0xfe>
 8004cc4:	f240 5154 	movw	r1, #1364	; 0x554
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	bf9a      	itte	ls
 8004ccc:	0c82      	lsrls	r2, r0, #18
 8004cce:	327c      	addls	r2, #124	; 0x7c
 8004cd0:	227e      	movhi	r2, #126	; 0x7e
 8004cd2:	e7d6      	b.n	8004c82 <_free_r+0xfe>
 8004cd4:	6889      	ldr	r1, [r1, #8]
 8004cd6:	428e      	cmp	r6, r1
 8004cd8:	d004      	beq.n	8004ce4 <_free_r+0x160>
 8004cda:	684a      	ldr	r2, [r1, #4]
 8004cdc:	f022 0203 	bic.w	r2, r2, #3
 8004ce0:	4282      	cmp	r2, r0
 8004ce2:	d8f7      	bhi.n	8004cd4 <_free_r+0x150>
 8004ce4:	68ce      	ldr	r6, [r1, #12]
 8004ce6:	e7da      	b.n	8004c9e <_free_r+0x11a>
 8004ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cec:	20000444 	.word	0x20000444
 8004cf0:	20000850 	.word	0x20000850
 8004cf4:	20000b78 	.word	0x20000b78
 8004cf8:	2000044c 	.word	0x2000044c

08004cfc <_localeconv_r>:
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <_localeconv_r+0x14>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d02:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <_localeconv_r+0x18>)
 8004d04:	2800      	cmp	r0, #0
 8004d06:	bf08      	it	eq
 8004d08:	4618      	moveq	r0, r3
 8004d0a:	30f0      	adds	r0, #240	; 0xf0
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000010 	.word	0x20000010
 8004d14:	20000854 	.word	0x20000854

08004d18 <__retarget_lock_acquire_recursive>:
 8004d18:	4770      	bx	lr

08004d1a <__retarget_lock_release_recursive>:
 8004d1a:	4770      	bx	lr

08004d1c <_malloc_r>:
 8004d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	f101 050b 	add.w	r5, r1, #11
 8004d24:	2d16      	cmp	r5, #22
 8004d26:	4606      	mov	r6, r0
 8004d28:	d906      	bls.n	8004d38 <_malloc_r+0x1c>
 8004d2a:	f035 0507 	bics.w	r5, r5, #7
 8004d2e:	d504      	bpl.n	8004d3a <_malloc_r+0x1e>
 8004d30:	230c      	movs	r3, #12
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	2400      	movs	r4, #0
 8004d36:	e1a8      	b.n	800508a <_malloc_r+0x36e>
 8004d38:	2510      	movs	r5, #16
 8004d3a:	428d      	cmp	r5, r1
 8004d3c:	d3f8      	bcc.n	8004d30 <_malloc_r+0x14>
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 fa3c 	bl	80051bc <__malloc_lock>
 8004d44:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004d48:	4fc0      	ldr	r7, [pc, #768]	; (800504c <_malloc_r+0x330>)
 8004d4a:	d238      	bcs.n	8004dbe <_malloc_r+0xa2>
 8004d4c:	f105 0208 	add.w	r2, r5, #8
 8004d50:	443a      	add	r2, r7
 8004d52:	6854      	ldr	r4, [r2, #4]
 8004d54:	f1a2 0108 	sub.w	r1, r2, #8
 8004d58:	428c      	cmp	r4, r1
 8004d5a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8004d5e:	d102      	bne.n	8004d66 <_malloc_r+0x4a>
 8004d60:	68d4      	ldr	r4, [r2, #12]
 8004d62:	42a2      	cmp	r2, r4
 8004d64:	d010      	beq.n	8004d88 <_malloc_r+0x6c>
 8004d66:	6863      	ldr	r3, [r4, #4]
 8004d68:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004d6c:	f023 0303 	bic.w	r3, r3, #3
 8004d70:	60ca      	str	r2, [r1, #12]
 8004d72:	4423      	add	r3, r4
 8004d74:	6091      	str	r1, [r2, #8]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f000 fa22 	bl	80051c8 <__malloc_unlock>
 8004d84:	3408      	adds	r4, #8
 8004d86:	e180      	b.n	800508a <_malloc_r+0x36e>
 8004d88:	3302      	adds	r3, #2
 8004d8a:	4ab1      	ldr	r2, [pc, #708]	; (8005050 <_malloc_r+0x334>)
 8004d8c:	693c      	ldr	r4, [r7, #16]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4294      	cmp	r4, r2
 8004d92:	d075      	beq.n	8004e80 <_malloc_r+0x164>
 8004d94:	6860      	ldr	r0, [r4, #4]
 8004d96:	f020 0c03 	bic.w	ip, r0, #3
 8004d9a:	ebac 0005 	sub.w	r0, ip, r5
 8004d9e:	280f      	cmp	r0, #15
 8004da0:	dd48      	ble.n	8004e34 <_malloc_r+0x118>
 8004da2:	1963      	adds	r3, r4, r5
 8004da4:	f045 0501 	orr.w	r5, r5, #1
 8004da8:	6065      	str	r5, [r4, #4]
 8004daa:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8004dae:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8004db2:	f040 0201 	orr.w	r2, r0, #1
 8004db6:	605a      	str	r2, [r3, #4]
 8004db8:	f844 000c 	str.w	r0, [r4, ip]
 8004dbc:	e7df      	b.n	8004d7e <_malloc_r+0x62>
 8004dbe:	0a6b      	lsrs	r3, r5, #9
 8004dc0:	d02a      	beq.n	8004e18 <_malloc_r+0xfc>
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d812      	bhi.n	8004dec <_malloc_r+0xd0>
 8004dc6:	09ab      	lsrs	r3, r5, #6
 8004dc8:	3338      	adds	r3, #56	; 0x38
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004dd0:	6854      	ldr	r4, [r2, #4]
 8004dd2:	f1a2 0c08 	sub.w	ip, r2, #8
 8004dd6:	4564      	cmp	r4, ip
 8004dd8:	d006      	beq.n	8004de8 <_malloc_r+0xcc>
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	f022 0203 	bic.w	r2, r2, #3
 8004de0:	1b50      	subs	r0, r2, r5
 8004de2:	280f      	cmp	r0, #15
 8004de4:	dd1c      	ble.n	8004e20 <_malloc_r+0x104>
 8004de6:	3b01      	subs	r3, #1
 8004de8:	3301      	adds	r3, #1
 8004dea:	e7ce      	b.n	8004d8a <_malloc_r+0x6e>
 8004dec:	2b14      	cmp	r3, #20
 8004dee:	d801      	bhi.n	8004df4 <_malloc_r+0xd8>
 8004df0:	335b      	adds	r3, #91	; 0x5b
 8004df2:	e7ea      	b.n	8004dca <_malloc_r+0xae>
 8004df4:	2b54      	cmp	r3, #84	; 0x54
 8004df6:	d802      	bhi.n	8004dfe <_malloc_r+0xe2>
 8004df8:	0b2b      	lsrs	r3, r5, #12
 8004dfa:	336e      	adds	r3, #110	; 0x6e
 8004dfc:	e7e5      	b.n	8004dca <_malloc_r+0xae>
 8004dfe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004e02:	d802      	bhi.n	8004e0a <_malloc_r+0xee>
 8004e04:	0beb      	lsrs	r3, r5, #15
 8004e06:	3377      	adds	r3, #119	; 0x77
 8004e08:	e7df      	b.n	8004dca <_malloc_r+0xae>
 8004e0a:	f240 5254 	movw	r2, #1364	; 0x554
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d804      	bhi.n	8004e1c <_malloc_r+0x100>
 8004e12:	0cab      	lsrs	r3, r5, #18
 8004e14:	337c      	adds	r3, #124	; 0x7c
 8004e16:	e7d8      	b.n	8004dca <_malloc_r+0xae>
 8004e18:	233f      	movs	r3, #63	; 0x3f
 8004e1a:	e7d6      	b.n	8004dca <_malloc_r+0xae>
 8004e1c:	237e      	movs	r3, #126	; 0x7e
 8004e1e:	e7d4      	b.n	8004dca <_malloc_r+0xae>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	68e1      	ldr	r1, [r4, #12]
 8004e24:	db04      	blt.n	8004e30 <_malloc_r+0x114>
 8004e26:	68a3      	ldr	r3, [r4, #8]
 8004e28:	60d9      	str	r1, [r3, #12]
 8004e2a:	608b      	str	r3, [r1, #8]
 8004e2c:	18a3      	adds	r3, r4, r2
 8004e2e:	e7a2      	b.n	8004d76 <_malloc_r+0x5a>
 8004e30:	460c      	mov	r4, r1
 8004e32:	e7d0      	b.n	8004dd6 <_malloc_r+0xba>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8004e3a:	db07      	blt.n	8004e4c <_malloc_r+0x130>
 8004e3c:	44a4      	add	ip, r4
 8004e3e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	f8cc 3004 	str.w	r3, [ip, #4]
 8004e4a:	e798      	b.n	8004d7e <_malloc_r+0x62>
 8004e4c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f080 8099 	bcs.w	8004f88 <_malloc_r+0x26c>
 8004e56:	2201      	movs	r2, #1
 8004e58:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004e5c:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8004e60:	fa02 f20e 	lsl.w	r2, r2, lr
 8004e64:	4310      	orrs	r0, r2
 8004e66:	f10c 0c01 	add.w	ip, ip, #1
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8004e70:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8004e74:	3a08      	subs	r2, #8
 8004e76:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8004e7a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8004e7e:	60c4      	str	r4, [r0, #12]
 8004e80:	2001      	movs	r0, #1
 8004e82:	109a      	asrs	r2, r3, #2
 8004e84:	fa00 f202 	lsl.w	r2, r0, r2
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4290      	cmp	r0, r2
 8004e8c:	d326      	bcc.n	8004edc <_malloc_r+0x1c0>
 8004e8e:	4210      	tst	r0, r2
 8004e90:	d106      	bne.n	8004ea0 <_malloc_r+0x184>
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	0052      	lsls	r2, r2, #1
 8004e98:	4210      	tst	r0, r2
 8004e9a:	f103 0304 	add.w	r3, r3, #4
 8004e9e:	d0fa      	beq.n	8004e96 <_malloc_r+0x17a>
 8004ea0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8004ea4:	46e1      	mov	r9, ip
 8004ea6:	4698      	mov	r8, r3
 8004ea8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004eac:	454c      	cmp	r4, r9
 8004eae:	f040 80af 	bne.w	8005010 <_malloc_r+0x2f4>
 8004eb2:	f108 0801 	add.w	r8, r8, #1
 8004eb6:	f018 0f03 	tst.w	r8, #3
 8004eba:	f109 0908 	add.w	r9, r9, #8
 8004ebe:	d1f3      	bne.n	8004ea8 <_malloc_r+0x18c>
 8004ec0:	0798      	lsls	r0, r3, #30
 8004ec2:	f040 80e8 	bne.w	8005096 <_malloc_r+0x37a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	ea23 0302 	bic.w	r3, r3, r2
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	0052      	lsls	r2, r2, #1
 8004ed2:	4290      	cmp	r0, r2
 8004ed4:	d302      	bcc.n	8004edc <_malloc_r+0x1c0>
 8004ed6:	2a00      	cmp	r2, #0
 8004ed8:	f040 80eb 	bne.w	80050b2 <_malloc_r+0x396>
 8004edc:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8004ee0:	f8da 4004 	ldr.w	r4, [sl, #4]
 8004ee4:	f024 0203 	bic.w	r2, r4, #3
 8004ee8:	42aa      	cmp	r2, r5
 8004eea:	d303      	bcc.n	8004ef4 <_malloc_r+0x1d8>
 8004eec:	1b53      	subs	r3, r2, r5
 8004eee:	2b0f      	cmp	r3, #15
 8004ef0:	f300 813f 	bgt.w	8005172 <_malloc_r+0x456>
 8004ef4:	4b57      	ldr	r3, [pc, #348]	; (8005054 <_malloc_r+0x338>)
 8004ef6:	2008      	movs	r0, #8
 8004ef8:	681c      	ldr	r4, [r3, #0]
 8004efa:	9200      	str	r2, [sp, #0]
 8004efc:	f000 fceb 	bl	80058d6 <sysconf>
 8004f00:	4b55      	ldr	r3, [pc, #340]	; (8005058 <_malloc_r+0x33c>)
 8004f02:	3410      	adds	r4, #16
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	442c      	add	r4, r5
 8004f08:	3101      	adds	r1, #1
 8004f0a:	bf1f      	itttt	ne
 8004f0c:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 8004f10:	1824      	addne	r4, r4, r0
 8004f12:	4241      	negne	r1, r0
 8004f14:	400c      	andne	r4, r1
 8004f16:	9a00      	ldr	r2, [sp, #0]
 8004f18:	4680      	mov	r8, r0
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	e9cd 2300 	strd	r2, r3, [sp]
 8004f22:	f000 fc3b 	bl	800579c <_sbrk_r>
 8004f26:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004f2a:	4683      	mov	fp, r0
 8004f2c:	f000 80fa 	beq.w	8005124 <_malloc_r+0x408>
 8004f30:	9a00      	ldr	r2, [sp, #0]
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	eb0a 0102 	add.w	r1, sl, r2
 8004f38:	4281      	cmp	r1, r0
 8004f3a:	d902      	bls.n	8004f42 <_malloc_r+0x226>
 8004f3c:	45ba      	cmp	sl, r7
 8004f3e:	f040 80f1 	bne.w	8005124 <_malloc_r+0x408>
 8004f42:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8005064 <_malloc_r+0x348>
 8004f46:	4559      	cmp	r1, fp
 8004f48:	f8d9 0000 	ldr.w	r0, [r9]
 8004f4c:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8004f50:	eb00 0e04 	add.w	lr, r0, r4
 8004f54:	f8c9 e000 	str.w	lr, [r9]
 8004f58:	f040 80ad 	bne.w	80050b6 <_malloc_r+0x39a>
 8004f5c:	ea11 0f0c 	tst.w	r1, ip
 8004f60:	f040 80a9 	bne.w	80050b6 <_malloc_r+0x39a>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4414      	add	r4, r2
 8004f68:	f044 0401 	orr.w	r4, r4, #1
 8004f6c:	605c      	str	r4, [r3, #4]
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	; (800505c <_malloc_r+0x340>)
 8004f70:	f8d9 3000 	ldr.w	r3, [r9]
 8004f74:	6811      	ldr	r1, [r2, #0]
 8004f76:	428b      	cmp	r3, r1
 8004f78:	bf88      	it	hi
 8004f7a:	6013      	strhi	r3, [r2, #0]
 8004f7c:	4a38      	ldr	r2, [pc, #224]	; (8005060 <_malloc_r+0x344>)
 8004f7e:	6811      	ldr	r1, [r2, #0]
 8004f80:	428b      	cmp	r3, r1
 8004f82:	bf88      	it	hi
 8004f84:	6013      	strhi	r3, [r2, #0]
 8004f86:	e0cd      	b.n	8005124 <_malloc_r+0x408>
 8004f88:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8004f8c:	2a04      	cmp	r2, #4
 8004f8e:	d818      	bhi.n	8004fc2 <_malloc_r+0x2a6>
 8004f90:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8004f94:	3238      	adds	r2, #56	; 0x38
 8004f96:	f102 0e01 	add.w	lr, r2, #1
 8004f9a:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8004f9e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8004fa2:	45f0      	cmp	r8, lr
 8004fa4:	d12b      	bne.n	8004ffe <_malloc_r+0x2e2>
 8004fa6:	f04f 0c01 	mov.w	ip, #1
 8004faa:	1092      	asrs	r2, r2, #2
 8004fac:	fa0c f202 	lsl.w	r2, ip, r2
 8004fb0:	4310      	orrs	r0, r2
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8004fb8:	f8c8 4008 	str.w	r4, [r8, #8]
 8004fbc:	f8ce 400c 	str.w	r4, [lr, #12]
 8004fc0:	e75e      	b.n	8004e80 <_malloc_r+0x164>
 8004fc2:	2a14      	cmp	r2, #20
 8004fc4:	d801      	bhi.n	8004fca <_malloc_r+0x2ae>
 8004fc6:	325b      	adds	r2, #91	; 0x5b
 8004fc8:	e7e5      	b.n	8004f96 <_malloc_r+0x27a>
 8004fca:	2a54      	cmp	r2, #84	; 0x54
 8004fcc:	d803      	bhi.n	8004fd6 <_malloc_r+0x2ba>
 8004fce:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8004fd2:	326e      	adds	r2, #110	; 0x6e
 8004fd4:	e7df      	b.n	8004f96 <_malloc_r+0x27a>
 8004fd6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004fda:	d803      	bhi.n	8004fe4 <_malloc_r+0x2c8>
 8004fdc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8004fe0:	3277      	adds	r2, #119	; 0x77
 8004fe2:	e7d8      	b.n	8004f96 <_malloc_r+0x27a>
 8004fe4:	f240 5e54 	movw	lr, #1364	; 0x554
 8004fe8:	4572      	cmp	r2, lr
 8004fea:	bf9a      	itte	ls
 8004fec:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8004ff0:	327c      	addls	r2, #124	; 0x7c
 8004ff2:	227e      	movhi	r2, #126	; 0x7e
 8004ff4:	e7cf      	b.n	8004f96 <_malloc_r+0x27a>
 8004ff6:	f8de e008 	ldr.w	lr, [lr, #8]
 8004ffa:	45f0      	cmp	r8, lr
 8004ffc:	d005      	beq.n	800500a <_malloc_r+0x2ee>
 8004ffe:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005002:	f022 0203 	bic.w	r2, r2, #3
 8005006:	4562      	cmp	r2, ip
 8005008:	d8f5      	bhi.n	8004ff6 <_malloc_r+0x2da>
 800500a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800500e:	e7d1      	b.n	8004fb4 <_malloc_r+0x298>
 8005010:	6860      	ldr	r0, [r4, #4]
 8005012:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8005016:	f020 0003 	bic.w	r0, r0, #3
 800501a:	eba0 0a05 	sub.w	sl, r0, r5
 800501e:	f1ba 0f0f 	cmp.w	sl, #15
 8005022:	dd21      	ble.n	8005068 <_malloc_r+0x34c>
 8005024:	68a2      	ldr	r2, [r4, #8]
 8005026:	1963      	adds	r3, r4, r5
 8005028:	f045 0501 	orr.w	r5, r5, #1
 800502c:	6065      	str	r5, [r4, #4]
 800502e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8005032:	f8ce 2008 	str.w	r2, [lr, #8]
 8005036:	f04a 0201 	orr.w	r2, sl, #1
 800503a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800503e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	f844 a000 	str.w	sl, [r4, r0]
 8005048:	e699      	b.n	8004d7e <_malloc_r+0x62>
 800504a:	bf00      	nop
 800504c:	20000444 	.word	0x20000444
 8005050:	2000044c 	.word	0x2000044c
 8005054:	20000b78 	.word	0x20000b78
 8005058:	2000084c 	.word	0x2000084c
 800505c:	20000b70 	.word	0x20000b70
 8005060:	20000b74 	.word	0x20000b74
 8005064:	20000b48 	.word	0x20000b48
 8005068:	f1ba 0f00 	cmp.w	sl, #0
 800506c:	db11      	blt.n	8005092 <_malloc_r+0x376>
 800506e:	4420      	add	r0, r4
 8005070:	6843      	ldr	r3, [r0, #4]
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	6043      	str	r3, [r0, #4]
 8005078:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800507c:	4630      	mov	r0, r6
 800507e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8005082:	f8ce 3008 	str.w	r3, [lr, #8]
 8005086:	f000 f89f 	bl	80051c8 <__malloc_unlock>
 800508a:	4620      	mov	r0, r4
 800508c:	b003      	add	sp, #12
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	4674      	mov	r4, lr
 8005094:	e70a      	b.n	8004eac <_malloc_r+0x190>
 8005096:	f1ac 0008 	sub.w	r0, ip, #8
 800509a:	f8dc c000 	ldr.w	ip, [ip]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4584      	cmp	ip, r0
 80050a2:	f43f af0d 	beq.w	8004ec0 <_malloc_r+0x1a4>
 80050a6:	e712      	b.n	8004ece <_malloc_r+0x1b2>
 80050a8:	3304      	adds	r3, #4
 80050aa:	0052      	lsls	r2, r2, #1
 80050ac:	4210      	tst	r0, r2
 80050ae:	d0fb      	beq.n	80050a8 <_malloc_r+0x38c>
 80050b0:	e6f6      	b.n	8004ea0 <_malloc_r+0x184>
 80050b2:	4643      	mov	r3, r8
 80050b4:	e7fa      	b.n	80050ac <_malloc_r+0x390>
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	9200      	str	r2, [sp, #0]
 80050ba:	3001      	adds	r0, #1
 80050bc:	bf1b      	ittet	ne
 80050be:	ebab 0101 	subne.w	r1, fp, r1
 80050c2:	4471      	addne	r1, lr
 80050c4:	f8c3 b000 	streq.w	fp, [r3]
 80050c8:	f8c9 1000 	strne.w	r1, [r9]
 80050cc:	f01b 0307 	ands.w	r3, fp, #7
 80050d0:	bf1c      	itt	ne
 80050d2:	f1c3 0308 	rsbne	r3, r3, #8
 80050d6:	449b      	addne	fp, r3
 80050d8:	445c      	add	r4, fp
 80050da:	4498      	add	r8, r3
 80050dc:	ea04 030c 	and.w	r3, r4, ip
 80050e0:	eba8 0803 	sub.w	r8, r8, r3
 80050e4:	4641      	mov	r1, r8
 80050e6:	4630      	mov	r0, r6
 80050e8:	f000 fb58 	bl	800579c <_sbrk_r>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	bf04      	itt	eq
 80050f0:	4658      	moveq	r0, fp
 80050f2:	f04f 0800 	moveq.w	r8, #0
 80050f6:	f8d9 3000 	ldr.w	r3, [r9]
 80050fa:	eba0 000b 	sub.w	r0, r0, fp
 80050fe:	4440      	add	r0, r8
 8005100:	4443      	add	r3, r8
 8005102:	f040 0001 	orr.w	r0, r0, #1
 8005106:	45ba      	cmp	sl, r7
 8005108:	f8c7 b008 	str.w	fp, [r7, #8]
 800510c:	9a00      	ldr	r2, [sp, #0]
 800510e:	f8c9 3000 	str.w	r3, [r9]
 8005112:	f8cb 0004 	str.w	r0, [fp, #4]
 8005116:	f43f af2a 	beq.w	8004f6e <_malloc_r+0x252>
 800511a:	2a0f      	cmp	r2, #15
 800511c:	d810      	bhi.n	8005140 <_malloc_r+0x424>
 800511e:	2301      	movs	r3, #1
 8005120:	f8cb 3004 	str.w	r3, [fp, #4]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	f022 0203 	bic.w	r2, r2, #3
 800512c:	42aa      	cmp	r2, r5
 800512e:	eba2 0305 	sub.w	r3, r2, r5
 8005132:	d301      	bcc.n	8005138 <_malloc_r+0x41c>
 8005134:	2b0f      	cmp	r3, #15
 8005136:	dc1c      	bgt.n	8005172 <_malloc_r+0x456>
 8005138:	4630      	mov	r0, r6
 800513a:	f000 f845 	bl	80051c8 <__malloc_unlock>
 800513e:	e5f9      	b.n	8004d34 <_malloc_r+0x18>
 8005140:	f1a2 040c 	sub.w	r4, r2, #12
 8005144:	2205      	movs	r2, #5
 8005146:	f8da 3004 	ldr.w	r3, [sl, #4]
 800514a:	f024 0407 	bic.w	r4, r4, #7
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	4323      	orrs	r3, r4
 8005154:	f8ca 3004 	str.w	r3, [sl, #4]
 8005158:	2c0f      	cmp	r4, #15
 800515a:	eb0a 0304 	add.w	r3, sl, r4
 800515e:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8005162:	f67f af04 	bls.w	8004f6e <_malloc_r+0x252>
 8005166:	f10a 0108 	add.w	r1, sl, #8
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff fd0a 	bl	8004b84 <_free_r>
 8005170:	e6fd      	b.n	8004f6e <_malloc_r+0x252>
 8005172:	68bc      	ldr	r4, [r7, #8]
 8005174:	f045 0201 	orr.w	r2, r5, #1
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	4425      	add	r5, r4
 800517e:	6062      	str	r2, [r4, #4]
 8005180:	60bd      	str	r5, [r7, #8]
 8005182:	606b      	str	r3, [r5, #4]
 8005184:	e5fb      	b.n	8004d7e <_malloc_r+0x62>
 8005186:	bf00      	nop

08005188 <memchr>:
 8005188:	b510      	push	{r4, lr}
 800518a:	b2c9      	uxtb	r1, r1
 800518c:	4402      	add	r2, r0
 800518e:	4290      	cmp	r0, r2
 8005190:	4603      	mov	r3, r0
 8005192:	d101      	bne.n	8005198 <memchr+0x10>
 8005194:	2300      	movs	r3, #0
 8005196:	e003      	b.n	80051a0 <memchr+0x18>
 8005198:	781c      	ldrb	r4, [r3, #0]
 800519a:	3001      	adds	r0, #1
 800519c:	428c      	cmp	r4, r1
 800519e:	d1f6      	bne.n	800518e <memchr+0x6>
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd10      	pop	{r4, pc}

080051a4 <memcpy>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	1e43      	subs	r3, r0, #1
 80051a8:	440a      	add	r2, r1
 80051aa:	4291      	cmp	r1, r2
 80051ac:	d100      	bne.n	80051b0 <memcpy+0xc>
 80051ae:	bd10      	pop	{r4, pc}
 80051b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b8:	e7f7      	b.n	80051aa <memcpy+0x6>
	...

080051bc <__malloc_lock>:
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <__malloc_lock+0x8>)
 80051be:	f7ff bdab 	b.w	8004d18 <__retarget_lock_acquire_recursive>
 80051c2:	bf00      	nop
 80051c4:	20000c1c 	.word	0x20000c1c

080051c8 <__malloc_unlock>:
 80051c8:	4801      	ldr	r0, [pc, #4]	; (80051d0 <__malloc_unlock+0x8>)
 80051ca:	f7ff bda6 	b.w	8004d1a <__retarget_lock_release_recursive>
 80051ce:	bf00      	nop
 80051d0:	20000c1c 	.word	0x20000c1c

080051d4 <_Balloc>:
 80051d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80051d6:	b570      	push	{r4, r5, r6, lr}
 80051d8:	4605      	mov	r5, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b17b      	cbz	r3, 80051fe <_Balloc+0x2a>
 80051de:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80051e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80051e4:	b9a0      	cbnz	r0, 8005210 <_Balloc+0x3c>
 80051e6:	2101      	movs	r1, #1
 80051e8:	fa01 f604 	lsl.w	r6, r1, r4
 80051ec:	1d72      	adds	r2, r6, #5
 80051ee:	0092      	lsls	r2, r2, #2
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 fbd3 	bl	800599c <_calloc_r>
 80051f6:	b148      	cbz	r0, 800520c <_Balloc+0x38>
 80051f8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80051fc:	e00b      	b.n	8005216 <_Balloc+0x42>
 80051fe:	2221      	movs	r2, #33	; 0x21
 8005200:	2104      	movs	r1, #4
 8005202:	f000 fbcb 	bl	800599c <_calloc_r>
 8005206:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005208:	2800      	cmp	r0, #0
 800520a:	d1e8      	bne.n	80051de <_Balloc+0xa>
 800520c:	2000      	movs	r0, #0
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	6802      	ldr	r2, [r0, #0]
 8005212:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8005216:	2300      	movs	r3, #0
 8005218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800521c:	e7f7      	b.n	800520e <_Balloc+0x3a>

0800521e <_Bfree>:
 800521e:	b131      	cbz	r1, 800522e <_Bfree+0x10>
 8005220:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005222:	684a      	ldr	r2, [r1, #4]
 8005224:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005228:	6008      	str	r0, [r1, #0]
 800522a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800522e:	4770      	bx	lr

08005230 <__multadd>:
 8005230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005234:	461f      	mov	r7, r3
 8005236:	4606      	mov	r6, r0
 8005238:	460c      	mov	r4, r1
 800523a:	2300      	movs	r3, #0
 800523c:	690d      	ldr	r5, [r1, #16]
 800523e:	f101 0c14 	add.w	ip, r1, #20
 8005242:	f8dc 0000 	ldr.w	r0, [ip]
 8005246:	3301      	adds	r3, #1
 8005248:	b281      	uxth	r1, r0
 800524a:	fb02 7101 	mla	r1, r2, r1, r7
 800524e:	0c00      	lsrs	r0, r0, #16
 8005250:	0c0f      	lsrs	r7, r1, #16
 8005252:	fb02 7000 	mla	r0, r2, r0, r7
 8005256:	b289      	uxth	r1, r1
 8005258:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800525c:	429d      	cmp	r5, r3
 800525e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005262:	f84c 1b04 	str.w	r1, [ip], #4
 8005266:	dcec      	bgt.n	8005242 <__multadd+0x12>
 8005268:	b1d7      	cbz	r7, 80052a0 <__multadd+0x70>
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	42ab      	cmp	r3, r5
 800526e:	dc12      	bgt.n	8005296 <__multadd+0x66>
 8005270:	6861      	ldr	r1, [r4, #4]
 8005272:	4630      	mov	r0, r6
 8005274:	3101      	adds	r1, #1
 8005276:	f7ff ffad 	bl	80051d4 <_Balloc>
 800527a:	4680      	mov	r8, r0
 800527c:	6922      	ldr	r2, [r4, #16]
 800527e:	f104 010c 	add.w	r1, r4, #12
 8005282:	3202      	adds	r2, #2
 8005284:	0092      	lsls	r2, r2, #2
 8005286:	300c      	adds	r0, #12
 8005288:	f7ff ff8c 	bl	80051a4 <memcpy>
 800528c:	4621      	mov	r1, r4
 800528e:	4630      	mov	r0, r6
 8005290:	f7ff ffc5 	bl	800521e <_Bfree>
 8005294:	4644      	mov	r4, r8
 8005296:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800529a:	3501      	adds	r5, #1
 800529c:	615f      	str	r7, [r3, #20]
 800529e:	6125      	str	r5, [r4, #16]
 80052a0:	4620      	mov	r0, r4
 80052a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052a6 <__hi0bits>:
 80052a6:	0c02      	lsrs	r2, r0, #16
 80052a8:	0412      	lsls	r2, r2, #16
 80052aa:	4603      	mov	r3, r0
 80052ac:	b9b2      	cbnz	r2, 80052dc <__hi0bits+0x36>
 80052ae:	0403      	lsls	r3, r0, #16
 80052b0:	2010      	movs	r0, #16
 80052b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80052b6:	bf04      	itt	eq
 80052b8:	021b      	lsleq	r3, r3, #8
 80052ba:	3008      	addeq	r0, #8
 80052bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80052c0:	bf04      	itt	eq
 80052c2:	011b      	lsleq	r3, r3, #4
 80052c4:	3004      	addeq	r0, #4
 80052c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80052ca:	bf04      	itt	eq
 80052cc:	009b      	lsleq	r3, r3, #2
 80052ce:	3002      	addeq	r0, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	db06      	blt.n	80052e2 <__hi0bits+0x3c>
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	d503      	bpl.n	80052e0 <__hi0bits+0x3a>
 80052d8:	3001      	adds	r0, #1
 80052da:	4770      	bx	lr
 80052dc:	2000      	movs	r0, #0
 80052de:	e7e8      	b.n	80052b2 <__hi0bits+0xc>
 80052e0:	2020      	movs	r0, #32
 80052e2:	4770      	bx	lr

080052e4 <__lo0bits>:
 80052e4:	6803      	ldr	r3, [r0, #0]
 80052e6:	4601      	mov	r1, r0
 80052e8:	f013 0207 	ands.w	r2, r3, #7
 80052ec:	d00b      	beq.n	8005306 <__lo0bits+0x22>
 80052ee:	07da      	lsls	r2, r3, #31
 80052f0:	d423      	bmi.n	800533a <__lo0bits+0x56>
 80052f2:	0798      	lsls	r0, r3, #30
 80052f4:	bf49      	itett	mi
 80052f6:	085b      	lsrmi	r3, r3, #1
 80052f8:	089b      	lsrpl	r3, r3, #2
 80052fa:	2001      	movmi	r0, #1
 80052fc:	600b      	strmi	r3, [r1, #0]
 80052fe:	bf5c      	itt	pl
 8005300:	600b      	strpl	r3, [r1, #0]
 8005302:	2002      	movpl	r0, #2
 8005304:	4770      	bx	lr
 8005306:	b298      	uxth	r0, r3
 8005308:	b9a8      	cbnz	r0, 8005336 <__lo0bits+0x52>
 800530a:	2010      	movs	r0, #16
 800530c:	0c1b      	lsrs	r3, r3, #16
 800530e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005312:	bf04      	itt	eq
 8005314:	0a1b      	lsreq	r3, r3, #8
 8005316:	3008      	addeq	r0, #8
 8005318:	071a      	lsls	r2, r3, #28
 800531a:	bf04      	itt	eq
 800531c:	091b      	lsreq	r3, r3, #4
 800531e:	3004      	addeq	r0, #4
 8005320:	079a      	lsls	r2, r3, #30
 8005322:	bf04      	itt	eq
 8005324:	089b      	lsreq	r3, r3, #2
 8005326:	3002      	addeq	r0, #2
 8005328:	07da      	lsls	r2, r3, #31
 800532a:	d402      	bmi.n	8005332 <__lo0bits+0x4e>
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	d006      	beq.n	800533e <__lo0bits+0x5a>
 8005330:	3001      	adds	r0, #1
 8005332:	600b      	str	r3, [r1, #0]
 8005334:	4770      	bx	lr
 8005336:	4610      	mov	r0, r2
 8005338:	e7e9      	b.n	800530e <__lo0bits+0x2a>
 800533a:	2000      	movs	r0, #0
 800533c:	4770      	bx	lr
 800533e:	2020      	movs	r0, #32
 8005340:	4770      	bx	lr

08005342 <__i2b>:
 8005342:	b510      	push	{r4, lr}
 8005344:	460c      	mov	r4, r1
 8005346:	2101      	movs	r1, #1
 8005348:	f7ff ff44 	bl	80051d4 <_Balloc>
 800534c:	2201      	movs	r2, #1
 800534e:	6144      	str	r4, [r0, #20]
 8005350:	6102      	str	r2, [r0, #16]
 8005352:	bd10      	pop	{r4, pc}

08005354 <__multiply>:
 8005354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4614      	mov	r4, r2
 800535a:	690a      	ldr	r2, [r1, #16]
 800535c:	6923      	ldr	r3, [r4, #16]
 800535e:	4688      	mov	r8, r1
 8005360:	429a      	cmp	r2, r3
 8005362:	bfbe      	ittt	lt
 8005364:	460b      	movlt	r3, r1
 8005366:	46a0      	movlt	r8, r4
 8005368:	461c      	movlt	r4, r3
 800536a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800536e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005376:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800537a:	eb07 0609 	add.w	r6, r7, r9
 800537e:	42b3      	cmp	r3, r6
 8005380:	bfb8      	it	lt
 8005382:	3101      	addlt	r1, #1
 8005384:	f7ff ff26 	bl	80051d4 <_Balloc>
 8005388:	f100 0514 	add.w	r5, r0, #20
 800538c:	462b      	mov	r3, r5
 800538e:	2200      	movs	r2, #0
 8005390:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005394:	4573      	cmp	r3, lr
 8005396:	d316      	bcc.n	80053c6 <__multiply+0x72>
 8005398:	f104 0214 	add.w	r2, r4, #20
 800539c:	f108 0114 	add.w	r1, r8, #20
 80053a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80053a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	9201      	str	r2, [sp, #4]
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d80c      	bhi.n	80053cc <__multiply+0x78>
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	dd03      	ble.n	80053be <__multiply+0x6a>
 80053b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d05d      	beq.n	800547a <__multiply+0x126>
 80053be:	6106      	str	r6, [r0, #16]
 80053c0:	b003      	add	sp, #12
 80053c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c6:	f843 2b04 	str.w	r2, [r3], #4
 80053ca:	e7e3      	b.n	8005394 <__multiply+0x40>
 80053cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80053d0:	f1bb 0f00 	cmp.w	fp, #0
 80053d4:	d023      	beq.n	800541e <__multiply+0xca>
 80053d6:	4689      	mov	r9, r1
 80053d8:	46ac      	mov	ip, r5
 80053da:	f04f 0800 	mov.w	r8, #0
 80053de:	f859 4b04 	ldr.w	r4, [r9], #4
 80053e2:	f8dc a000 	ldr.w	sl, [ip]
 80053e6:	b2a3      	uxth	r3, r4
 80053e8:	fa1f fa8a 	uxth.w	sl, sl
 80053ec:	fb0b a303 	mla	r3, fp, r3, sl
 80053f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80053f4:	f8dc 4000 	ldr.w	r4, [ip]
 80053f8:	4443      	add	r3, r8
 80053fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80053fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8005402:	46e2      	mov	sl, ip
 8005404:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005408:	b29b      	uxth	r3, r3
 800540a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800540e:	454f      	cmp	r7, r9
 8005410:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005414:	f84a 3b04 	str.w	r3, [sl], #4
 8005418:	d82b      	bhi.n	8005472 <__multiply+0x11e>
 800541a:	f8cc 8004 	str.w	r8, [ip, #4]
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	3204      	adds	r2, #4
 8005422:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005426:	f1ba 0f00 	cmp.w	sl, #0
 800542a:	d020      	beq.n	800546e <__multiply+0x11a>
 800542c:	4689      	mov	r9, r1
 800542e:	46a8      	mov	r8, r5
 8005430:	f04f 0b00 	mov.w	fp, #0
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	f8b9 c000 	ldrh.w	ip, [r9]
 800543a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800543e:	b29b      	uxth	r3, r3
 8005440:	fb0a 440c 	mla	r4, sl, ip, r4
 8005444:	46c4      	mov	ip, r8
 8005446:	445c      	add	r4, fp
 8005448:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800544c:	f84c 3b04 	str.w	r3, [ip], #4
 8005450:	f859 3b04 	ldr.w	r3, [r9], #4
 8005454:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	fb0a b303 	mla	r3, sl, r3, fp
 800545e:	454f      	cmp	r7, r9
 8005460:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005464:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005468:	d805      	bhi.n	8005476 <__multiply+0x122>
 800546a:	f8c8 3004 	str.w	r3, [r8, #4]
 800546e:	3504      	adds	r5, #4
 8005470:	e79b      	b.n	80053aa <__multiply+0x56>
 8005472:	46d4      	mov	ip, sl
 8005474:	e7b3      	b.n	80053de <__multiply+0x8a>
 8005476:	46e0      	mov	r8, ip
 8005478:	e7dd      	b.n	8005436 <__multiply+0xe2>
 800547a:	3e01      	subs	r6, #1
 800547c:	e799      	b.n	80053b2 <__multiply+0x5e>
	...

08005480 <__pow5mult>:
 8005480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005484:	4615      	mov	r5, r2
 8005486:	f012 0203 	ands.w	r2, r2, #3
 800548a:	4606      	mov	r6, r0
 800548c:	460f      	mov	r7, r1
 800548e:	d007      	beq.n	80054a0 <__pow5mult+0x20>
 8005490:	4c1a      	ldr	r4, [pc, #104]	; (80054fc <__pow5mult+0x7c>)
 8005492:	3a01      	subs	r2, #1
 8005494:	2300      	movs	r3, #0
 8005496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800549a:	f7ff fec9 	bl	8005230 <__multadd>
 800549e:	4607      	mov	r7, r0
 80054a0:	10ad      	asrs	r5, r5, #2
 80054a2:	d027      	beq.n	80054f4 <__pow5mult+0x74>
 80054a4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80054a6:	b944      	cbnz	r4, 80054ba <__pow5mult+0x3a>
 80054a8:	f240 2171 	movw	r1, #625	; 0x271
 80054ac:	4630      	mov	r0, r6
 80054ae:	f7ff ff48 	bl	8005342 <__i2b>
 80054b2:	2300      	movs	r3, #0
 80054b4:	4604      	mov	r4, r0
 80054b6:	64b0      	str	r0, [r6, #72]	; 0x48
 80054b8:	6003      	str	r3, [r0, #0]
 80054ba:	f04f 0800 	mov.w	r8, #0
 80054be:	07eb      	lsls	r3, r5, #31
 80054c0:	d50a      	bpl.n	80054d8 <__pow5mult+0x58>
 80054c2:	4639      	mov	r1, r7
 80054c4:	4622      	mov	r2, r4
 80054c6:	4630      	mov	r0, r6
 80054c8:	f7ff ff44 	bl	8005354 <__multiply>
 80054cc:	4681      	mov	r9, r0
 80054ce:	4639      	mov	r1, r7
 80054d0:	4630      	mov	r0, r6
 80054d2:	f7ff fea4 	bl	800521e <_Bfree>
 80054d6:	464f      	mov	r7, r9
 80054d8:	106d      	asrs	r5, r5, #1
 80054da:	d00b      	beq.n	80054f4 <__pow5mult+0x74>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	b938      	cbnz	r0, 80054f0 <__pow5mult+0x70>
 80054e0:	4622      	mov	r2, r4
 80054e2:	4621      	mov	r1, r4
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7ff ff35 	bl	8005354 <__multiply>
 80054ea:	6020      	str	r0, [r4, #0]
 80054ec:	f8c0 8000 	str.w	r8, [r0]
 80054f0:	4604      	mov	r4, r0
 80054f2:	e7e4      	b.n	80054be <__pow5mult+0x3e>
 80054f4:	4638      	mov	r0, r7
 80054f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fa:	bf00      	nop
 80054fc:	08005ff0 	.word	0x08005ff0

08005500 <__lshift>:
 8005500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	460c      	mov	r4, r1
 8005506:	4607      	mov	r7, r0
 8005508:	4616      	mov	r6, r2
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005510:	eb0a 0903 	add.w	r9, sl, r3
 8005514:	6849      	ldr	r1, [r1, #4]
 8005516:	68a3      	ldr	r3, [r4, #8]
 8005518:	f109 0501 	add.w	r5, r9, #1
 800551c:	42ab      	cmp	r3, r5
 800551e:	db32      	blt.n	8005586 <__lshift+0x86>
 8005520:	4638      	mov	r0, r7
 8005522:	f7ff fe57 	bl	80051d4 <_Balloc>
 8005526:	2300      	movs	r3, #0
 8005528:	4680      	mov	r8, r0
 800552a:	461a      	mov	r2, r3
 800552c:	f100 0114 	add.w	r1, r0, #20
 8005530:	4553      	cmp	r3, sl
 8005532:	db2b      	blt.n	800558c <__lshift+0x8c>
 8005534:	6920      	ldr	r0, [r4, #16]
 8005536:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800553a:	f104 0314 	add.w	r3, r4, #20
 800553e:	f016 021f 	ands.w	r2, r6, #31
 8005542:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800554a:	d025      	beq.n	8005598 <__lshift+0x98>
 800554c:	2000      	movs	r0, #0
 800554e:	f1c2 0e20 	rsb	lr, r2, #32
 8005552:	468a      	mov	sl, r1
 8005554:	681e      	ldr	r6, [r3, #0]
 8005556:	4096      	lsls	r6, r2
 8005558:	4330      	orrs	r0, r6
 800555a:	f84a 0b04 	str.w	r0, [sl], #4
 800555e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005562:	459c      	cmp	ip, r3
 8005564:	fa20 f00e 	lsr.w	r0, r0, lr
 8005568:	d814      	bhi.n	8005594 <__lshift+0x94>
 800556a:	6048      	str	r0, [r1, #4]
 800556c:	b108      	cbz	r0, 8005572 <__lshift+0x72>
 800556e:	f109 0502 	add.w	r5, r9, #2
 8005572:	3d01      	subs	r5, #1
 8005574:	4638      	mov	r0, r7
 8005576:	f8c8 5010 	str.w	r5, [r8, #16]
 800557a:	4621      	mov	r1, r4
 800557c:	f7ff fe4f 	bl	800521e <_Bfree>
 8005580:	4640      	mov	r0, r8
 8005582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005586:	3101      	adds	r1, #1
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	e7c7      	b.n	800551c <__lshift+0x1c>
 800558c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005590:	3301      	adds	r3, #1
 8005592:	e7cd      	b.n	8005530 <__lshift+0x30>
 8005594:	4651      	mov	r1, sl
 8005596:	e7dc      	b.n	8005552 <__lshift+0x52>
 8005598:	3904      	subs	r1, #4
 800559a:	f853 2b04 	ldr.w	r2, [r3], #4
 800559e:	459c      	cmp	ip, r3
 80055a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80055a4:	d8f9      	bhi.n	800559a <__lshift+0x9a>
 80055a6:	e7e4      	b.n	8005572 <__lshift+0x72>

080055a8 <__mcmp>:
 80055a8:	6903      	ldr	r3, [r0, #16]
 80055aa:	690a      	ldr	r2, [r1, #16]
 80055ac:	b530      	push	{r4, r5, lr}
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	d10c      	bne.n	80055cc <__mcmp+0x24>
 80055b2:	0092      	lsls	r2, r2, #2
 80055b4:	3014      	adds	r0, #20
 80055b6:	3114      	adds	r1, #20
 80055b8:	1884      	adds	r4, r0, r2
 80055ba:	4411      	add	r1, r2
 80055bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80055c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80055c4:	4295      	cmp	r5, r2
 80055c6:	d003      	beq.n	80055d0 <__mcmp+0x28>
 80055c8:	d305      	bcc.n	80055d6 <__mcmp+0x2e>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd30      	pop	{r4, r5, pc}
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d3f3      	bcc.n	80055bc <__mcmp+0x14>
 80055d4:	e7fa      	b.n	80055cc <__mcmp+0x24>
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055da:	e7f7      	b.n	80055cc <__mcmp+0x24>

080055dc <__mdiff>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	460d      	mov	r5, r1
 80055e2:	4607      	mov	r7, r0
 80055e4:	4611      	mov	r1, r2
 80055e6:	4628      	mov	r0, r5
 80055e8:	4614      	mov	r4, r2
 80055ea:	f7ff ffdd 	bl	80055a8 <__mcmp>
 80055ee:	1e06      	subs	r6, r0, #0
 80055f0:	d108      	bne.n	8005604 <__mdiff+0x28>
 80055f2:	4631      	mov	r1, r6
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff fded 	bl	80051d4 <_Balloc>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005604:	bfa4      	itt	ge
 8005606:	4623      	movge	r3, r4
 8005608:	462c      	movge	r4, r5
 800560a:	4638      	mov	r0, r7
 800560c:	6861      	ldr	r1, [r4, #4]
 800560e:	bfa6      	itte	ge
 8005610:	461d      	movge	r5, r3
 8005612:	2600      	movge	r6, #0
 8005614:	2601      	movlt	r6, #1
 8005616:	f7ff fddd 	bl	80051d4 <_Balloc>
 800561a:	f04f 0e00 	mov.w	lr, #0
 800561e:	60c6      	str	r6, [r0, #12]
 8005620:	692b      	ldr	r3, [r5, #16]
 8005622:	6926      	ldr	r6, [r4, #16]
 8005624:	f104 0214 	add.w	r2, r4, #20
 8005628:	f105 0914 	add.w	r9, r5, #20
 800562c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005630:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005634:	f100 0114 	add.w	r1, r0, #20
 8005638:	f852 ab04 	ldr.w	sl, [r2], #4
 800563c:	f859 5b04 	ldr.w	r5, [r9], #4
 8005640:	fa1f f38a 	uxth.w	r3, sl
 8005644:	4473      	add	r3, lr
 8005646:	b2ac      	uxth	r4, r5
 8005648:	1b1b      	subs	r3, r3, r4
 800564a:	0c2c      	lsrs	r4, r5, #16
 800564c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005650:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005654:	b29b      	uxth	r3, r3
 8005656:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800565a:	45c8      	cmp	r8, r9
 800565c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005660:	4694      	mov	ip, r2
 8005662:	f841 4b04 	str.w	r4, [r1], #4
 8005666:	d8e7      	bhi.n	8005638 <__mdiff+0x5c>
 8005668:	45bc      	cmp	ip, r7
 800566a:	d304      	bcc.n	8005676 <__mdiff+0x9a>
 800566c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005670:	b183      	cbz	r3, 8005694 <__mdiff+0xb8>
 8005672:	6106      	str	r6, [r0, #16]
 8005674:	e7c4      	b.n	8005600 <__mdiff+0x24>
 8005676:	f85c 4b04 	ldr.w	r4, [ip], #4
 800567a:	b2a2      	uxth	r2, r4
 800567c:	4472      	add	r2, lr
 800567e:	1413      	asrs	r3, r2, #16
 8005680:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005684:	b292      	uxth	r2, r2
 8005686:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800568a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800568e:	f841 2b04 	str.w	r2, [r1], #4
 8005692:	e7e9      	b.n	8005668 <__mdiff+0x8c>
 8005694:	3e01      	subs	r6, #1
 8005696:	e7e9      	b.n	800566c <__mdiff+0x90>

08005698 <__d2b>:
 8005698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800569c:	461c      	mov	r4, r3
 800569e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80056a2:	2101      	movs	r1, #1
 80056a4:	4690      	mov	r8, r2
 80056a6:	f7ff fd95 	bl	80051d4 <_Balloc>
 80056aa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80056ae:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80056b2:	4607      	mov	r7, r0
 80056b4:	bb34      	cbnz	r4, 8005704 <__d2b+0x6c>
 80056b6:	9201      	str	r2, [sp, #4]
 80056b8:	f1b8 0200 	subs.w	r2, r8, #0
 80056bc:	d027      	beq.n	800570e <__d2b+0x76>
 80056be:	a802      	add	r0, sp, #8
 80056c0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80056c4:	f7ff fe0e 	bl	80052e4 <__lo0bits>
 80056c8:	9900      	ldr	r1, [sp, #0]
 80056ca:	b1f0      	cbz	r0, 800570a <__d2b+0x72>
 80056cc:	9a01      	ldr	r2, [sp, #4]
 80056ce:	f1c0 0320 	rsb	r3, r0, #32
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	430b      	orrs	r3, r1
 80056d8:	40c2      	lsrs	r2, r0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	9201      	str	r2, [sp, #4]
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf14      	ite	ne
 80056e4:	2102      	movne	r1, #2
 80056e6:	2101      	moveq	r1, #1
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	6139      	str	r1, [r7, #16]
 80056ec:	b1c4      	cbz	r4, 8005720 <__d2b+0x88>
 80056ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80056f2:	4404      	add	r4, r0
 80056f4:	6034      	str	r4, [r6, #0]
 80056f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056fa:	6028      	str	r0, [r5, #0]
 80056fc:	4638      	mov	r0, r7
 80056fe:	b002      	add	sp, #8
 8005700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005704:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005708:	e7d5      	b.n	80056b6 <__d2b+0x1e>
 800570a:	6179      	str	r1, [r7, #20]
 800570c:	e7e7      	b.n	80056de <__d2b+0x46>
 800570e:	a801      	add	r0, sp, #4
 8005710:	f7ff fde8 	bl	80052e4 <__lo0bits>
 8005714:	2101      	movs	r1, #1
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	6139      	str	r1, [r7, #16]
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	3020      	adds	r0, #32
 800571e:	e7e5      	b.n	80056ec <__d2b+0x54>
 8005720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005724:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005728:	6030      	str	r0, [r6, #0]
 800572a:	6918      	ldr	r0, [r3, #16]
 800572c:	f7ff fdbb 	bl	80052a6 <__hi0bits>
 8005730:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005734:	e7e1      	b.n	80056fa <__d2b+0x62>
	...

08005738 <frexp>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	4616      	mov	r6, r2
 800573c:	2700      	movs	r7, #0
 800573e:	6037      	str	r7, [r6, #0]
 8005740:	4f14      	ldr	r7, [pc, #80]	; (8005794 <frexp+0x5c>)
 8005742:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005746:	42bb      	cmp	r3, r7
 8005748:	4604      	mov	r4, r0
 800574a:	460d      	mov	r5, r1
 800574c:	460a      	mov	r2, r1
 800574e:	dc1e      	bgt.n	800578e <frexp+0x56>
 8005750:	4607      	mov	r7, r0
 8005752:	431f      	orrs	r7, r3
 8005754:	d01b      	beq.n	800578e <frexp+0x56>
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575a:	da0a      	bge.n	8005772 <frexp+0x3a>
 800575c:	2200      	movs	r2, #0
 800575e:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <frexp+0x60>)
 8005760:	f7fa feba 	bl	80004d8 <__aeabi_dmul>
 8005764:	460a      	mov	r2, r1
 8005766:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800576a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800576e:	4604      	mov	r4, r0
 8005770:	6031      	str	r1, [r6, #0]
 8005772:	6831      	ldr	r1, [r6, #0]
 8005774:	151b      	asrs	r3, r3, #20
 8005776:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800577a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800577e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8005782:	440b      	add	r3, r1
 8005784:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8005788:	6033      	str	r3, [r6, #0]
 800578a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005794:	7fefffff 	.word	0x7fefffff
 8005798:	43500000 	.word	0x43500000

0800579c <_sbrk_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	2300      	movs	r3, #0
 80057a0:	4c05      	ldr	r4, [pc, #20]	; (80057b8 <_sbrk_r+0x1c>)
 80057a2:	4605      	mov	r5, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	f7fc fffc 	bl	80027a4 <_sbrk>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_sbrk_r+0x1a>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_sbrk_r+0x1a>
 80057b4:	602b      	str	r3, [r5, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20000c24 	.word	0x20000c24

080057bc <strncpy>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4604      	mov	r4, r0
 80057c0:	3901      	subs	r1, #1
 80057c2:	b902      	cbnz	r2, 80057c6 <strncpy+0xa>
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	4623      	mov	r3, r4
 80057c8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80057cc:	1e56      	subs	r6, r2, #1
 80057ce:	f803 5b01 	strb.w	r5, [r3], #1
 80057d2:	b92d      	cbnz	r5, 80057e0 <strncpy+0x24>
 80057d4:	4414      	add	r4, r2
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	d0f4      	beq.n	80057c4 <strncpy+0x8>
 80057da:	f803 5b01 	strb.w	r5, [r3], #1
 80057de:	e7fa      	b.n	80057d6 <strncpy+0x1a>
 80057e0:	461c      	mov	r4, r3
 80057e2:	4632      	mov	r2, r6
 80057e4:	e7ed      	b.n	80057c2 <strncpy+0x6>

080057e6 <__ssprint_r>:
 80057e6:	6893      	ldr	r3, [r2, #8]
 80057e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	4681      	mov	r9, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	4616      	mov	r6, r2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d05e      	beq.n	80058b4 <__ssprint_r+0xce>
 80057f6:	f04f 0b00 	mov.w	fp, #0
 80057fa:	465f      	mov	r7, fp
 80057fc:	f8d2 a000 	ldr.w	sl, [r2]
 8005800:	b357      	cbz	r7, 8005858 <__ssprint_r+0x72>
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	429f      	cmp	r7, r3
 8005806:	d340      	bcc.n	800588a <__ssprint_r+0xa4>
 8005808:	89a2      	ldrh	r2, [r4, #12]
 800580a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800580e:	d03c      	beq.n	800588a <__ssprint_r+0xa4>
 8005810:	2302      	movs	r3, #2
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	6921      	ldr	r1, [r4, #16]
 8005816:	eba5 0801 	sub.w	r8, r5, r1
 800581a:	6965      	ldr	r5, [r4, #20]
 800581c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005820:	fb95 f5f3 	sdiv	r5, r5, r3
 8005824:	f108 0301 	add.w	r3, r8, #1
 8005828:	443b      	add	r3, r7
 800582a:	429d      	cmp	r5, r3
 800582c:	bf38      	it	cc
 800582e:	461d      	movcc	r5, r3
 8005830:	0553      	lsls	r3, r2, #21
 8005832:	d544      	bpl.n	80058be <__ssprint_r+0xd8>
 8005834:	4629      	mov	r1, r5
 8005836:	4648      	mov	r0, r9
 8005838:	f7ff fa70 	bl	8004d1c <_malloc_r>
 800583c:	b988      	cbnz	r0, 8005862 <__ssprint_r+0x7c>
 800583e:	230c      	movs	r3, #12
 8005840:	f8c9 3000 	str.w	r3, [r9]
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800584a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	2300      	movs	r3, #0
 8005852:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8005856:	e02f      	b.n	80058b8 <__ssprint_r+0xd2>
 8005858:	e9da b700 	ldrd	fp, r7, [sl]
 800585c:	f10a 0a08 	add.w	sl, sl, #8
 8005860:	e7ce      	b.n	8005800 <__ssprint_r+0x1a>
 8005862:	4642      	mov	r2, r8
 8005864:	6921      	ldr	r1, [r4, #16]
 8005866:	9001      	str	r0, [sp, #4]
 8005868:	f7ff fc9c 	bl	80051a4 <memcpy>
 800586c:	89a2      	ldrh	r2, [r4, #12]
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005878:	81a2      	strh	r2, [r4, #12]
 800587a:	6123      	str	r3, [r4, #16]
 800587c:	4443      	add	r3, r8
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	463b      	mov	r3, r7
 8005882:	6165      	str	r5, [r4, #20]
 8005884:	eba5 0508 	sub.w	r5, r5, r8
 8005888:	60a5      	str	r5, [r4, #8]
 800588a:	42bb      	cmp	r3, r7
 800588c:	bf28      	it	cs
 800588e:	463b      	movcs	r3, r7
 8005890:	4659      	mov	r1, fp
 8005892:	461a      	mov	r2, r3
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	f000 f8bf 	bl	8005a1a <memmove>
 800589c:	68a2      	ldr	r2, [r4, #8]
 800589e:	9b01      	ldr	r3, [sp, #4]
 80058a0:	1ad2      	subs	r2, r2, r3
 80058a2:	60a2      	str	r2, [r4, #8]
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	4413      	add	r3, r2
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	68b3      	ldr	r3, [r6, #8]
 80058ac:	1bdf      	subs	r7, r3, r7
 80058ae:	60b7      	str	r7, [r6, #8]
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	d1d1      	bne.n	8005858 <__ssprint_r+0x72>
 80058b4:	2000      	movs	r0, #0
 80058b6:	6070      	str	r0, [r6, #4]
 80058b8:	b003      	add	sp, #12
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058be:	462a      	mov	r2, r5
 80058c0:	4648      	mov	r0, r9
 80058c2:	f000 f8c3 	bl	8005a4c <_realloc_r>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d1d6      	bne.n	800587a <__ssprint_r+0x94>
 80058cc:	6921      	ldr	r1, [r4, #16]
 80058ce:	4648      	mov	r0, r9
 80058d0:	f7ff f958 	bl	8004b84 <_free_r>
 80058d4:	e7b3      	b.n	800583e <__ssprint_r+0x58>

080058d6 <sysconf>:
 80058d6:	2808      	cmp	r0, #8
 80058d8:	b508      	push	{r3, lr}
 80058da:	d006      	beq.n	80058ea <sysconf+0x14>
 80058dc:	f7fd f848 	bl	8002970 <__errno>
 80058e0:	2316      	movs	r3, #22
 80058e2:	6003      	str	r3, [r0, #0]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e8:	bd08      	pop	{r3, pc}
 80058ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80058ee:	e7fb      	b.n	80058e8 <sysconf+0x12>

080058f0 <__register_exitproc>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	4c26      	ldr	r4, [pc, #152]	; (8005990 <__register_exitproc+0xa0>)
 80058f6:	4606      	mov	r6, r0
 80058f8:	6820      	ldr	r0, [r4, #0]
 80058fa:	4698      	mov	r8, r3
 80058fc:	460f      	mov	r7, r1
 80058fe:	4691      	mov	r9, r2
 8005900:	f7ff fa0a 	bl	8004d18 <__retarget_lock_acquire_recursive>
 8005904:	4b23      	ldr	r3, [pc, #140]	; (8005994 <__register_exitproc+0xa4>)
 8005906:	681d      	ldr	r5, [r3, #0]
 8005908:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800590c:	b918      	cbnz	r0, 8005916 <__register_exitproc+0x26>
 800590e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8005912:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8005916:	6843      	ldr	r3, [r0, #4]
 8005918:	2b1f      	cmp	r3, #31
 800591a:	dd19      	ble.n	8005950 <__register_exitproc+0x60>
 800591c:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <__register_exitproc+0xa8>)
 800591e:	b933      	cbnz	r3, 800592e <__register_exitproc+0x3e>
 8005920:	6820      	ldr	r0, [r4, #0]
 8005922:	f7ff f9fa 	bl	8004d1a <__retarget_lock_release_recursive>
 8005926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005932:	f3af 8000 	nop.w
 8005936:	2800      	cmp	r0, #0
 8005938:	d0f2      	beq.n	8005920 <__register_exitproc+0x30>
 800593a:	2200      	movs	r2, #0
 800593c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8005940:	6042      	str	r2, [r0, #4]
 8005942:	6003      	str	r3, [r0, #0]
 8005944:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8005948:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800594c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8005950:	6843      	ldr	r3, [r0, #4]
 8005952:	b19e      	cbz	r6, 800597c <__register_exitproc+0x8c>
 8005954:	2201      	movs	r2, #1
 8005956:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800595a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800595e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8005962:	409a      	lsls	r2, r3
 8005964:	4311      	orrs	r1, r2
 8005966:	2e02      	cmp	r6, #2
 8005968:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800596c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8005970:	bf02      	ittt	eq
 8005972:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8005976:	430a      	orreq	r2, r1
 8005978:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	3302      	adds	r3, #2
 8005980:	6042      	str	r2, [r0, #4]
 8005982:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	f7ff f9c7 	bl	8004d1a <__retarget_lock_release_recursive>
 800598c:	2000      	movs	r0, #0
 800598e:	e7cc      	b.n	800592a <__register_exitproc+0x3a>
 8005990:	20000440 	.word	0x20000440
 8005994:	08005e94 	.word	0x08005e94
 8005998:	00000000 	.word	0x00000000

0800599c <_calloc_r>:
 800599c:	b510      	push	{r4, lr}
 800599e:	4351      	muls	r1, r2
 80059a0:	f7ff f9bc 	bl	8004d1c <_malloc_r>
 80059a4:	4604      	mov	r4, r0
 80059a6:	b198      	cbz	r0, 80059d0 <_calloc_r+0x34>
 80059a8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80059ac:	f022 0203 	bic.w	r2, r2, #3
 80059b0:	3a04      	subs	r2, #4
 80059b2:	2a24      	cmp	r2, #36	; 0x24
 80059b4:	d81b      	bhi.n	80059ee <_calloc_r+0x52>
 80059b6:	2a13      	cmp	r2, #19
 80059b8:	d917      	bls.n	80059ea <_calloc_r+0x4e>
 80059ba:	2100      	movs	r1, #0
 80059bc:	2a1b      	cmp	r2, #27
 80059be:	e9c0 1100 	strd	r1, r1, [r0]
 80059c2:	d807      	bhi.n	80059d4 <_calloc_r+0x38>
 80059c4:	f100 0308 	add.w	r3, r0, #8
 80059c8:	2200      	movs	r2, #0
 80059ca:	e9c3 2200 	strd	r2, r2, [r3]
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	4620      	mov	r0, r4
 80059d2:	bd10      	pop	{r4, pc}
 80059d4:	2a24      	cmp	r2, #36	; 0x24
 80059d6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80059da:	bf11      	iteee	ne
 80059dc:	f100 0310 	addne.w	r3, r0, #16
 80059e0:	6101      	streq	r1, [r0, #16]
 80059e2:	f100 0318 	addeq.w	r3, r0, #24
 80059e6:	6141      	streq	r1, [r0, #20]
 80059e8:	e7ee      	b.n	80059c8 <_calloc_r+0x2c>
 80059ea:	4603      	mov	r3, r0
 80059ec:	e7ec      	b.n	80059c8 <_calloc_r+0x2c>
 80059ee:	2100      	movs	r1, #0
 80059f0:	f7fc ffe8 	bl	80029c4 <memset>
 80059f4:	e7ec      	b.n	80059d0 <_calloc_r+0x34>

080059f6 <__ascii_mbtowc>:
 80059f6:	b082      	sub	sp, #8
 80059f8:	b901      	cbnz	r1, 80059fc <__ascii_mbtowc+0x6>
 80059fa:	a901      	add	r1, sp, #4
 80059fc:	b142      	cbz	r2, 8005a10 <__ascii_mbtowc+0x1a>
 80059fe:	b14b      	cbz	r3, 8005a14 <__ascii_mbtowc+0x1e>
 8005a00:	7813      	ldrb	r3, [r2, #0]
 8005a02:	600b      	str	r3, [r1, #0]
 8005a04:	7812      	ldrb	r2, [r2, #0]
 8005a06:	1c10      	adds	r0, r2, #0
 8005a08:	bf18      	it	ne
 8005a0a:	2001      	movne	r0, #1
 8005a0c:	b002      	add	sp, #8
 8005a0e:	4770      	bx	lr
 8005a10:	4610      	mov	r0, r2
 8005a12:	e7fb      	b.n	8005a0c <__ascii_mbtowc+0x16>
 8005a14:	f06f 0001 	mvn.w	r0, #1
 8005a18:	e7f8      	b.n	8005a0c <__ascii_mbtowc+0x16>

08005a1a <memmove>:
 8005a1a:	4288      	cmp	r0, r1
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	eb01 0302 	add.w	r3, r1, r2
 8005a22:	d807      	bhi.n	8005a34 <memmove+0x1a>
 8005a24:	1e42      	subs	r2, r0, #1
 8005a26:	4299      	cmp	r1, r3
 8005a28:	d00a      	beq.n	8005a40 <memmove+0x26>
 8005a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a32:	e7f8      	b.n	8005a26 <memmove+0xc>
 8005a34:	4283      	cmp	r3, r0
 8005a36:	d9f5      	bls.n	8005a24 <memmove+0xa>
 8005a38:	1881      	adds	r1, r0, r2
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	42d3      	cmn	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <memmove+0x28>
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a4a:	e7f7      	b.n	8005a3c <memmove+0x22>

08005a4c <_realloc_r>:
 8005a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	4682      	mov	sl, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	b929      	cbnz	r1, 8005a62 <_realloc_r+0x16>
 8005a56:	4611      	mov	r1, r2
 8005a58:	b003      	add	sp, #12
 8005a5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5e:	f7ff b95d 	b.w	8004d1c <_malloc_r>
 8005a62:	9201      	str	r2, [sp, #4]
 8005a64:	f7ff fbaa 	bl	80051bc <__malloc_lock>
 8005a68:	9a01      	ldr	r2, [sp, #4]
 8005a6a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005a6e:	f102 080b 	add.w	r8, r2, #11
 8005a72:	f1b8 0f16 	cmp.w	r8, #22
 8005a76:	f1a4 0908 	sub.w	r9, r4, #8
 8005a7a:	f025 0603 	bic.w	r6, r5, #3
 8005a7e:	d90b      	bls.n	8005a98 <_realloc_r+0x4c>
 8005a80:	f038 0807 	bics.w	r8, r8, #7
 8005a84:	d50a      	bpl.n	8005a9c <_realloc_r+0x50>
 8005a86:	230c      	movs	r3, #12
 8005a88:	f04f 0b00 	mov.w	fp, #0
 8005a8c:	f8ca 3000 	str.w	r3, [sl]
 8005a90:	4658      	mov	r0, fp
 8005a92:	b003      	add	sp, #12
 8005a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a98:	f04f 0810 	mov.w	r8, #16
 8005a9c:	4590      	cmp	r8, r2
 8005a9e:	d3f2      	bcc.n	8005a86 <_realloc_r+0x3a>
 8005aa0:	45b0      	cmp	r8, r6
 8005aa2:	f340 8175 	ble.w	8005d90 <_realloc_r+0x344>
 8005aa6:	49ab      	ldr	r1, [pc, #684]	; (8005d54 <_realloc_r+0x308>)
 8005aa8:	eb09 0306 	add.w	r3, r9, r6
 8005aac:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005ab0:	6858      	ldr	r0, [r3, #4]
 8005ab2:	459c      	cmp	ip, r3
 8005ab4:	9101      	str	r1, [sp, #4]
 8005ab6:	d005      	beq.n	8005ac4 <_realloc_r+0x78>
 8005ab8:	f020 0101 	bic.w	r1, r0, #1
 8005abc:	4419      	add	r1, r3
 8005abe:	6849      	ldr	r1, [r1, #4]
 8005ac0:	07cf      	lsls	r7, r1, #31
 8005ac2:	d447      	bmi.n	8005b54 <_realloc_r+0x108>
 8005ac4:	f020 0003 	bic.w	r0, r0, #3
 8005ac8:	459c      	cmp	ip, r3
 8005aca:	eb06 0700 	add.w	r7, r6, r0
 8005ace:	d119      	bne.n	8005b04 <_realloc_r+0xb8>
 8005ad0:	f108 0110 	add.w	r1, r8, #16
 8005ad4:	42b9      	cmp	r1, r7
 8005ad6:	dc3f      	bgt.n	8005b58 <_realloc_r+0x10c>
 8005ad8:	9a01      	ldr	r2, [sp, #4]
 8005ada:	eba7 0708 	sub.w	r7, r7, r8
 8005ade:	eb09 0308 	add.w	r3, r9, r8
 8005ae2:	f047 0701 	orr.w	r7, r7, #1
 8005ae6:	6093      	str	r3, [r2, #8]
 8005ae8:	605f      	str	r7, [r3, #4]
 8005aea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005aee:	4650      	mov	r0, sl
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	ea43 0308 	orr.w	r3, r3, r8
 8005af8:	f844 3c04 	str.w	r3, [r4, #-4]
 8005afc:	f7ff fb64 	bl	80051c8 <__malloc_unlock>
 8005b00:	46a3      	mov	fp, r4
 8005b02:	e7c5      	b.n	8005a90 <_realloc_r+0x44>
 8005b04:	45b8      	cmp	r8, r7
 8005b06:	dc27      	bgt.n	8005b58 <_realloc_r+0x10c>
 8005b08:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	6093      	str	r3, [r2, #8]
 8005b10:	eba7 0008 	sub.w	r0, r7, r8
 8005b14:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005b18:	280f      	cmp	r0, #15
 8005b1a:	f002 0201 	and.w	r2, r2, #1
 8005b1e:	eb09 0307 	add.w	r3, r9, r7
 8005b22:	f240 8137 	bls.w	8005d94 <_realloc_r+0x348>
 8005b26:	eb09 0108 	add.w	r1, r9, r8
 8005b2a:	ea48 0202 	orr.w	r2, r8, r2
 8005b2e:	f040 0001 	orr.w	r0, r0, #1
 8005b32:	f8c9 2004 	str.w	r2, [r9, #4]
 8005b36:	6048      	str	r0, [r1, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	3108      	adds	r1, #8
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	4650      	mov	r0, sl
 8005b44:	f7ff f81e 	bl	8004b84 <_free_r>
 8005b48:	4650      	mov	r0, sl
 8005b4a:	f7ff fb3d 	bl	80051c8 <__malloc_unlock>
 8005b4e:	f109 0b08 	add.w	fp, r9, #8
 8005b52:	e79d      	b.n	8005a90 <_realloc_r+0x44>
 8005b54:	2000      	movs	r0, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	07e9      	lsls	r1, r5, #31
 8005b5a:	f100 80c9 	bmi.w	8005cf0 <_realloc_r+0x2a4>
 8005b5e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005b62:	eba9 0505 	sub.w	r5, r9, r5
 8005b66:	6869      	ldr	r1, [r5, #4]
 8005b68:	f021 0103 	bic.w	r1, r1, #3
 8005b6c:	eb01 0b06 	add.w	fp, r1, r6
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8088 	beq.w	8005c86 <_realloc_r+0x23a>
 8005b76:	459c      	cmp	ip, r3
 8005b78:	eb00 070b 	add.w	r7, r0, fp
 8005b7c:	d14a      	bne.n	8005c14 <_realloc_r+0x1c8>
 8005b7e:	f108 0310 	add.w	r3, r8, #16
 8005b82:	42bb      	cmp	r3, r7
 8005b84:	dc7f      	bgt.n	8005c86 <_realloc_r+0x23a>
 8005b86:	46ab      	mov	fp, r5
 8005b88:	68eb      	ldr	r3, [r5, #12]
 8005b8a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8005b8e:	60d3      	str	r3, [r2, #12]
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	1f32      	subs	r2, r6, #4
 8005b94:	2a24      	cmp	r2, #36	; 0x24
 8005b96:	d838      	bhi.n	8005c0a <_realloc_r+0x1be>
 8005b98:	2a13      	cmp	r2, #19
 8005b9a:	d934      	bls.n	8005c06 <_realloc_r+0x1ba>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	2a1b      	cmp	r2, #27
 8005ba0:	60ab      	str	r3, [r5, #8]
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	60eb      	str	r3, [r5, #12]
 8005ba6:	d81b      	bhi.n	8005be0 <_realloc_r+0x194>
 8005ba8:	3408      	adds	r4, #8
 8005baa:	f105 0310 	add.w	r3, r5, #16
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	68a2      	ldr	r2, [r4, #8]
 8005bb8:	609a      	str	r2, [r3, #8]
 8005bba:	9a01      	ldr	r2, [sp, #4]
 8005bbc:	eba7 0708 	sub.w	r7, r7, r8
 8005bc0:	eb05 0308 	add.w	r3, r5, r8
 8005bc4:	f047 0701 	orr.w	r7, r7, #1
 8005bc8:	6093      	str	r3, [r2, #8]
 8005bca:	605f      	str	r7, [r3, #4]
 8005bcc:	686b      	ldr	r3, [r5, #4]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	ea43 0308 	orr.w	r3, r3, r8
 8005bd6:	606b      	str	r3, [r5, #4]
 8005bd8:	4650      	mov	r0, sl
 8005bda:	f7ff faf5 	bl	80051c8 <__malloc_unlock>
 8005bde:	e757      	b.n	8005a90 <_realloc_r+0x44>
 8005be0:	68a3      	ldr	r3, [r4, #8]
 8005be2:	2a24      	cmp	r2, #36	; 0x24
 8005be4:	612b      	str	r3, [r5, #16]
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	bf18      	it	ne
 8005bea:	3410      	addne	r4, #16
 8005bec:	616b      	str	r3, [r5, #20]
 8005bee:	bf09      	itett	eq
 8005bf0:	6923      	ldreq	r3, [r4, #16]
 8005bf2:	f105 0318 	addne.w	r3, r5, #24
 8005bf6:	61ab      	streq	r3, [r5, #24]
 8005bf8:	6962      	ldreq	r2, [r4, #20]
 8005bfa:	bf02      	ittt	eq
 8005bfc:	f105 0320 	addeq.w	r3, r5, #32
 8005c00:	61ea      	streq	r2, [r5, #28]
 8005c02:	3418      	addeq	r4, #24
 8005c04:	e7d3      	b.n	8005bae <_realloc_r+0x162>
 8005c06:	465b      	mov	r3, fp
 8005c08:	e7d1      	b.n	8005bae <_realloc_r+0x162>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4658      	mov	r0, fp
 8005c0e:	f7ff ff04 	bl	8005a1a <memmove>
 8005c12:	e7d2      	b.n	8005bba <_realloc_r+0x16e>
 8005c14:	45b8      	cmp	r8, r7
 8005c16:	dc36      	bgt.n	8005c86 <_realloc_r+0x23a>
 8005c18:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	60da      	str	r2, [r3, #12]
 8005c20:	6093      	str	r3, [r2, #8]
 8005c22:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005c26:	68eb      	ldr	r3, [r5, #12]
 8005c28:	60d3      	str	r3, [r2, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	1f32      	subs	r2, r6, #4
 8005c2e:	2a24      	cmp	r2, #36	; 0x24
 8005c30:	d825      	bhi.n	8005c7e <_realloc_r+0x232>
 8005c32:	2a13      	cmp	r2, #19
 8005c34:	d908      	bls.n	8005c48 <_realloc_r+0x1fc>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	2a1b      	cmp	r2, #27
 8005c3a:	60ab      	str	r3, [r5, #8]
 8005c3c:	6863      	ldr	r3, [r4, #4]
 8005c3e:	60eb      	str	r3, [r5, #12]
 8005c40:	d80a      	bhi.n	8005c58 <_realloc_r+0x20c>
 8005c42:	3408      	adds	r4, #8
 8005c44:	f105 0010 	add.w	r0, r5, #16
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	6003      	str	r3, [r0, #0]
 8005c4c:	6863      	ldr	r3, [r4, #4]
 8005c4e:	6043      	str	r3, [r0, #4]
 8005c50:	68a3      	ldr	r3, [r4, #8]
 8005c52:	6083      	str	r3, [r0, #8]
 8005c54:	46a9      	mov	r9, r5
 8005c56:	e75b      	b.n	8005b10 <_realloc_r+0xc4>
 8005c58:	68a3      	ldr	r3, [r4, #8]
 8005c5a:	2a24      	cmp	r2, #36	; 0x24
 8005c5c:	612b      	str	r3, [r5, #16]
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	bf18      	it	ne
 8005c62:	f105 0018 	addne.w	r0, r5, #24
 8005c66:	616b      	str	r3, [r5, #20]
 8005c68:	bf09      	itett	eq
 8005c6a:	6923      	ldreq	r3, [r4, #16]
 8005c6c:	3410      	addne	r4, #16
 8005c6e:	61ab      	streq	r3, [r5, #24]
 8005c70:	6963      	ldreq	r3, [r4, #20]
 8005c72:	bf02      	ittt	eq
 8005c74:	f105 0020 	addeq.w	r0, r5, #32
 8005c78:	61eb      	streq	r3, [r5, #28]
 8005c7a:	3418      	addeq	r4, #24
 8005c7c:	e7e4      	b.n	8005c48 <_realloc_r+0x1fc>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	f7ff fecb 	bl	8005a1a <memmove>
 8005c84:	e7e6      	b.n	8005c54 <_realloc_r+0x208>
 8005c86:	45d8      	cmp	r8, fp
 8005c88:	dc32      	bgt.n	8005cf0 <_realloc_r+0x2a4>
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	68eb      	ldr	r3, [r5, #12]
 8005c8e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005c92:	60d3      	str	r3, [r2, #12]
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	1f32      	subs	r2, r6, #4
 8005c98:	2a24      	cmp	r2, #36	; 0x24
 8005c9a:	d825      	bhi.n	8005ce8 <_realloc_r+0x29c>
 8005c9c:	2a13      	cmp	r2, #19
 8005c9e:	d908      	bls.n	8005cb2 <_realloc_r+0x266>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	2a1b      	cmp	r2, #27
 8005ca4:	60ab      	str	r3, [r5, #8]
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	60eb      	str	r3, [r5, #12]
 8005caa:	d80a      	bhi.n	8005cc2 <_realloc_r+0x276>
 8005cac:	3408      	adds	r4, #8
 8005cae:	f105 0010 	add.w	r0, r5, #16
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	6003      	str	r3, [r0, #0]
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	6043      	str	r3, [r0, #4]
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	6083      	str	r3, [r0, #8]
 8005cbe:	465f      	mov	r7, fp
 8005cc0:	e7c8      	b.n	8005c54 <_realloc_r+0x208>
 8005cc2:	68a3      	ldr	r3, [r4, #8]
 8005cc4:	2a24      	cmp	r2, #36	; 0x24
 8005cc6:	612b      	str	r3, [r5, #16]
 8005cc8:	68e3      	ldr	r3, [r4, #12]
 8005cca:	bf18      	it	ne
 8005ccc:	f105 0018 	addne.w	r0, r5, #24
 8005cd0:	616b      	str	r3, [r5, #20]
 8005cd2:	bf09      	itett	eq
 8005cd4:	6923      	ldreq	r3, [r4, #16]
 8005cd6:	3410      	addne	r4, #16
 8005cd8:	61ab      	streq	r3, [r5, #24]
 8005cda:	6963      	ldreq	r3, [r4, #20]
 8005cdc:	bf02      	ittt	eq
 8005cde:	f105 0020 	addeq.w	r0, r5, #32
 8005ce2:	61eb      	streq	r3, [r5, #28]
 8005ce4:	3418      	addeq	r4, #24
 8005ce6:	e7e4      	b.n	8005cb2 <_realloc_r+0x266>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	f7ff fe96 	bl	8005a1a <memmove>
 8005cee:	e7e6      	b.n	8005cbe <_realloc_r+0x272>
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	f7ff f812 	bl	8004d1c <_malloc_r>
 8005cf8:	4683      	mov	fp, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	f43f af6c 	beq.w	8005bd8 <_realloc_r+0x18c>
 8005d00:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005d04:	f1a0 0208 	sub.w	r2, r0, #8
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	444b      	add	r3, r9
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d105      	bne.n	8005d1e <_realloc_r+0x2d2>
 8005d12:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005d16:	f027 0703 	bic.w	r7, r7, #3
 8005d1a:	4437      	add	r7, r6
 8005d1c:	e6f8      	b.n	8005b10 <_realloc_r+0xc4>
 8005d1e:	1f32      	subs	r2, r6, #4
 8005d20:	2a24      	cmp	r2, #36	; 0x24
 8005d22:	d831      	bhi.n	8005d88 <_realloc_r+0x33c>
 8005d24:	2a13      	cmp	r2, #19
 8005d26:	d92c      	bls.n	8005d82 <_realloc_r+0x336>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	2a1b      	cmp	r2, #27
 8005d2c:	6003      	str	r3, [r0, #0]
 8005d2e:	6863      	ldr	r3, [r4, #4]
 8005d30:	6043      	str	r3, [r0, #4]
 8005d32:	d811      	bhi.n	8005d58 <_realloc_r+0x30c>
 8005d34:	f104 0208 	add.w	r2, r4, #8
 8005d38:	f100 0308 	add.w	r3, r0, #8
 8005d3c:	6811      	ldr	r1, [r2, #0]
 8005d3e:	6019      	str	r1, [r3, #0]
 8005d40:	6851      	ldr	r1, [r2, #4]
 8005d42:	6059      	str	r1, [r3, #4]
 8005d44:	6892      	ldr	r2, [r2, #8]
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f7fe ff1a 	bl	8004b84 <_free_r>
 8005d50:	e742      	b.n	8005bd8 <_realloc_r+0x18c>
 8005d52:	bf00      	nop
 8005d54:	20000444 	.word	0x20000444
 8005d58:	68a3      	ldr	r3, [r4, #8]
 8005d5a:	2a24      	cmp	r2, #36	; 0x24
 8005d5c:	6083      	str	r3, [r0, #8]
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	bf18      	it	ne
 8005d62:	f104 0210 	addne.w	r2, r4, #16
 8005d66:	60c3      	str	r3, [r0, #12]
 8005d68:	bf09      	itett	eq
 8005d6a:	6923      	ldreq	r3, [r4, #16]
 8005d6c:	f100 0310 	addne.w	r3, r0, #16
 8005d70:	6103      	streq	r3, [r0, #16]
 8005d72:	6961      	ldreq	r1, [r4, #20]
 8005d74:	bf02      	ittt	eq
 8005d76:	f104 0218 	addeq.w	r2, r4, #24
 8005d7a:	f100 0318 	addeq.w	r3, r0, #24
 8005d7e:	6141      	streq	r1, [r0, #20]
 8005d80:	e7dc      	b.n	8005d3c <_realloc_r+0x2f0>
 8005d82:	4603      	mov	r3, r0
 8005d84:	4622      	mov	r2, r4
 8005d86:	e7d9      	b.n	8005d3c <_realloc_r+0x2f0>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	f7ff fe46 	bl	8005a1a <memmove>
 8005d8e:	e7db      	b.n	8005d48 <_realloc_r+0x2fc>
 8005d90:	4637      	mov	r7, r6
 8005d92:	e6bd      	b.n	8005b10 <_realloc_r+0xc4>
 8005d94:	4317      	orrs	r7, r2
 8005d96:	f8c9 7004 	str.w	r7, [r9, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	f042 0201 	orr.w	r2, r2, #1
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	e6d1      	b.n	8005b48 <_realloc_r+0xfc>

08005da4 <__ascii_wctomb>:
 8005da4:	b149      	cbz	r1, 8005dba <__ascii_wctomb+0x16>
 8005da6:	2aff      	cmp	r2, #255	; 0xff
 8005da8:	bf8b      	itete	hi
 8005daa:	238a      	movhi	r3, #138	; 0x8a
 8005dac:	700a      	strbls	r2, [r1, #0]
 8005dae:	6003      	strhi	r3, [r0, #0]
 8005db0:	2001      	movls	r0, #1
 8005db2:	bf88      	it	hi
 8005db4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005db8:	4770      	bx	lr
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4770      	bx	lr
	...

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
