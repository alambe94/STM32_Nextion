
STM32_Nextion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08005ca8  08005ca8  00015ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009c0  20000000  08005fec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000290  200009c0  080069ac  000209c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c50  080069ac  00020c50  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a7e7  00000000  00000000  000209e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002432  00000000  00000000  0002b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c3c  00000000  00000000  0002d602  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000790  00000000  00000000  00031240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c10  00000000  00000000  000319d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00018186  00000000  00000000  000325e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008604  00000000  00000000  0004a766  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000833b1  00000000  00000000  00052d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000d611b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000020c8  00000000  00000000  000d6198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009c0 	.word	0x200009c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c90 	.word	0x08005c90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009c4 	.word	0x200009c4
 800014c:	08005c90 	.word	0x08005c90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a9c:	f000 b974 	b.w	8000d88 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	468c      	mov	ip, r1
 8000abe:	4604      	mov	r4, r0
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d14b      	bne.n	8000b5e <__udivmoddi4+0xa6>
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	4615      	mov	r5, r2
 8000aca:	d967      	bls.n	8000b9c <__udivmoddi4+0xe4>
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0720 	rsb	r7, r2, #32
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	fa20 f707 	lsr.w	r7, r0, r7
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ae4:	4094      	lsls	r4, r2
 8000ae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aea:	fbbc f7fe 	udiv	r7, ip, lr
 8000aee:	fa1f f885 	uxth.w	r8, r5
 8000af2:	fb0e c317 	mls	r3, lr, r7, ip
 8000af6:	fb07 f908 	mul.w	r9, r7, r8
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b00:	4599      	cmp	r9, r3
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x60>
 8000b04:	18eb      	adds	r3, r5, r3
 8000b06:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000b0a:	f080 811c 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b0e:	4599      	cmp	r9, r3
 8000b10:	f240 8119 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	3f02      	subs	r7, #2
 8000b16:	442b      	add	r3, r5
 8000b18:	eba3 0309 	sub.w	r3, r3, r9
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	fb00 f108 	mul.w	r1, r0, r8
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2e:	42a1      	cmp	r1, r4
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0x8e>
 8000b32:	192c      	adds	r4, r5, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b38:	f080 8107 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b3c:	42a1      	cmp	r1, r4
 8000b3e:	f240 8104 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	3802      	subs	r0, #2
 8000b44:	442c      	add	r4, r5
 8000b46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	1a64      	subs	r4, r4, r1
 8000b4e:	b11e      	cbz	r6, 8000b58 <__udivmoddi4+0xa0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	e9c6 4300 	strd	r4, r3, [r6]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xbe>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b68:	2700      	movs	r7, #0
 8000b6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6e:	4638      	mov	r0, r7
 8000b70:	4639      	mov	r1, r7
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f783 	clz	r7, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d148      	bne.n	8000c10 <__udivmoddi4+0x158>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd0>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80fb 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469c      	mov	ip, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa0>
 8000b96:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xe8>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 808f 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000baa:	2701      	movs	r7, #1
 8000bac:	1b49      	subs	r1, r1, r5
 8000bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bb2:	fa1f f985 	uxth.w	r9, r5
 8000bb6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bba:	fb08 111e 	mls	r1, r8, lr, r1
 8000bbe:	fb09 f00e 	mul.w	r0, r9, lr
 8000bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bc6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bce:	18eb      	adds	r3, r5, r3
 8000bd0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	f200 80cd 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bdc:	468e      	mov	lr, r1
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	fb09 f900 	mul.w	r9, r9, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x14e>
 8000bf6:	192c      	adds	r4, r5, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x14c>
 8000bfe:	45a1      	cmp	r9, r4
 8000c00:	f200 80b6 	bhi.w	8000d70 <__udivmoddi4+0x2b8>
 8000c04:	4618      	mov	r0, r3
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c0e:	e79e      	b.n	8000b4e <__udivmoddi4+0x96>
 8000c10:	f1c7 0520 	rsb	r5, r7, #32
 8000c14:	40bb      	lsls	r3, r7
 8000c16:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c26:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c2a:	fa1f f88c 	uxth.w	r8, ip
 8000c2e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c32:	fa20 f305 	lsr.w	r3, r0, r5
 8000c36:	40b9      	lsls	r1, r7
 8000c38:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	45a2      	cmp	sl, r4
 8000c46:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x1b0>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c58:	f080 8088 	bcs.w	8000d6c <__udivmoddi4+0x2b4>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	f240 8085 	bls.w	8000d6c <__udivmoddi4+0x2b4>
 8000c62:	f1a9 0902 	sub.w	r9, r9, #2
 8000c66:	4464      	add	r4, ip
 8000c68:	eba4 040a 	sub.w	r4, r4, sl
 8000c6c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c70:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c74:	fb00 fa08 	mul.w	sl, r0, r8
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c8a:	d26b      	bcs.n	8000d64 <__udivmoddi4+0x2ac>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0x2ac>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c98:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ca0:	454c      	cmp	r4, r9
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d069      	beq.n	8000d82 <__udivmoddi4+0x2ca>
 8000cae:	1a5a      	subs	r2, r3, r1
 8000cb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cb8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cbc:	40fc      	lsrs	r4, r7
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	fa21 f003 	lsr.w	r0, r1, r3
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000cda:	fa1f f985 	uxth.w	r9, r5
 8000cde:	fb08 0017 	mls	r0, r8, r7, r0
 8000ce2:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fb07 fc09 	mul.w	ip, r7, r9
 8000cec:	430b      	orrs	r3, r1
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x254>
 8000cfc:	1869      	adds	r1, r5, r1
 8000cfe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d02:	d231      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d04:	458c      	cmp	ip, r1
 8000d06:	d92f      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	4429      	add	r1, r5
 8000d0c:	eba1 010c 	sub.w	r1, r1, ip
 8000d10:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d14:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d18:	fb00 fe09 	mul.w	lr, r0, r9
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x27e>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	d218      	bcs.n	8000d60 <__udivmoddi4+0x2a8>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d916      	bls.n	8000d60 <__udivmoddi4+0x2a8>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4637      	mov	r7, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e708      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d46:	460f      	mov	r7, r1
 8000d48:	e6e6      	b.n	8000b18 <__udivmoddi4+0x60>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	e6fb      	b.n	8000b46 <__udivmoddi4+0x8e>
 8000d4e:	4543      	cmp	r3, r8
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb8 0102 	subs.w	r1, r8, r2
 8000d56:	eb69 020c 	sbc.w	r2, r9, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	4696      	mov	lr, r2
 8000d5e:	e7a4      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e7e8      	b.n	8000d36 <__udivmoddi4+0x27e>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e795      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e7cf      	b.n	8000d0c <__udivmoddi4+0x254>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e77b      	b.n	8000c68 <__udivmoddi4+0x1b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	e747      	b.n	8000c06 <__udivmoddi4+0x14e>
 8000d76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	e72f      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e707      	b.n	8000b92 <__udivmoddi4+0xda>
 8000d82:	4637      	mov	r7, r6
 8000d84:	e6e8      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <HAL_InitTick+0x3c>)
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_InitTick+0x40>)
 8000d96:	7809      	ldrb	r1, [r1, #0]
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000d9e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	fbb2 f0f3 	udiv	r0, r2, r3
 8000da4:	f000 f8a2 	bl	8000eec <HAL_SYSTICK_Config>
 8000da8:	b908      	cbnz	r0, 8000dae <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	2d0f      	cmp	r5, #15
 8000dac:	d901      	bls.n	8000db2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000dae:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	4602      	mov	r2, r0
 8000db6:	4629      	mov	r1, r5
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dbc:	f000 f852 	bl	8000e64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_InitTick+0x44>)
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	601d      	str	r5, [r3, #0]
}
 8000dc6:	bd38      	pop	{r3, r4, r5, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	2000000c 	.word	0x2000000c
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x20>)
{
 8000dd6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dda:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	f000 f82d 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff ffd0 	bl	8000d8c <HAL_InitTick>
  HAL_MspInit();
 8000dec:	f001 fbfe 	bl	80025ec <HAL_MspInit>
}
 8000df0:	2000      	movs	r0, #0
 8000df2:	bd08      	pop	{r3, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_IncTick+0x10>)
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_IncTick+0x14>)
 8000dfc:	6811      	ldr	r1, [r2, #0]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	440b      	add	r3, r1
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000b74 	.word	0x20000b74
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <HAL_GetTick+0x8>)
 8000e12:	6818      	ldr	r0, [r3, #0]
}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000b74 	.word	0x20000b74

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b538      	push	{r3, r4, r5, lr}
 8000e1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff6 	bl	8000e10 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e24:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e26:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000e28:	d002      	beq.n	8000e30 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_Delay+0x20>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	42a0      	cmp	r0, r4
 8000e38:	d3fa      	bcc.n	8000e30 <HAL_Delay+0x14>
  {
  }
}
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e40:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e46:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	400b      	ands	r3, r1
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e58:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e5a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b430      	push	{r4, r5}
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6e:	f1c3 0507 	rsb	r5, r3, #7
 8000e72:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e74:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	bf28      	it	cs
 8000e7a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7c:	2c06      	cmp	r4, #6
 8000e7e:	d919      	bls.n	8000eb4 <HAL_NVIC_SetPriority+0x50>
 8000e80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e84:	3b03      	subs	r3, #3
 8000e86:	409c      	lsls	r4, r3
 8000e88:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e90:	40aa      	lsls	r2, r5
 8000e92:	ea21 0102 	bic.w	r1, r1, r2
 8000e96:	fa01 f203 	lsl.w	r2, r1, r3
 8000e9a:	4322      	orrs	r2, r4
 8000e9c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	db0a      	blt.n	8000eba <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ea8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000eac:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eb0:	bc30      	pop	{r4, r5}
 8000eb2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb4:	2400      	movs	r4, #0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	e7e8      	b.n	8000e8c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_NVIC_SetPriority+0x68>)
 8000ebc:	f000 000f 	and.w	r0, r0, #15
 8000ec0:	4403      	add	r3, r0
 8000ec2:	761a      	strb	r2, [r3, #24]
 8000ec4:	bc30      	pop	{r4, r5}
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	e000ecfc 	.word	0xe000ecfc

08000ed0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	db07      	blt.n	8000ee4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f000 011f 	and.w	r1, r0, #31
 8000eda:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_NVIC_EnableIRQ+0x18>)
 8000edc:	408b      	lsls	r3, r1
 8000ede:	0940      	lsrs	r0, r0, #5
 8000ee0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	3801      	subs	r0, #1
 8000eee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ef2:	d20d      	bcs.n	8000f10 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef4:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	4c06      	ldr	r4, [pc, #24]	; (8000f18 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f00:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f06:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000f08:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0c:	6019      	str	r1, [r3, #0]
 8000f0e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f10:	2001      	movs	r0, #1
 8000f12:	4770      	bx	lr
 8000f14:	e000e010 	.word	0xe000e010
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f1c:	b350      	cbz	r0, 8000f74 <HAL_DMA_Init+0x58>
 8000f1e:	4602      	mov	r2, r0
{
 8000f20:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f22:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f26:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f28:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8000f2a:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2c:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f2e:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f30:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f32:	4911      	ldr	r1, [pc, #68]	; (8000f78 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f34:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f36:	4f11      	ldr	r7, [pc, #68]	; (8000f7c <HAL_DMA_Init+0x60>)
 8000f38:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f3a:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3c:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f3e:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f42:	4333      	orrs	r3, r6
 8000f44:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f46:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f48:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8000f4a:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f4c:	0909      	lsrs	r1, r1, #4
 8000f4e:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f50:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f54:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f56:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f5a:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f5c:	4908      	ldr	r1, [pc, #32]	; (8000f80 <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 8000f5e:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8000f60:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8000f62:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8000f64:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f66:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000f68:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8000f6c:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 8000f70:	bcf0      	pop	{r4, r5, r6, r7}
 8000f72:	4770      	bx	lr
    return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
}
 8000f76:	4770      	bx	lr
 8000f78:	bffdfff8 	.word	0xbffdfff8
 8000f7c:	cccccccd 	.word	0xcccccccd
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f86:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000f8a:	2c01      	cmp	r4, #1
 8000f8c:	d032      	beq.n	8000ff4 <HAL_DMA_Start_IT+0x70>
 8000f8e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f90:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000f94:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	d125      	bne.n	8000fe8 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9c:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f9e:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa4:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fa8:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8000faa:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8000fae:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fb4:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb6:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8000fba:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fbc:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 8000fc0:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8000fc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fc4:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fc6:	bf0b      	itete	eq
 8000fc8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000fca:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000fcc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000fce:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000fd0:	b19b      	cbz	r3, 8000ffa <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	f043 030e 	orr.w	r3, r3, #14
 8000fd8:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8000fdc:	6822      	ldr	r2, [r4, #0]
}
 8000fde:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8000fe0:	f042 0201 	orr.w	r2, r2, #1
 8000fe4:	6022      	str	r2, [r4, #0]
}
 8000fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8000fe8:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8000fea:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8000fec:	f880 2020 	strb.w	r2, [r0, #32]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8000ff4:	2302      	movs	r3, #2
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	f043 030a 	orr.w	r3, r3, #10
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	e7e6      	b.n	8000fda <HAL_DMA_Start_IT+0x56>

0800100c <HAL_DMA_Abort_IT>:
{  
 800100c:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800100e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001012:	2b02      	cmp	r3, #2
 8001014:	d004      	beq.n	8001020 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001016:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8001018:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	6382      	str	r2, [r0, #56]	; 0x38
}
 800101c:	4620      	mov	r0, r4
 800101e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001020:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001024:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001026:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	f022 020e 	bic.w	r2, r2, #14
 800102c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001036:	d021      	beq.n	800107c <HAL_DMA_Abort_IT+0x70>
 8001038:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_DMA_Abort_IT+0x90>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d01c      	beq.n	8001078 <HAL_DMA_Abort_IT+0x6c>
 800103e:	3214      	adds	r2, #20
 8001040:	4293      	cmp	r3, r2
 8001042:	d01d      	beq.n	8001080 <HAL_DMA_Abort_IT+0x74>
 8001044:	3214      	adds	r2, #20
 8001046:	4293      	cmp	r3, r2
 8001048:	d01d      	beq.n	8001086 <HAL_DMA_Abort_IT+0x7a>
 800104a:	3214      	adds	r2, #20
 800104c:	4293      	cmp	r3, r2
 800104e:	d01d      	beq.n	800108c <HAL_DMA_Abort_IT+0x80>
 8001050:	3214      	adds	r2, #20
 8001052:	4293      	cmp	r3, r2
 8001054:	bf0c      	ite	eq
 8001056:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800105a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 800105e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001060:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001062:	4d0f      	ldr	r5, [pc, #60]	; (80010a0 <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 8001064:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001066:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001068:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800106c:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001070:	b17a      	cbz	r2, 8001092 <HAL_DMA_Abort_IT+0x86>
      hdma->XferAbortCallback(hdma);
 8001072:	4790      	blx	r2
}
 8001074:	4620      	mov	r0, r4
 8001076:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001078:	2310      	movs	r3, #16
 800107a:	e7f0      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 800107c:	2301      	movs	r3, #1
 800107e:	e7ee      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 8001080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001084:	e7eb      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	e7e8      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	e7e5      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001092:	4614      	mov	r4, r2
 8001094:	e7c2      	b.n	800101c <HAL_DMA_Abort_IT+0x10>
 8001096:	bf00      	nop
 8001098:	40020008 	.word	0x40020008
 800109c:	4002001c 	.word	0x4002001c
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010a4:	2204      	movs	r2, #4
{
 80010a6:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010a8:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ac:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80010ae:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80010b4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010b6:	d01f      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x54>
 80010b8:	076a      	lsls	r2, r5, #29
 80010ba:	d51d      	bpl.n	80010f8 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	0691      	lsls	r1, r2, #26
 80010c0:	d403      	bmi.n	80010ca <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f022 0204 	bic.w	r2, r2, #4
 80010c8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010ca:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_DMA_IRQHandler+0x124>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05c      	beq.n	800118a <HAL_DMA_IRQHandler+0xe6>
 80010d0:	3214      	adds	r2, #20
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d061      	beq.n	800119a <HAL_DMA_IRQHandler+0xf6>
 80010d6:	3214      	adds	r2, #20
 80010d8:	4293      	cmp	r3, r2
 80010da:	d068      	beq.n	80011ae <HAL_DMA_IRQHandler+0x10a>
 80010dc:	3214      	adds	r2, #20
 80010de:	4293      	cmp	r3, r2
 80010e0:	d06b      	beq.n	80011ba <HAL_DMA_IRQHandler+0x116>
 80010e2:	3214      	adds	r2, #20
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d05d      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x100>
 80010e8:	3214      	adds	r2, #20
 80010ea:	4293      	cmp	r3, r2
 80010ec:	bf0c      	ite	eq
 80010ee:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80010f2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80010f6:	e049      	b.n	800118c <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010f8:	2202      	movs	r2, #2
 80010fa:	408a      	lsls	r2, r1
 80010fc:	4222      	tst	r2, r4
 80010fe:	d022      	beq.n	8001146 <HAL_DMA_IRQHandler+0xa2>
 8001100:	07aa      	lsls	r2, r5, #30
 8001102:	d520      	bpl.n	8001146 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	0691      	lsls	r1, r2, #26
 8001108:	d406      	bmi.n	8001118 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 800110a:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f022 020a 	bic.w	r2, r2, #10
 8001112:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001114:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001118:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <HAL_DMA_IRQHandler+0x124>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02b      	beq.n	8001176 <HAL_DMA_IRQHandler+0xd2>
 800111e:	3214      	adds	r2, #20
 8001120:	4293      	cmp	r3, r2
 8001122:	d042      	beq.n	80011aa <HAL_DMA_IRQHandler+0x106>
 8001124:	3214      	adds	r2, #20
 8001126:	4293      	cmp	r3, r2
 8001128:	d044      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x110>
 800112a:	3214      	adds	r2, #20
 800112c:	4293      	cmp	r3, r2
 800112e:	d036      	beq.n	800119e <HAL_DMA_IRQHandler+0xfa>
 8001130:	3214      	adds	r2, #20
 8001132:	4293      	cmp	r3, r2
 8001134:	d044      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x11c>
 8001136:	3214      	adds	r2, #20
 8001138:	4293      	cmp	r3, r2
 800113a:	bf0c      	ite	eq
 800113c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001140:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001144:	e018      	b.n	8001178 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001146:	2208      	movs	r2, #8
 8001148:	408a      	lsls	r2, r1
 800114a:	4222      	tst	r2, r4
 800114c:	d01b      	beq.n	8001186 <HAL_DMA_IRQHandler+0xe2>
 800114e:	072a      	lsls	r2, r5, #28
 8001150:	d519      	bpl.n	8001186 <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001152:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8001154:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001156:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001158:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115c:	f024 040e 	bic.w	r4, r4, #14
 8001160:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8001162:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001164:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001166:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001168:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800116c:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001170:	b14b      	cbz	r3, 8001186 <HAL_DMA_IRQHandler+0xe2>
}
 8001172:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001174:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001176:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8001178:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800117a:	4c14      	ldr	r4, [pc, #80]	; (80011cc <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 800117c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800117e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001180:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001184:	b93a      	cbnz	r2, 8001196 <HAL_DMA_IRQHandler+0xf2>
}
 8001186:	bc70      	pop	{r4, r5, r6}
 8001188:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800118a:	2304      	movs	r3, #4
 800118c:	490f      	ldr	r1, [pc, #60]	; (80011cc <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 800118e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001190:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001192:	2a00      	cmp	r2, #0
 8001194:	d0f7      	beq.n	8001186 <HAL_DMA_IRQHandler+0xe2>
}
 8001196:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001198:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800119a:	2340      	movs	r3, #64	; 0x40
 800119c:	e7f6      	b.n	800118c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	e7e9      	b.n	8001178 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011a8:	e7f0      	b.n	800118c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011aa:	2320      	movs	r3, #32
 80011ac:	e7e4      	b.n	8001178 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	e7eb      	b.n	800118c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b8:	e7de      	b.n	8001178 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011be:	e7e5      	b.n	800118c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c4:	e7d8      	b.n	8001178 <HAL_DMA_IRQHandler+0xd4>
 80011c6:	bf00      	nop
 80011c8:	40020008 	.word	0x40020008
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d0:	680a      	ldr	r2, [r1, #0]
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	f000 80db 	beq.w	800138e <HAL_GPIO_Init+0x1be>
{
 80011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 80011dc:	f04f 0a00 	mov.w	sl, #0
{
 80011e0:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 80011e2:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e4:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80013b8 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e8:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80013bc <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ec:	4f6d      	ldr	r7, [pc, #436]	; (80013a4 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ee:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80013c0 <HAL_GPIO_Init+0x1f0>
 80011f2:	e003      	b.n	80011fc <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80011f4:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	fa32 f305 	lsrs.w	r3, r2, r5
 80011fa:	d078      	beq.n	80012ee <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 80011fc:	2301      	movs	r3, #1
 80011fe:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001200:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8001204:	42a3      	cmp	r3, r4
 8001206:	d1f5      	bne.n	80011f4 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001208:	684a      	ldr	r2, [r1, #4]
 800120a:	2a12      	cmp	r2, #18
 800120c:	f000 809e 	beq.w	800134c <HAL_GPIO_Init+0x17c>
 8001210:	f200 8087 	bhi.w	8001322 <HAL_GPIO_Init+0x152>
 8001214:	2a02      	cmp	r2, #2
 8001216:	f000 809d 	beq.w	8001354 <HAL_GPIO_Init+0x184>
 800121a:	d97c      	bls.n	8001316 <HAL_GPIO_Init+0x146>
 800121c:	2a03      	cmp	r2, #3
 800121e:	d069      	beq.n	80012f4 <HAL_GPIO_Init+0x124>
 8001220:	2a11      	cmp	r2, #17
 8001222:	d102      	bne.n	800122a <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001224:	68cb      	ldr	r3, [r1, #12]
 8001226:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122a:	2cff      	cmp	r4, #255	; 0xff
 800122c:	d866      	bhi.n	80012fc <HAL_GPIO_Init+0x12c>
 800122e:	4681      	mov	r9, r0
 8001230:	6803      	ldr	r3, [r0, #0]
 8001232:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001234:	260f      	movs	r6, #15
 8001236:	fa06 fb02 	lsl.w	fp, r6, r2
 800123a:	ea23 030b 	bic.w	r3, r3, fp
 800123e:	fa0a f202 	lsl.w	r2, sl, r2
 8001242:	4313      	orrs	r3, r2
 8001244:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001248:	684a      	ldr	r2, [r1, #4]
 800124a:	00d3      	lsls	r3, r2, #3
 800124c:	d561      	bpl.n	8001312 <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800124e:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8001252:	f025 0303 	bic.w	r3, r5, #3
 8001256:	f049 0901 	orr.w	r9, r9, #1
 800125a:	f8cc 9018 	str.w	r9, [ip, #24]
 800125e:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8001262:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001266:	f009 0901 	and.w	r9, r9, #1
 800126a:	f8cd 900c 	str.w	r9, [sp, #12]
 800126e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001272:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800127e:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001282:	fa06 f609 	lsl.w	r6, r6, r9
 8001286:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800128a:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800128c:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800128e:	d011      	beq.n	80012b4 <HAL_GPIO_Init+0xe4>
 8001290:	4540      	cmp	r0, r8
 8001292:	d063      	beq.n	800135c <HAL_GPIO_Init+0x18c>
 8001294:	4e44      	ldr	r6, [pc, #272]	; (80013a8 <HAL_GPIO_Init+0x1d8>)
 8001296:	42b0      	cmp	r0, r6
 8001298:	d07a      	beq.n	8001390 <HAL_GPIO_Init+0x1c0>
 800129a:	4e44      	ldr	r6, [pc, #272]	; (80013ac <HAL_GPIO_Init+0x1dc>)
 800129c:	42b0      	cmp	r0, r6
 800129e:	bf0c      	ite	eq
 80012a0:	f04f 0b03 	moveq.w	fp, #3
 80012a4:	f04f 0b04 	movne.w	fp, #4
 80012a8:	9e01      	ldr	r6, [sp, #4]
 80012aa:	fa0b f909 	lsl.w	r9, fp, r9
 80012ae:	ea46 0609 	orr.w	r6, r6, r9
 80012b2:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b4:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80012b6:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b8:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80012ba:	bf4c      	ite	mi
 80012bc:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012be:	43a3      	bicpl	r3, r4
 80012c0:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80012c2:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80012c6:	bf4c      	ite	mi
 80012c8:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ca:	43a3      	bicpl	r3, r4
 80012cc:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80012ce:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d0:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d2:	bf4c      	ite	mi
 80012d4:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d6:	43a3      	bicpl	r3, r4
 80012d8:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012da:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012de:	d515      	bpl.n	800130c <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e0:	431c      	orrs	r4, r3
 80012e2:	60fc      	str	r4, [r7, #12]
 80012e4:	680a      	ldr	r2, [r1, #0]
	position++;
 80012e6:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e8:	fa32 f305 	lsrs.w	r3, r2, r5
 80012ec:	d186      	bne.n	80011fc <HAL_GPIO_Init+0x2c>
  }
}
 80012ee:	b005      	add	sp, #20
 80012f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f4:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f6:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012fa:	d998      	bls.n	800122e <HAL_GPIO_Init+0x5e>
 80012fc:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8001300:	3a08      	subs	r2, #8
 8001302:	6843      	ldr	r3, [r0, #4]
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	f100 0904 	add.w	r9, r0, #4
 800130a:	e793      	b.n	8001234 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800130c:	ea23 0404 	bic.w	r4, r3, r4
 8001310:	60fc      	str	r4, [r7, #12]
 8001312:	680a      	ldr	r2, [r1, #0]
 8001314:	e76e      	b.n	80011f4 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001316:	b1a2      	cbz	r2, 8001342 <HAL_GPIO_Init+0x172>
 8001318:	2a01      	cmp	r2, #1
 800131a:	d186      	bne.n	800122a <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800131c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001320:	e783      	b.n	800122a <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001322:	4e23      	ldr	r6, [pc, #140]	; (80013b0 <HAL_GPIO_Init+0x1e0>)
 8001324:	42b2      	cmp	r2, r6
 8001326:	d00c      	beq.n	8001342 <HAL_GPIO_Init+0x172>
 8001328:	d920      	bls.n	800136c <HAL_GPIO_Init+0x19c>
 800132a:	4e22      	ldr	r6, [pc, #136]	; (80013b4 <HAL_GPIO_Init+0x1e4>)
 800132c:	42b2      	cmp	r2, r6
 800132e:	d008      	beq.n	8001342 <HAL_GPIO_Init+0x172>
 8001330:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001334:	42b2      	cmp	r2, r6
 8001336:	d004      	beq.n	8001342 <HAL_GPIO_Init+0x172>
 8001338:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800133c:	42b2      	cmp	r2, r6
 800133e:	f47f af74 	bne.w	800122a <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001342:	688a      	ldr	r2, [r1, #8]
 8001344:	b9e2      	cbnz	r2, 8001380 <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001346:	f04f 0a04 	mov.w	sl, #4
 800134a:	e76e      	b.n	800122a <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800134c:	68cb      	ldr	r3, [r1, #12]
 800134e:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8001352:	e76a      	b.n	800122a <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001354:	68cb      	ldr	r3, [r1, #12]
 8001356:	f103 0a08 	add.w	sl, r3, #8
          break;
 800135a:	e766      	b.n	800122a <HAL_GPIO_Init+0x5a>
 800135c:	f04f 0b01 	mov.w	fp, #1
 8001360:	fa0b f909 	lsl.w	r9, fp, r9
 8001364:	ea46 0609 	orr.w	r6, r6, r9
 8001368:	9601      	str	r6, [sp, #4]
 800136a:	e7a3      	b.n	80012b4 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 800136c:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8001370:	42b2      	cmp	r2, r6
 8001372:	d0e6      	beq.n	8001342 <HAL_GPIO_Init+0x172>
 8001374:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001378:	42b2      	cmp	r2, r6
 800137a:	f47f af56 	bne.w	800122a <HAL_GPIO_Init+0x5a>
 800137e:	e7e0      	b.n	8001342 <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001382:	bf0c      	ite	eq
 8001384:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8001386:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	f04f 0a08 	mov.w	sl, #8
 800138c:	e74d      	b.n	800122a <HAL_GPIO_Init+0x5a>
 800138e:	4770      	bx	lr
 8001390:	f04f 0b02 	mov.w	fp, #2
 8001394:	9e01      	ldr	r6, [sp, #4]
 8001396:	fa0b f909 	lsl.w	r9, fp, r9
 800139a:	ea46 0609 	orr.w	r6, r6, r9
 800139e:	9601      	str	r6, [sp, #4]
 80013a0:	e788      	b.n	80012b4 <HAL_GPIO_Init+0xe4>
 80013a2:	bf00      	nop
 80013a4:	40010400 	.word	0x40010400
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40011400 	.word	0x40011400
 80013b0:	10210000 	.word	0x10210000
 80013b4:	10310000 	.word	0x10310000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00

080013c4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c4:	2800      	cmp	r0, #0
 80013c6:	f000 8155 	beq.w	8001674 <HAL_RCC_OscConfig+0x2b0>
{
 80013ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	6803      	ldr	r3, [r0, #0]
{
 80013d0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	07dd      	lsls	r5, r3, #31
 80013d4:	4604      	mov	r4, r0
 80013d6:	d535      	bpl.n	8001444 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d8:	49a8      	ldr	r1, [pc, #672]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 80013da:	684a      	ldr	r2, [r1, #4]
 80013dc:	f002 020c 	and.w	r2, r2, #12
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	f000 8105 	beq.w	80015f0 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e6:	684a      	ldr	r2, [r1, #4]
 80013e8:	f002 020c 	and.w	r2, r2, #12
 80013ec:	2a08      	cmp	r2, #8
 80013ee:	f000 80fb 	beq.w	80015e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f2:	6863      	ldr	r3, [r4, #4]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d010      	beq.n	800141c <HAL_RCC_OscConfig+0x58>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8120 	beq.w	8001640 <HAL_RCC_OscConfig+0x27c>
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	f000 8178 	beq.w	80016f8 <HAL_RCC_OscConfig+0x334>
 8001408:	4b9c      	ldr	r3, [pc, #624]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e004      	b.n	8001426 <HAL_RCC_OscConfig+0x62>
 800141c:	4a97      	ldr	r2, [pc, #604]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fcf3 	bl	8000e10 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4d94      	ldr	r5, [pc, #592]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 800142c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	e005      	b.n	800143c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fcee 	bl	8000e10 <HAL_GetTick>
 8001434:	1b80      	subs	r0, r0, r6
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	f200 80f5 	bhi.w	8001626 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	039a      	lsls	r2, r3, #14
 8001440:	d5f6      	bpl.n	8001430 <HAL_RCC_OscConfig+0x6c>
 8001442:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001444:	079f      	lsls	r7, r3, #30
 8001446:	d44d      	bmi.n	80014e4 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001448:	071a      	lsls	r2, r3, #28
 800144a:	d522      	bpl.n	8001492 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144c:	69a3      	ldr	r3, [r4, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80ba 	beq.w	80015c8 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001454:	2201      	movs	r2, #1
 8001456:	4b8a      	ldr	r3, [pc, #552]	; (8001680 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001458:	4d88      	ldr	r5, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 800145a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800145c:	f7ff fcd8 	bl	8000e10 <HAL_GetTick>
 8001460:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e005      	b.n	8001470 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fcd4 	bl	8000e10 <HAL_GetTick>
 8001468:	1b80      	subs	r0, r0, r6
 800146a:	2802      	cmp	r0, #2
 800146c:	f200 80db 	bhi.w	8001626 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001470:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001472:	079b      	lsls	r3, r3, #30
 8001474:	d5f6      	bpl.n	8001464 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001476:	4b83      	ldr	r3, [pc, #524]	; (8001684 <HAL_RCC_OscConfig+0x2c0>)
 8001478:	4a83      	ldr	r2, [pc, #524]	; (8001688 <HAL_RCC_OscConfig+0x2c4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0a5b      	lsrs	r3, r3, #9
 8001482:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001484:	bf00      	nop
  }
  while (Delay --);
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	9201      	str	r2, [sp, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f9      	bne.n	8001484 <HAL_RCC_OscConfig+0xc0>
 8001490:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001492:	075d      	lsls	r5, r3, #29
 8001494:	d569      	bpl.n	800156a <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b79      	ldr	r3, [pc, #484]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 8001498:	69da      	ldr	r2, [r3, #28]
 800149a:	00d0      	lsls	r0, r2, #3
 800149c:	f100 80ec 	bmi.w	8001678 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 80014a0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a8:	61da      	str	r2, [r3, #28]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	4b75      	ldr	r3, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x2c8>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	05d1      	lsls	r1, r2, #23
 80014ba:	f140 80a3 	bpl.w	8001604 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014be:	68e3      	ldr	r3, [r4, #12]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d037      	beq.n	8001534 <HAL_RCC_OscConfig+0x170>
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80e7 	beq.w	8001698 <HAL_RCC_OscConfig+0x2d4>
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	4b6b      	ldr	r3, [pc, #428]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	f000 811f 	beq.w	8001712 <HAL_RCC_OscConfig+0x34e>
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	6a1a      	ldr	r2, [r3, #32]
 80014dc:	f022 0204 	bic.w	r2, r2, #4
 80014e0:	621a      	str	r2, [r3, #32]
 80014e2:	e02c      	b.n	800153e <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e4:	4a65      	ldr	r2, [pc, #404]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 80014e6:	6851      	ldr	r1, [r2, #4]
 80014e8:	f011 0f0c 	tst.w	r1, #12
 80014ec:	d061      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ee:	6851      	ldr	r1, [r2, #4]
 80014f0:	f001 010c 	and.w	r1, r1, #12
 80014f4:	2908      	cmp	r1, #8
 80014f6:	d059      	beq.n	80015ac <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f8:	6923      	ldr	r3, [r4, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80eb 	beq.w	80016d6 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8001500:	2201      	movs	r2, #1
 8001502:	4b63      	ldr	r3, [pc, #396]	; (8001690 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4d5d      	ldr	r5, [pc, #372]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8001506:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001508:	f7ff fc82 	bl	8000e10 <HAL_GetTick>
 800150c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	e005      	b.n	800151c <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fc7e 	bl	8000e10 <HAL_GetTick>
 8001514:	1b80      	subs	r0, r0, r6
 8001516:	2802      	cmp	r0, #2
 8001518:	f200 8085 	bhi.w	8001626 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	0798      	lsls	r0, r3, #30
 8001520:	d5f6      	bpl.n	8001510 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	6962      	ldr	r2, [r4, #20]
 8001526:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800152a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800152e:	602b      	str	r3, [r5, #0]
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	e789      	b.n	8001448 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	4a51      	ldr	r2, [pc, #324]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 8001536:	6a13      	ldr	r3, [r2, #32]
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800153e:	f7ff fc67 	bl	8000e10 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001542:	4e4e      	ldr	r6, [pc, #312]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8001544:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	e005      	b.n	8001558 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154c:	f7ff fc60 	bl	8000e10 <HAL_GetTick>
 8001550:	eba0 0008 	sub.w	r0, r0, r8
 8001554:	42b8      	cmp	r0, r7
 8001556:	d866      	bhi.n	8001626 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	6a33      	ldr	r3, [r6, #32]
 800155a:	079b      	lsls	r3, r3, #30
 800155c:	d5f6      	bpl.n	800154c <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 800155e:	b125      	cbz	r5, 800156a <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4a46      	ldr	r2, [pc, #280]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 8001562:	69d3      	ldr	r3, [r2, #28]
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156a:	69e0      	ldr	r0, [r4, #28]
 800156c:	b1d0      	cbz	r0, 80015a4 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156e:	4d43      	ldr	r5, [pc, #268]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 8001570:	686a      	ldr	r2, [r5, #4]
 8001572:	f002 020c 	and.w	r2, r2, #12
 8001576:	2a08      	cmp	r2, #8
 8001578:	f000 80d3 	beq.w	8001722 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	4a44      	ldr	r2, [pc, #272]	; (8001694 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001584:	f000 80de 	beq.w	8001744 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8001588:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800158a:	f7ff fc41 	bl	8000e10 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001590:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	e004      	b.n	800159e <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fc3c 	bl	8000e10 <HAL_GetTick>
 8001598:	1b40      	subs	r0, r0, r5
 800159a:	2802      	cmp	r0, #2
 800159c:	d843      	bhi.n	8001626 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	d4f7      	bmi.n	8001594 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 80015a4:	2000      	movs	r0, #0
}
 80015a6:	b002      	add	sp, #8
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ac:	6852      	ldr	r2, [r2, #4]
 80015ae:	03d6      	lsls	r6, r2, #15
 80015b0:	d4a2      	bmi.n	80014f8 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	0795      	lsls	r5, r2, #30
 80015b8:	d539      	bpl.n	800162e <HAL_RCC_OscConfig+0x26a>
 80015ba:	6922      	ldr	r2, [r4, #16]
 80015bc:	2a01      	cmp	r2, #1
 80015be:	d036      	beq.n	800162e <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 80015c0:	2001      	movs	r0, #1
}
 80015c2:	b002      	add	sp, #8
 80015c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ca:	4d2c      	ldr	r5, [pc, #176]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 80015cc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015ce:	f7ff fc1f 	bl	8000e10 <HAL_GetTick>
 80015d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	e004      	b.n	80015e0 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fc1b 	bl	8000e10 <HAL_GetTick>
 80015da:	1b80      	subs	r0, r0, r6
 80015dc:	2802      	cmp	r0, #2
 80015de:	d822      	bhi.n	8001626 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015e2:	079f      	lsls	r7, r3, #30
 80015e4:	d4f7      	bmi.n	80015d6 <HAL_RCC_OscConfig+0x212>
 80015e6:	e753      	b.n	8001490 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e8:	684a      	ldr	r2, [r1, #4]
 80015ea:	03d0      	lsls	r0, r2, #15
 80015ec:	f57f af01 	bpl.w	80013f2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	0391      	lsls	r1, r2, #14
 80015f6:	f57f af25 	bpl.w	8001444 <HAL_RCC_OscConfig+0x80>
 80015fa:	6862      	ldr	r2, [r4, #4]
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	f47f af21 	bne.w	8001444 <HAL_RCC_OscConfig+0x80>
 8001602:	e7dd      	b.n	80015c0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001604:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800160e:	f7ff fbff 	bl	8000e10 <HAL_GetTick>
 8001612:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	6833      	ldr	r3, [r6, #0]
 8001616:	05da      	lsls	r2, r3, #23
 8001618:	f53f af51 	bmi.w	80014be <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff fbf8 	bl	8000e10 <HAL_GetTick>
 8001620:	1bc0      	subs	r0, r0, r7
 8001622:	2864      	cmp	r0, #100	; 0x64
 8001624:	d9f6      	bls.n	8001614 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8001626:	2003      	movs	r0, #3
}
 8001628:	b002      	add	sp, #8
 800162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4913      	ldr	r1, [pc, #76]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 8001630:	6960      	ldr	r0, [r4, #20]
 8001632:	680a      	ldr	r2, [r1, #0]
 8001634:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001638:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800163c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	e703      	b.n	8001448 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001644:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001648:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001658:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800165a:	f7ff fbd9 	bl	8000e10 <HAL_GetTick>
 800165e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001660:	e004      	b.n	800166c <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001662:	f7ff fbd5 	bl	8000e10 <HAL_GetTick>
 8001666:	1b80      	subs	r0, r0, r6
 8001668:	2864      	cmp	r0, #100	; 0x64
 800166a:	d8dc      	bhi.n	8001626 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	039b      	lsls	r3, r3, #14
 8001670:	d4f7      	bmi.n	8001662 <HAL_RCC_OscConfig+0x29e>
 8001672:	e6e6      	b.n	8001442 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
}
 8001676:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001678:	2500      	movs	r5, #0
 800167a:	e71b      	b.n	80014b4 <HAL_RCC_OscConfig+0xf0>
 800167c:	40021000 	.word	0x40021000
 8001680:	42420480 	.word	0x42420480
 8001684:	2000000c 	.word	0x2000000c
 8001688:	10624dd3 	.word	0x10624dd3
 800168c:	40007000 	.word	0x40007000
 8001690:	42420000 	.word	0x42420000
 8001694:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800169c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016a0:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a2:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	621a      	str	r2, [r3, #32]
 80016aa:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	f022 0204 	bic.w	r2, r2, #4
 80016b4:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbab 	bl	8000e10 <HAL_GetTick>
 80016ba:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	e004      	b.n	80016c8 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fba7 	bl	8000e10 <HAL_GetTick>
 80016c2:	1bc0      	subs	r0, r0, r7
 80016c4:	4540      	cmp	r0, r8
 80016c6:	d8ae      	bhi.n	8001626 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	6a33      	ldr	r3, [r6, #32]
 80016ca:	0798      	lsls	r0, r3, #30
 80016cc:	d4f7      	bmi.n	80016be <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 80016ce:	2d00      	cmp	r5, #0
 80016d0:	f43f af4b 	beq.w	800156a <HAL_RCC_OscConfig+0x1a6>
 80016d4:	e744      	b.n	8001560 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d8:	4d34      	ldr	r5, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 80016da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb98 	bl	8000e10 <HAL_GetTick>
 80016e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e004      	b.n	80016ee <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fb94 	bl	8000e10 <HAL_GetTick>
 80016e8:	1b80      	subs	r0, r0, r6
 80016ea:	2802      	cmp	r0, #2
 80016ec:	d89b      	bhi.n	8001626 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	0799      	lsls	r1, r3, #30
 80016f2:	d4f7      	bmi.n	80016e4 <HAL_RCC_OscConfig+0x320>
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	e6a7      	b.n	8001448 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016fc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e689      	b.n	8001426 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	f042 0204 	orr.w	r2, r2, #4
 8001716:	621a      	str	r2, [r3, #32]
 8001718:	6a1a      	ldr	r2, [r3, #32]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	621a      	str	r2, [r3, #32]
 8001720:	e70d      	b.n	800153e <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001722:	2801      	cmp	r0, #1
 8001724:	f43f af4d 	beq.w	80015c2 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8001728:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	6a22      	ldr	r2, [r4, #32]
 800172c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001730:	4291      	cmp	r1, r2
 8001732:	f47f af45 	bne.w	80015c0 <HAL_RCC_OscConfig+0x1fc>
 8001736:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001738:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 800173c:	1a18      	subs	r0, r3, r0
 800173e:	bf18      	it	ne
 8001740:	2001      	movne	r0, #1
 8001742:	e73e      	b.n	80015c2 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8001744:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001746:	f7ff fb63 	bl	8000e10 <HAL_GetTick>
 800174a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174c:	e005      	b.n	800175a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb5f 	bl	8000e10 <HAL_GetTick>
 8001752:	1b80      	subs	r0, r0, r6
 8001754:	2802      	cmp	r0, #2
 8001756:	f63f af66 	bhi.w	8001626 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	682b      	ldr	r3, [r5, #0]
 800175c:	0199      	lsls	r1, r3, #6
 800175e:	d4f6      	bmi.n	800174e <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001760:	6a22      	ldr	r2, [r4, #32]
 8001762:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001768:	686b      	ldr	r3, [r5, #4]
 800176a:	68a1      	ldr	r1, [r4, #8]
 800176c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001770:	430b      	orrs	r3, r1
 8001772:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001774:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_RCC_OscConfig+0x3e8>)
 8001778:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	4302      	orrs	r2, r0
 800177e:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001788:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178a:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 800178c:	f7ff fb40 	bl	8000e10 <HAL_GetTick>
 8001790:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001792:	e005      	b.n	80017a0 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fb3c 	bl	8000e10 <HAL_GetTick>
 8001798:	1b40      	subs	r0, r0, r5
 800179a:	2802      	cmp	r0, #2
 800179c:	f63f af43 	bhi.w	8001626 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	019a      	lsls	r2, r3, #6
 80017a4:	d5f6      	bpl.n	8001794 <HAL_RCC_OscConfig+0x3d0>
 80017a6:	e6fd      	b.n	80015a4 <HAL_RCC_OscConfig+0x1e0>
 80017a8:	42420000 	.word	0x42420000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	42420060 	.word	0x42420060

080017b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80017b4:	b178      	cbz	r0, 80017d6 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b6:	4a5d      	ldr	r2, [pc, #372]	; (800192c <HAL_RCC_ClockConfig+0x178>)
 80017b8:	6813      	ldr	r3, [r2, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	428b      	cmp	r3, r1
 80017c0:	d20b      	bcs.n	80017da <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	f023 0307 	bic.w	r3, r3, #7
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017cc:	6813      	ldr	r3, [r2, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	428b      	cmp	r3, r1
 80017d4:	d001      	beq.n	80017da <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
}
 80017d8:	4770      	bx	lr
{
 80017da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017de:	6803      	ldr	r3, [r0, #0]
{
 80017e0:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e2:	079d      	lsls	r5, r3, #30
 80017e4:	d514      	bpl.n	8001810 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	075c      	lsls	r4, r3, #29
 80017e8:	d504      	bpl.n	80017f4 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ea:	4c51      	ldr	r4, [pc, #324]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
 80017ec:	6862      	ldr	r2, [r4, #4]
 80017ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017f2:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	071a      	lsls	r2, r3, #28
 80017f6:	d504      	bpl.n	8001802 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4c4d      	ldr	r4, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
 80017fa:	6862      	ldr	r2, [r4, #4]
 80017fc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001800:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001802:	4c4b      	ldr	r4, [pc, #300]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
 8001804:	6885      	ldr	r5, [r0, #8]
 8001806:	6862      	ldr	r2, [r4, #4]
 8001808:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800180c:	432a      	orrs	r2, r5
 800180e:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001810:	07db      	lsls	r3, r3, #31
 8001812:	4604      	mov	r4, r0
 8001814:	460d      	mov	r5, r1
 8001816:	d520      	bpl.n	800185a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001818:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001820:	d06f      	beq.n	8001902 <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	2a02      	cmp	r2, #2
 8001824:	d07e      	beq.n	8001924 <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	0798      	lsls	r0, r3, #30
 8001828:	d527      	bpl.n	800187a <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4e41      	ldr	r6, [pc, #260]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001830:	6873      	ldr	r3, [r6, #4]
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	4313      	orrs	r3, r2
 8001838:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800183a:	f7ff fae9 	bl	8000e10 <HAL_GetTick>
 800183e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001840:	e004      	b.n	800184c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff fae5 	bl	8000e10 <HAL_GetTick>
 8001846:	1bc0      	subs	r0, r0, r7
 8001848:	4540      	cmp	r0, r8
 800184a:	d869      	bhi.n	8001920 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184c:	6873      	ldr	r3, [r6, #4]
 800184e:	6862      	ldr	r2, [r4, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001858:	d1f3      	bne.n	8001842 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800185a:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_RCC_ClockConfig+0x178>)
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	42ab      	cmp	r3, r5
 8001864:	d90d      	bls.n	8001882 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	f023 0307 	bic.w	r3, r3, #7
 800186c:	432b      	orrs	r3, r5
 800186e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	42ab      	cmp	r3, r5
 8001878:	d003      	beq.n	8001882 <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
}
 800187c:	b006      	add	sp, #24
 800187e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	0759      	lsls	r1, r3, #29
 8001886:	d506      	bpl.n	8001896 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4929      	ldr	r1, [pc, #164]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
 800188a:	68e0      	ldr	r0, [r4, #12]
 800188c:	684a      	ldr	r2, [r1, #4]
 800188e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001892:	4302      	orrs	r2, r0
 8001894:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	071a      	lsls	r2, r3, #28
 8001898:	d507      	bpl.n	80018aa <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
 800189c:	6921      	ldr	r1, [r4, #16]
 800189e:	6853      	ldr	r3, [r2, #4]
 80018a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80018a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018a8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018aa:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_RCC_ClockConfig+0x180>)
 80018b0:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018b2:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80018bc:	491c      	ldr	r1, [pc, #112]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
 80018be:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80018c0:	f002 030c 	and.w	r3, r2, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d11a      	bne.n	80018fe <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c8:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80018cc:	4423      	add	r3, r4
 80018ce:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d2:	03d3      	lsls	r3, r2, #15
 80018d4:	d418      	bmi.n	8001908 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80018d8:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_RCC_ClockConfig+0x17c>)
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 80018e0:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80018e2:	4917      	ldr	r1, [pc, #92]	; (8001940 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80018e8:	5c80      	ldrb	r0, [r0, r2]
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <HAL_RCC_ClockConfig+0x190>)
 80018ec:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80018ee:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80018f2:	f7ff fa4b 	bl	8000d8c <HAL_InitTick>
  return HAL_OK;
 80018f6:	2000      	movs	r0, #0
}
 80018f8:	b006      	add	sp, #24
 80018fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x194>)
 8001900:	e7ec      	b.n	80018dc <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	039f      	lsls	r7, r3, #14
 8001904:	d491      	bmi.n	800182a <HAL_RCC_ClockConfig+0x76>
 8001906:	e7b8      	b.n	800187a <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001908:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800190c:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001910:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001914:	4422      	add	r2, r4
 8001916:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800191a:	fbb3 f3f2 	udiv	r3, r3, r2
 800191e:	e7dd      	b.n	80018dc <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8001920:	2003      	movs	r0, #3
 8001922:	e7ab      	b.n	800187c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001924:	019e      	lsls	r6, r3, #6
 8001926:	d480      	bmi.n	800182a <HAL_RCC_ClockConfig+0x76>
 8001928:	e7a7      	b.n	800187a <HAL_RCC_ClockConfig+0xc6>
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000
 8001930:	40021000 	.word	0x40021000
 8001934:	08005ca8 	.word	0x08005ca8
 8001938:	003d0900 	.word	0x003d0900
 800193c:	08005d50 	.word	0x08005d50
 8001940:	20000004 	.word	0x20000004
 8001944:	2000000c 	.word	0x2000000c
 8001948:	007a1200 	.word	0x007a1200

0800194c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x14>)
 800194e:	4905      	ldr	r1, [pc, #20]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001950:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001954:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	6810      	ldr	r0, [r2, #0]
}
 800195c:	40d8      	lsrs	r0, r3
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000
 8001964:	08005d60 	.word	0x08005d60
 8001968:	2000000c 	.word	0x2000000c

0800196c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x14>)
 800196e:	4905      	ldr	r1, [pc, #20]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001970:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001974:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001978:	5ccb      	ldrb	r3, [r1, r3]
 800197a:	6810      	ldr	r0, [r2, #0]
}
 800197c:	40d8      	lsrs	r0, r3
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	08005d60 	.word	0x08005d60
 8001988:	2000000c 	.word	0x2000000c

0800198c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800198c:	2800      	cmp	r0, #0
 800198e:	d05e      	beq.n	8001a4e <HAL_UART_Init+0xc2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001990:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001994:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001996:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800199a:	4604      	mov	r4, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d051      	beq.n	8001a44 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a0:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80019a4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80019a8:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019aa:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 80019ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019b2:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019b4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019b6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80019ba:	4301      	orrs	r1, r0
 80019bc:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80019be:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019c0:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80019c4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019c8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80019ca:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019ce:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 80019d8:	491f      	ldr	r1, [pc, #124]	; (8001a58 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019de:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 80019e0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e2:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80019e4:	d035      	beq.n	8001a52 <HAL_UART_Init+0xc6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019e6:	f7ff ffb1 	bl	800194c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80019fa:	2364      	movs	r3, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fc:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80019fe:	2120      	movs	r1, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a00:	4e16      	ldr	r6, [pc, #88]	; (8001a5c <HAL_UART_Init+0xd0>)
 8001a02:	fba6 c200 	umull	ip, r2, r6, r0
 8001a06:	0952      	lsrs	r2, r2, #5
 8001a08:	fb03 0012 	mls	r0, r3, r2, r0
 8001a0c:	0100      	lsls	r0, r0, #4
 8001a0e:	3032      	adds	r0, #50	; 0x32
 8001a10:	fba6 3000 	umull	r3, r0, r6, r0
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8001a1c:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1e:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 8001a20:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a2e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a36:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a38:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a3a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a3e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8001a44:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a48:	f000 fe76 	bl	8002738 <HAL_UART_MspInit>
 8001a4c:	e7a8      	b.n	80019a0 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
}
 8001a50:	4770      	bx	lr
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a52:	f7ff ff8b 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001a56:	e7c8      	b.n	80019ea <HAL_UART_Init+0x5e>
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	51eb851f 	.word	0x51eb851f

08001a60 <HAL_UART_Transmit>:
{
 8001a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a64:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001a66:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
{
 8001a6a:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8001a6c:	2820      	cmp	r0, #32
 8001a6e:	d140      	bne.n	8001af2 <HAL_UART_Transmit+0x92>
 8001a70:	460f      	mov	r7, r1
    if ((pData == NULL) || (Size == 0U))
 8001a72:	2900      	cmp	r1, #0
 8001a74:	d041      	beq.n	8001afa <HAL_UART_Transmit+0x9a>
 8001a76:	9201      	str	r2, [sp, #4]
 8001a78:	2a00      	cmp	r2, #0
 8001a7a:	d03e      	beq.n	8001afa <HAL_UART_Transmit+0x9a>
 8001a7c:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8001a7e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d035      	beq.n	8001af2 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a86:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8001a88:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8a:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8001a8c:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a90:	63ec      	str	r4, [r5, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a92:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001a96:	f7ff f9bb 	bl	8000e10 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a9a:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8001a9c:	9a01      	ldr	r2, [sp, #4]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001aa2:	4681      	mov	r9, r0
    huart->TxXferSize = Size;
 8001aa4:	84aa      	strh	r2, [r5, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aa6:	84ea      	strh	r2, [r5, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa8:	d05a      	beq.n	8001b60 <HAL_UART_Transmit+0x100>
      pdata16bits = NULL;
 8001aaa:	46a0      	mov	r8, r4
    __HAL_UNLOCK(huart);
 8001aac:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8001aae:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001ab0:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	682c      	ldr	r4, [r5, #0]
 8001ab8:	b18b      	cbz	r3, 8001ade <HAL_UART_Transmit+0x7e>
 8001aba:	1c72      	adds	r2, r6, #1
 8001abc:	d121      	bne.n	8001b02 <HAL_UART_Transmit+0xa2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001abe:	6822      	ldr	r2, [r4, #0]
 8001ac0:	0613      	lsls	r3, r2, #24
 8001ac2:	d5fc      	bpl.n	8001abe <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8001ac4:	2f00      	cmp	r7, #0
 8001ac6:	d039      	beq.n	8001b3c <HAL_UART_Transmit+0xdc>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ac8:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001acc:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8001ace:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ad6:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ed      	bne.n	8001aba <HAL_UART_Transmit+0x5a>
 8001ade:	1c71      	adds	r1, r6, #1
 8001ae0:	d131      	bne.n	8001b46 <HAL_UART_Transmit+0xe6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	065a      	lsls	r2, r3, #25
 8001ae6:	d5fc      	bpl.n	8001ae2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001ae8:	2320      	movs	r3, #32
    return HAL_OK;
 8001aea:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8001aec:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    return HAL_OK;
 8001af0:	e000      	b.n	8001af4 <HAL_UART_Transmit+0x94>
    return HAL_BUSY;
 8001af2:	2002      	movs	r0, #2
}
 8001af4:	b003      	add	sp, #12
 8001af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
}
 8001afc:	b003      	add	sp, #12
 8001afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	0618      	lsls	r0, r3, #24
 8001b06:	d4dd      	bmi.n	8001ac4 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b08:	b136      	cbz	r6, 8001b18 <HAL_UART_Transmit+0xb8>
 8001b0a:	f7ff f981 	bl	8000e10 <HAL_GetTick>
 8001b0e:	eba0 0009 	sub.w	r0, r0, r9
 8001b12:	4286      	cmp	r6, r0
 8001b14:	682c      	ldr	r4, [r5, #0]
 8001b16:	d2d0      	bcs.n	8001aba <HAL_UART_Transmit+0x5a>
        huart->gState  = HAL_UART_STATE_READY;
 8001b18:	2220      	movs	r2, #32
        __HAL_UNLOCK(huart);
 8001b1a:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b1c:	68e3      	ldr	r3, [r4, #12]
      return HAL_TIMEOUT;
 8001b1e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b24:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b26:	6963      	ldr	r3, [r4, #20]
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6163      	str	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001b2e:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8001b32:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8001b36:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
 8001b3a:	e7db      	b.n	8001af4 <HAL_UART_Transmit+0x94>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b3c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b44:	e7c2      	b.n	8001acc <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	065b      	lsls	r3, r3, #25
 8001b4a:	d4cd      	bmi.n	8001ae8 <HAL_UART_Transmit+0x88>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b4c:	2e00      	cmp	r6, #0
 8001b4e:	d0e3      	beq.n	8001b18 <HAL_UART_Transmit+0xb8>
 8001b50:	f7ff f95e 	bl	8000e10 <HAL_GetTick>
 8001b54:	eba0 0009 	sub.w	r0, r0, r9
 8001b58:	4286      	cmp	r6, r0
 8001b5a:	682c      	ldr	r4, [r5, #0]
 8001b5c:	d2bf      	bcs.n	8001ade <HAL_UART_Transmit+0x7e>
 8001b5e:	e7db      	b.n	8001b18 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b60:	692b      	ldr	r3, [r5, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1a1      	bne.n	8001aaa <HAL_UART_Transmit+0x4a>
 8001b66:	46b8      	mov	r8, r7
      pdata8bits  = NULL;
 8001b68:	461f      	mov	r7, r3
 8001b6a:	e79f      	b.n	8001aac <HAL_UART_Transmit+0x4c>

08001b6c <HAL_UART_Receive_DMA>:
{
 8001b6c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b6e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 8001b72:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b74:	2c20      	cmp	r4, #32
 8001b76:	d138      	bne.n	8001bea <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8001b78:	2900      	cmp	r1, #0
 8001b7a:	d039      	beq.n	8001bf0 <HAL_UART_Receive_DMA+0x84>
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d037      	beq.n	8001bf0 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 8001b80:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d030      	beq.n	8001bea <HAL_UART_Receive_DMA+0x7e>
 8001b88:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 8001b8e:	2601      	movs	r6, #1
 8001b90:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b92:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001b94:	6b40      	ldr	r0, [r0, #52]	; 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8001b98:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b9c:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001ba0:	4e15      	ldr	r6, [pc, #84]	; (8001bf8 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001ba2:	4916      	ldr	r1, [pc, #88]	; (8001bfc <HAL_UART_Receive_DMA+0x90>)
    huart->pRxBuffPtr = pData;
 8001ba4:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ba6:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001ba8:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001baa:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001bac:	4e14      	ldr	r6, [pc, #80]	; (8001c00 <HAL_UART_Receive_DMA+0x94>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001bae:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8001bb0:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001bb2:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001bb4:	3104      	adds	r1, #4
 8001bb6:	f7ff f9e5 	bl	8000f84 <HAL_DMA_Start_IT>
    return HAL_OK;
 8001bba:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	9501      	str	r5, [sp, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	9201      	str	r2, [sp, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8001bc6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001bca:	9201      	str	r2, [sp, #4]
 8001bcc:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be4:	615a      	str	r2, [r3, #20]
}
 8001be6:	b002      	add	sp, #8
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001bea:	2002      	movs	r0, #2
}
 8001bec:	b002      	add	sp, #8
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001bf0:	2001      	movs	r0, #1
}
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08001c0d 	.word	0x08001c0d
 8001bfc:	08001cbd 	.word	0x08001cbd
 8001c00:	08001ccd 	.word	0x08001ccd

08001c04 <HAL_UART_TxCpltCallback>:
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop

08001c08 <HAL_UART_RxCpltCallback>:
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <UART_DMAReceiveCplt>:
{
 8001c0c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c0e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f013 0320 	ands.w	r3, r3, #32
 8001c18:	d110      	bne.n	8001c3c <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 8001c1a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c1c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8001c1e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c20:	68d3      	ldr	r3, [r2, #12]
 8001c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c26:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c28:	6953      	ldr	r3, [r2, #20]
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c30:	6953      	ldr	r3, [r2, #20]
 8001c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c36:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001c38:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001c3c:	f7ff ffe4 	bl	8001c08 <HAL_UART_RxCpltCallback>
}
 8001c40:	bd08      	pop	{r3, pc}
 8001c42:	bf00      	nop

08001c44 <UART_Receive_IT.part.1>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c44:	6882      	ldr	r2, [r0, #8]
 8001c46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c48:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c4c:	6801      	ldr	r1, [r0, #0]
 8001c4e:	d029      	beq.n	8001ca4 <UART_Receive_IT.part.1+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c50:	b16a      	cbz	r2, 8001c6e <UART_Receive_IT.part.1+0x2a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c52:	684a      	ldr	r2, [r1, #4]
 8001c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c58:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8001c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001c60:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001c68:	b13b      	cbz	r3, 8001c7a <UART_Receive_IT.part.1+0x36>
}
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c6e:	6902      	ldr	r2, [r0, #16]
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d1ee      	bne.n	8001c52 <UART_Receive_IT.part.1+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c74:	684a      	ldr	r2, [r1, #4]
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e7ef      	b.n	8001c5a <UART_Receive_IT.part.1+0x16>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001c7a:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c7e:	6803      	ldr	r3, [r0, #0]
 8001c80:	68d9      	ldr	r1, [r3, #12]
 8001c82:	f021 0120 	bic.w	r1, r1, #32
 8001c86:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c88:	68d9      	ldr	r1, [r3, #12]
 8001c8a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001c8e:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c90:	6959      	ldr	r1, [r3, #20]
 8001c92:	f021 0101 	bic.w	r1, r1, #1
 8001c96:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001c98:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001c9c:	f7ff ffb4 	bl	8001c08 <HAL_UART_RxCpltCallback>
}
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca4:	6902      	ldr	r2, [r0, #16]
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	d1e4      	bne.n	8001c74 <UART_Receive_IT.part.1+0x30>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001caa:	684a      	ldr	r2, [r1, #4]
 8001cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cb0:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8001cb4:	6283      	str	r3, [r0, #40]	; 0x28
 8001cb6:	e7d3      	b.n	8001c60 <UART_Receive_IT.part.1+0x1c>

08001cb8 <HAL_UART_RxHalfCpltCallback>:
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <UART_DMARxHalfCplt>:
{
 8001cbc:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001cbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001cc0:	f7ff fffa 	bl	8001cb8 <HAL_UART_RxHalfCpltCallback>
}
 8001cc4:	bd08      	pop	{r3, pc}
 8001cc6:	bf00      	nop

08001cc8 <HAL_UART_ErrorCallback>:
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop

08001ccc <UART_DMAError>:
{
 8001ccc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cce:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001cd4:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8001cd8:	2921      	cmp	r1, #33	; 0x21
 8001cda:	d01c      	beq.n	8001d16 <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cdc:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001cde:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8001ce2:	2922      	cmp	r1, #34	; 0x22
 8001ce4:	d007      	beq.n	8001cf6 <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001ce8:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001cea:	f042 0210 	orr.w	r2, r2, #16
 8001cee:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001cf0:	f7ff ffea 	bl	8001cc8 <HAL_UART_ErrorCallback>
}
 8001cf4:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001cf6:	0641      	lsls	r1, r0, #25
 8001cf8:	d5f5      	bpl.n	8001ce6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8001cfa:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001cfc:	2020      	movs	r0, #32
    huart->RxXferCount = 0x00U;
 8001cfe:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d00:	68d1      	ldr	r1, [r2, #12]
 8001d02:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001d06:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d08:	6951      	ldr	r1, [r2, #20]
 8001d0a:	f021 0101 	bic.w	r1, r1, #1
 8001d0e:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001d10:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8001d14:	e7e7      	b.n	8001ce6 <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001d16:	0600      	lsls	r0, r0, #24
 8001d18:	d5e0      	bpl.n	8001cdc <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8001d1a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d1c:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8001d1e:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001d20:	68d1      	ldr	r1, [r2, #12]
 8001d22:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001d26:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d28:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 8001d2c:	e7d6      	b.n	8001cdc <UART_DMAError+0x10>
 8001d2e:	bf00      	nop

08001d30 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d30:	6803      	ldr	r3, [r0, #0]
{
 8001d32:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d34:	681a      	ldr	r2, [r3, #0]
{
 8001d36:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001d38:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d3a:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d3c:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8001d3e:	d047      	beq.n	8001dd0 <HAL_UART_IRQHandler+0xa0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d40:	f011 0101 	ands.w	r1, r1, #1
 8001d44:	d04d      	beq.n	8001de2 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d46:	07d0      	lsls	r0, r2, #31
 8001d48:	d505      	bpl.n	8001d56 <HAL_UART_IRQHandler+0x26>
 8001d4a:	05ee      	lsls	r6, r5, #23
 8001d4c:	d503      	bpl.n	8001d56 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d50:	f040 0001 	orr.w	r0, r0, #1
 8001d54:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d56:	0750      	lsls	r0, r2, #29
 8001d58:	d575      	bpl.n	8001e46 <HAL_UART_IRQHandler+0x116>
 8001d5a:	b129      	cbz	r1, 8001d68 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d5e:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d60:	f040 0002 	orr.w	r0, r0, #2
 8001d64:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d66:	d472      	bmi.n	8001e4e <HAL_UART_IRQHandler+0x11e>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d68:	0716      	lsls	r6, r2, #28
 8001d6a:	d503      	bpl.n	8001d74 <HAL_UART_IRQHandler+0x44>
 8001d6c:	06a8      	lsls	r0, r5, #26
 8001d6e:	d473      	bmi.n	8001e58 <HAL_UART_IRQHandler+0x128>
 8001d70:	2900      	cmp	r1, #0
 8001d72:	d171      	bne.n	8001e58 <HAL_UART_IRQHandler+0x128>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d76:	2900      	cmp	r1, #0
 8001d78:	d032      	beq.n	8001de0 <HAL_UART_IRQHandler+0xb0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d7a:	0696      	lsls	r6, r2, #26
 8001d7c:	d501      	bpl.n	8001d82 <HAL_UART_IRQHandler+0x52>
 8001d7e:	06a8      	lsls	r0, r5, #26
 8001d80:	d473      	bmi.n	8001e6a <HAL_UART_IRQHandler+0x13a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d82:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d86:	0709      	lsls	r1, r1, #28
 8001d88:	d402      	bmi.n	8001d90 <HAL_UART_IRQHandler+0x60>
 8001d8a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001d8e:	d079      	beq.n	8001e84 <HAL_UART_IRQHandler+0x154>
  huart->RxState = HAL_UART_STATE_READY;
 8001d90:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001da2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	0652      	lsls	r2, r2, #25
 8001daa:	d55a      	bpl.n	8001e62 <HAL_UART_IRQHandler+0x132>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dac:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db4:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001db6:	2900      	cmp	r1, #0
 8001db8:	d053      	beq.n	8001e62 <HAL_UART_IRQHandler+0x132>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dba:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_UART_IRQHandler+0x174>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dbc:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dbe:	634b      	str	r3, [r1, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dc0:	f7ff f924 	bl	800100c <HAL_DMA_Abort_IT>
 8001dc4:	b160      	cbz	r0, 8001de0 <HAL_UART_IRQHandler+0xb0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dc6:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001dce:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dd0:	0691      	lsls	r1, r2, #26
 8001dd2:	d509      	bpl.n	8001de8 <HAL_UART_IRQHandler+0xb8>
 8001dd4:	06ae      	lsls	r6, r5, #26
 8001dd6:	d507      	bpl.n	8001de8 <HAL_UART_IRQHandler+0xb8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dd8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ddc:	2b22      	cmp	r3, #34	; 0x22
 8001dde:	d04d      	beq.n	8001e7c <HAL_UART_IRQHandler+0x14c>
}
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001de2:	f415 7f90 	tst.w	r5, #288	; 0x120
 8001de6:	d1ae      	bne.n	8001d46 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001de8:	0616      	lsls	r6, r2, #24
 8001dea:	d40e      	bmi.n	8001e0a <HAL_UART_IRQHandler+0xda>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001dec:	0651      	lsls	r1, r2, #25
 8001dee:	d5f7      	bpl.n	8001de0 <HAL_UART_IRQHandler+0xb0>
 8001df0:	066a      	lsls	r2, r5, #25
 8001df2:	d5f5      	bpl.n	8001de0 <HAL_UART_IRQHandler+0xb0>
  huart->gState = HAL_UART_STATE_READY;
 8001df4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001df6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001df8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dfe:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e00:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e04:	f7ff fefe 	bl	8001c04 <HAL_UART_TxCpltCallback>
}
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e0a:	0628      	lsls	r0, r5, #24
 8001e0c:	d5ee      	bpl.n	8001dec <HAL_UART_IRQHandler+0xbc>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e0e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001e12:	2a21      	cmp	r2, #33	; 0x21
 8001e14:	d1e4      	bne.n	8001de0 <HAL_UART_IRQHandler+0xb0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e16:	68a1      	ldr	r1, [r4, #8]
 8001e18:	6a22      	ldr	r2, [r4, #32]
 8001e1a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001e1e:	d036      	beq.n	8001e8e <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e20:	1c51      	adds	r1, r2, #1
 8001e22:	6221      	str	r1, [r4, #32]
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001e28:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001e2a:	3a01      	subs	r2, #1
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	d1d5      	bne.n	8001de0 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e3a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e42:	60da      	str	r2, [r3, #12]
}
 8001e44:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e46:	0790      	lsls	r0, r2, #30
 8001e48:	d58e      	bpl.n	8001d68 <HAL_UART_IRQHandler+0x38>
 8001e4a:	2900      	cmp	r1, #0
 8001e4c:	d08c      	beq.n	8001d68 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e50:	f040 0004 	orr.w	r0, r0, #4
 8001e54:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001e56:	e787      	b.n	8001d68 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e5a:	f041 0108 	orr.w	r1, r1, #8
 8001e5e:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001e60:	e788      	b.n	8001d74 <HAL_UART_IRQHandler+0x44>
            HAL_UART_ErrorCallback(huart);
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff ff30 	bl	8001cc8 <HAL_UART_ErrorCallback>
}
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e6a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001e6e:	2a22      	cmp	r2, #34	; 0x22
 8001e70:	d187      	bne.n	8001d82 <HAL_UART_IRQHandler+0x52>
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff fee6 	bl	8001c44 <UART_Receive_IT.part.1>
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	e782      	b.n	8001d82 <HAL_UART_IRQHandler+0x52>
}
 8001e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001e80:	f7ff bee0 	b.w	8001c44 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7ff ff1f 	bl	8001cc8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8a:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e8e:	6921      	ldr	r1, [r4, #16]
 8001e90:	2900      	cmp	r1, #0
 8001e92:	d1c5      	bne.n	8001e20 <HAL_UART_IRQHandler+0xf0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e94:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001e98:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001e9c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001e9e:	6222      	str	r2, [r4, #32]
 8001ea0:	e7c2      	b.n	8001e28 <HAL_UART_IRQHandler+0xf8>
 8001ea2:	bf00      	nop
 8001ea4:	08001ea9 	.word	0x08001ea9

08001ea8 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0x00U;
 8001ea8:	2200      	movs	r2, #0
{
 8001eaa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001eae:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8001eb0:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8001eb2:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001eb4:	f7ff ff08 	bl	8001cc8 <HAL_UART_ErrorCallback>
}
 8001eb8:	bd08      	pop	{r3, pc}
 8001eba:	bf00      	nop

08001ebc <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_DMA_Init+0x30>)
{
 8001ebe:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec0:	6958      	ldr	r0, [r3, #20]
{
 8001ec2:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec4:	f040 0001 	orr.w	r0, r0, #1
 8001ec8:	6158      	str	r0, [r3, #20]
 8001eca:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001ecc:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001eda:	f7fe ffc3 	bl	8000e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ede:	200f      	movs	r0, #15

}
 8001ee0:	b003      	add	sp, #12
 8001ee2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ee6:	f7fe bff3 	b.w	8000ed0 <HAL_NVIC_EnableIRQ>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <MX_GPIO_Init+0x2c>)
{
 8001ef2:	b082      	sub	sp, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	f042 0220 	orr.w	r2, r2, #32
 8001efa:	619a      	str	r2, [r3, #24]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	f002 0220 	and.w	r2, r2, #32
 8001f02:	9200      	str	r2, [sp, #0]
 8001f04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	f042 0204 	orr.w	r2, r2, #4
 8001f0c:	619a      	str	r2, [r3, #24]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	9b01      	ldr	r3, [sp, #4]

}
 8001f18:	b002      	add	sp, #8
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000

08001f20 <BTN_Object_Released>:
    {
    Nextion_Set_Text(BTN_Object.Name, "Pressed");
    }
void BTN_Object_Released()
    {
    Nextion_Set_Text(BTN_Object.Name, "Released");
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <BTN_Object_Released+0xc>)
 8001f22:	4903      	ldr	r1, [pc, #12]	; (8001f30 <BTN_Object_Released+0x10>)
 8001f24:	6858      	ldr	r0, [r3, #4]
 8001f26:	f000 b955 	b.w	80021d4 <Nextion_Set_Text>
 8001f2a:	bf00      	nop
 8001f2c:	20000b98 	.word	0x20000b98
 8001f30:	08005cbc 	.word	0x08005cbc

08001f34 <Page_1_Touched>:
void Page_1_Touched()
    {
    //Nextion_Hide_Object(BTN_Object.Name,true);

    uint32_t timeout = 0xFFFF;
    Page_RCV_Flag = 0;
 8001f34:	2300      	movs	r3, #0
    {
 8001f36:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 8001f38:	4c0d      	ldr	r4, [pc, #52]	; (8001f70 <Page_1_Touched+0x3c>)
 8001f3a:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 8001f3c:	f000 f9ca 	bl	80022d4 <Nextion_Get_Current_Page>
 8001f40:	7823      	ldrb	r3, [r4, #0]
 8001f42:	b92b      	cbnz	r3, 8001f50 <Page_1_Touched+0x1c>
	    Nextion_Set_BCK_Colour(BTN_Object.Name, 63488);
	    }
	}

    Nextion_Backlight_Brightness(50, 0);
    }
 8001f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(50, 0);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2032      	movs	r0, #50	; 0x32
 8001f4c:	f000 b99a 	b.w	8002284 <Nextion_Backlight_Brightness>
	if (Current_Page == 1)
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <Page_1_Touched+0x40>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d1f5      	bne.n	8001f44 <Page_1_Touched+0x10>
	    Nextion_Set_BCK_Colour(BTN_Object.Name, 63488);
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <Page_1_Touched+0x44>)
 8001f5a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001f5e:	6858      	ldr	r0, [r3, #4]
 8001f60:	f000 f95a 	bl	8002218 <Nextion_Set_BCK_Colour>
    }
 8001f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(50, 0);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2032      	movs	r0, #50	; 0x32
 8001f6c:	f000 b98a 	b.w	8002284 <Nextion_Backlight_Brightness>
 8001f70:	200009de 	.word	0x200009de
 8001f74:	200009dc 	.word	0x200009dc
 8001f78:	20000b98 	.word	0x20000b98

08001f7c <Page_1_Released>:

void Page_1_Released()
    {
    //Nextion_Hide_Object(BTN_Object.Name,false);
    uint32_t timeout = 0xFFFF;
    Page_RCV_Flag = 0;
 8001f7c:	2300      	movs	r3, #0
    {
 8001f7e:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 8001f80:	4c0d      	ldr	r4, [pc, #52]	; (8001fb8 <Page_1_Released+0x3c>)
 8001f82:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 8001f84:	f000 f9a6 	bl	80022d4 <Nextion_Get_Current_Page>
 8001f88:	7823      	ldrb	r3, [r4, #0]
 8001f8a:	b92b      	cbnz	r3, 8001f98 <Page_1_Released+0x1c>
	    Nextion_Set_BCK_Colour(BTN_Object.Name, 48631);
	    }
	}

    Nextion_Backlight_Brightness(80, 0);
    }
 8001f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(80, 0);
 8001f90:	2100      	movs	r1, #0
 8001f92:	2050      	movs	r0, #80	; 0x50
 8001f94:	f000 b976 	b.w	8002284 <Nextion_Backlight_Brightness>
	if (Current_Page == 1)
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <Page_1_Released+0x40>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d1f5      	bne.n	8001f8c <Page_1_Released+0x10>
	    Nextion_Set_BCK_Colour(BTN_Object.Name, 48631);
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <Page_1_Released+0x44>)
 8001fa2:	f64b 51f7 	movw	r1, #48631	; 0xbdf7
 8001fa6:	6858      	ldr	r0, [r3, #4]
 8001fa8:	f000 f936 	bl	8002218 <Nextion_Set_BCK_Colour>
    }
 8001fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(80, 0);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2050      	movs	r0, #80	; 0x50
 8001fb4:	f000 b966 	b.w	8002284 <Nextion_Backlight_Brightness>
 8001fb8:	200009de 	.word	0x200009de
 8001fbc:	200009dc 	.word	0x200009dc
 8001fc0:	20000b98 	.word	0x20000b98

08001fc4 <Page_0_Touched>:
    Page_RCV_Flag = 0;
 8001fc4:	2300      	movs	r3, #0
    {
 8001fc6:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 8001fc8:	4c09      	ldr	r4, [pc, #36]	; (8001ff0 <Page_0_Touched+0x2c>)
 8001fca:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 8001fcc:	f000 f982 	bl	80022d4 <Nextion_Get_Current_Page>
 8001fd0:	7823      	ldrb	r3, [r4, #0]
 8001fd2:	b903      	cbnz	r3, 8001fd6 <Page_0_Touched+0x12>
    }
 8001fd4:	bd10      	pop	{r4, pc}
	if (Current_Page == 0)
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <Page_0_Touched+0x30>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1fa      	bne.n	8001fd4 <Page_0_Touched+0x10>
    }
 8001fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    Nextion_Set_BCK_Colour(BTN_Object.Name, 63488);
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <Page_0_Touched+0x34>)
 8001fe4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001fe8:	6858      	ldr	r0, [r3, #4]
 8001fea:	f000 b915 	b.w	8002218 <Nextion_Set_BCK_Colour>
 8001fee:	bf00      	nop
 8001ff0:	200009de 	.word	0x200009de
 8001ff4:	200009dc 	.word	0x200009dc
 8001ff8:	20000b98 	.word	0x20000b98

08001ffc <Page_0_Released>:
    Page_RCV_Flag = 0;
 8001ffc:	2300      	movs	r3, #0
    {
 8001ffe:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 8002000:	4c0f      	ldr	r4, [pc, #60]	; (8002040 <Page_0_Released+0x44>)
 8002002:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 8002004:	f000 f966 	bl	80022d4 <Nextion_Get_Current_Page>
 8002008:	7823      	ldrb	r3, [r4, #0]
 800200a:	b93b      	cbnz	r3, 800201c <Page_0_Released+0x20>
    Page_0_Touch_Count++;
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <Page_0_Released+0x48>)
 800200e:	7813      	ldrb	r3, [r2, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	b2db      	uxtb	r3, r3
    if (Page_0_Touch_Count == 10)
 8002014:	2b0a      	cmp	r3, #10
 8002016:	d00c      	beq.n	8002032 <Page_0_Released+0x36>
    Page_0_Touch_Count++;
 8002018:	7013      	strb	r3, [r2, #0]
    }
 800201a:	bd10      	pop	{r4, pc}
	if (Current_Page == 0)
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <Page_0_Released+0x4c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f3      	bne.n	800200c <Page_0_Released+0x10>
	    Nextion_Set_BCK_Colour(BTN_Object.Name, 48631);
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <Page_0_Released+0x50>)
 8002026:	f64b 51f7 	movw	r1, #48631	; 0xbdf7
 800202a:	6858      	ldr	r0, [r3, #4]
 800202c:	f000 f8f4 	bl	8002218 <Nextion_Set_BCK_Colour>
 8002030:	e7ec      	b.n	800200c <Page_0_Released+0x10>
	Page_0_Touch_Count = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	7013      	strb	r3, [r2, #0]
	Nextion_Send_Command("page 4");
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <Page_0_Released+0x54>)
    }
 8002038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Nextion_Send_Command("page 4");
 800203c:	f000 b8a8 	b.w	8002190 <Nextion_Send_Command>
 8002040:	200009de 	.word	0x200009de
 8002044:	200009dd 	.word	0x200009dd
 8002048:	200009dc 	.word	0x200009dc
 800204c:	20000b98 	.word	0x20000b98
 8002050:	08005cc8 	.word	0x08005cc8

08002054 <Nextion_RX_Page_ID_Callback>:

void Nextion_RX_Page_ID_Callback(uint8_t Page_ID)
    {
    Page_RCV_Flag = 0;
 8002054:	2100      	movs	r1, #0
 8002056:	4a02      	ldr	r2, [pc, #8]	; (8002060 <Nextion_RX_Page_ID_Callback+0xc>)
    Current_Page = Page_ID;
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <Nextion_RX_Page_ID_Callback+0x10>)
    Page_RCV_Flag = 0;
 800205a:	7011      	strb	r1, [r2, #0]
    Current_Page = Page_ID;
 800205c:	7018      	strb	r0, [r3, #0]
    }
 800205e:	4770      	bx	lr
 8002060:	200009de 	.word	0x200009de
 8002064:	200009dc 	.word	0x200009dc

08002068 <Nextion_RX_String_Callback>:

void Nextion_RX_String_Callback(const char* str)
    {

    }
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <Nextion_RX_Number_Callback>:

void Nextion_RX_Number_Callback(uint32_t Number)
    {

    }
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <Nextion_CMD_Finished_Callback>:

void Nextion_CMD_Finished_Callback()
    {

    }
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002074:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002076:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002078:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800207a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002080:	f44f 15e0 	mov.w	r5, #1835008	; 0x1c0000
{
 8002084:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002086:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002088:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800208a:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208c:	9309      	str	r3, [sp, #36]	; 0x24
 800208e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002092:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002096:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800209a:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800209c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800209e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a0:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020a4:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a6:	f7ff f98d 	bl	80013c4 <HAL_RCC_OscConfig>
 80020aa:	b100      	cbz	r0, 80020ae <SystemClock_Config+0x3a>
 80020ac:	e7fe      	b.n	80020ac <SystemClock_Config+0x38>
 80020ae:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b0:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b6:	a801      	add	r0, sp, #4
 80020b8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ba:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020be:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c0:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c2:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c4:	f7ff fb76 	bl	80017b4 <HAL_RCC_ClockConfig>
 80020c8:	b100      	cbz	r0, 80020cc <SystemClock_Config+0x58>
 80020ca:	e7fe      	b.n	80020ca <SystemClock_Config+0x56>
  {
    Error_Handler();
  }
}
 80020cc:	b011      	add	sp, #68	; 0x44
 80020ce:	bd30      	pop	{r4, r5, pc}

080020d0 <main>:
    Page_0_Object.Page_ID = 0;
 80020d0:	2400      	movs	r4, #0
{
 80020d2:	b508      	push	{r3, lr}
  HAL_Init();
 80020d4:	f7fe fe7e 	bl	8000dd4 <HAL_Init>
  SystemClock_Config();
 80020d8:	f7ff ffcc 	bl	8002074 <SystemClock_Config>
  MX_GPIO_Init();
 80020dc:	f7ff ff08 	bl	8001ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 80020e0:	f7ff feec 	bl	8001ebc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80020e4:	f000 fb0c 	bl	8002700 <MX_USART1_UART_Init>
    Nextion_Init();
 80020e8:	f000 f9a2 	bl	8002430 <Nextion_Init>
    Page_0_Object.Push_Callback = &Page_0_Touched;
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <main+0x68>)
    Page_0_Object.Pop_Callback = &Page_0_Released;
 80020ee:	4913      	ldr	r1, [pc, #76]	; (800213c <main+0x6c>)
    Page_0_Object.Name = "page 0";
 80020f0:	4a13      	ldr	r2, [pc, #76]	; (8002140 <main+0x70>)
    Page_0_Object.Push_Callback = &Page_0_Touched;
 80020f2:	4d14      	ldr	r5, [pc, #80]	; (8002144 <main+0x74>)
    Nextion_Add_Object(&Page_0_Object);
 80020f4:	4618      	mov	r0, r3
    Page_0_Object.Page_ID = 0;
 80020f6:	801c      	strh	r4, [r3, #0]
    Page_0_Object.Pop_Callback = &Page_0_Released;
 80020f8:	e9c3 5102 	strd	r5, r1, [r3, #8]
    Page_0_Object.Name = "page 0";
 80020fc:	605a      	str	r2, [r3, #4]
    Nextion_Add_Object(&Page_0_Object);
 80020fe:	f000 f833 	bl	8002168 <Nextion_Add_Object>
    Page_1_Object.Page_ID = 1;
 8002102:	2001      	movs	r0, #1
    Page_1_Object.Push_Callback = &Page_1_Touched;
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <main+0x78>)
    Page_1_Object.Pop_Callback = &Page_1_Released;
 8002106:	4911      	ldr	r1, [pc, #68]	; (800214c <main+0x7c>)
    Page_1_Object.Name = "page 1";
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <main+0x80>)
    Page_1_Object.Push_Callback = &Page_1_Touched;
 800210a:	4d12      	ldr	r5, [pc, #72]	; (8002154 <main+0x84>)
    Page_1_Object.Page_ID = 1;
 800210c:	8018      	strh	r0, [r3, #0]
    Nextion_Add_Object(&Page_1_Object);
 800210e:	4618      	mov	r0, r3
    Page_1_Object.Pop_Callback = &Page_1_Released;
 8002110:	e9c3 5102 	strd	r5, r1, [r3, #8]
    Page_1_Object.Name = "page 1";
 8002114:	605a      	str	r2, [r3, #4]
    Nextion_Add_Object(&Page_1_Object);
 8002116:	f000 f827 	bl	8002168 <Nextion_Add_Object>
    BTN_Object.Page_ID = 0;
 800211a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    BTN_Object.Push_Callback = NULL;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <main+0x88>)
    BTN_Object.Pop_Callback = &BTN_Object_Released;
 8002120:	4d0e      	ldr	r5, [pc, #56]	; (800215c <main+0x8c>)
    BTN_Object.Name = "b0";
 8002122:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <main+0x90>)
    Nextion_Add_Object(&BTN_Object);
 8002124:	4618      	mov	r0, r3
    BTN_Object.Page_ID = 0;
 8002126:	8019      	strh	r1, [r3, #0]
    BTN_Object.Pop_Callback = &BTN_Object_Released;
 8002128:	e9c3 4502 	strd	r4, r5, [r3, #8]
    BTN_Object.Name = "b0";
 800212c:	605a      	str	r2, [r3, #4]
    Nextion_Add_Object(&BTN_Object);
 800212e:	f000 f81b 	bl	8002168 <Nextion_Add_Object>
	Nextion_Loop();
 8002132:	f000 f8ef 	bl	8002314 <Nextion_Loop>
 8002136:	e7fc      	b.n	8002132 <main+0x62>
 8002138:	20000b88 	.word	0x20000b88
 800213c:	08001ffd 	.word	0x08001ffd
 8002140:	08005cd0 	.word	0x08005cd0
 8002144:	08001fc5 	.word	0x08001fc5
 8002148:	20000b78 	.word	0x20000b78
 800214c:	08001f7d 	.word	0x08001f7d
 8002150:	08005cd8 	.word	0x08005cd8
 8002154:	08001f35 	.word	0x08001f35
 8002158:	20000b98 	.word	0x20000b98
 800215c:	08001f21 	.word	0x08001f21
 8002160:	08005ce0 	.word	0x08005ce0

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	e7fe      	b.n	8002164 <Error_Handler>
 8002166:	bf00      	nop

08002168 <Nextion_Add_Object>:
UART_HandleTypeDef *Nextion_UART = &huart1;
/*********************ring buffer stuff end*******************/

uint8_t Nextion_Add_Object(Nextion_Object_t *PTR)
{
	if (Nextion_Object_Count < MAX_NEXTION_OBJECTS)
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <Nextion_Add_Object+0x20>)
 800216a:	8813      	ldrh	r3, [r2, #0]
 800216c:	2b31      	cmp	r3, #49	; 0x31
 800216e:	d808      	bhi.n	8002182 <Nextion_Add_Object+0x1a>
{
 8002170:	b410      	push	{r4}
	{
		Nextion_Object_List[Nextion_Object_Count] = PTR;
 8002172:	4c06      	ldr	r4, [pc, #24]	; (800218c <Nextion_Add_Object+0x24>)
		Nextion_Object_Count++;
 8002174:	1c59      	adds	r1, r3, #1
		Nextion_Object_List[Nextion_Object_Count] = PTR;
 8002176:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
		Nextion_Object_Count++;
 800217a:	8011      	strh	r1, [r2, #0]
		return 1;
 800217c:	2001      	movs	r0, #1
	}
	return 0;
}
 800217e:	bc10      	pop	{r4}
 8002180:	4770      	bx	lr
	return 0;
 8002182:	2000      	movs	r0, #0
}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	200009e2 	.word	0x200009e2
 800218c:	200009e4 	.word	0x200009e4

08002190 <Nextion_Send_Command>:

	return NEXTION_ERR;
}

void Nextion_Send_Command(const char *cmd)
{
 8002190:	b530      	push	{r4, r5, lr}
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <Nextion_Send_Command+0x3c>)
{
 8002194:	b083      	sub	sp, #12
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 8002196:	681b      	ldr	r3, [r3, #0]
{
 8002198:	4605      	mov	r5, r0
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 800219a:	0c1a      	lsrs	r2, r3, #16
 800219c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80021a0:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t len = strlen(cmd);
 80021a4:	f7fd ffd4 	bl	8000150 <strlen>

	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 80021a8:	4c09      	ldr	r4, [pc, #36]	; (80021d0 <Nextion_Send_Command+0x40>)
 80021aa:	b2c2      	uxtb	r2, r0
 80021ac:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80021b0:	4629      	mov	r1, r5
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	6820      	ldr	r0, [r4, #0]
 80021b6:	f7ff fc53 	bl	8001a60 <HAL_UART_Transmit>
	HAL_UART_Transmit(Nextion_UART, delimiter, 3, 10);
 80021ba:	6820      	ldr	r0, [r4, #0]
 80021bc:	230a      	movs	r3, #10
 80021be:	2203      	movs	r2, #3
 80021c0:	a901      	add	r1, sp, #4
 80021c2:	f7ff fc4d 	bl	8001a60 <HAL_UART_Transmit>
}
 80021c6:	b003      	add	sp, #12
 80021c8:	bd30      	pop	{r4, r5, pc}
 80021ca:	bf00      	nop
 80021cc:	08005cb8 	.word	0x08005cb8
 80021d0:	20000008 	.word	0x20000008

080021d4 <Nextion_Set_Text>:
 *
 *
 */

void Nextion_Set_Text(char *object_name, char *buffer)
{
 80021d4:	b530      	push	{r4, r5, lr}
	char buf[20] = "";
	char sps = 0xFF;

	sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 80021d6:	25ff      	movs	r5, #255	; 0xff
	char buf[20] = "";
 80021d8:	2400      	movs	r4, #0
{
 80021da:	b08b      	sub	sp, #44	; 0x2c
	sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 80021dc:	460b      	mov	r3, r1
 80021de:	4602      	mov	r2, r0
 80021e0:	490b      	ldr	r1, [pc, #44]	; (8002210 <Nextion_Set_Text+0x3c>)
 80021e2:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80021e6:	9500      	str	r5, [sp, #0]
 80021e8:	a805      	add	r0, sp, #20
	char buf[20] = "";
 80021ea:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80021ee:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80021f2:	9409      	str	r4, [sp, #36]	; 0x24
	sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 80021f4:	f000 fb58 	bl	80028a8 <sprintf>

	HAL_UART_Transmit(Nextion_UART, (uint8_t *)&buf, strlen(buf), 50);
 80021f8:	a805      	add	r0, sp, #20
 80021fa:	f7fd ffa9 	bl	8000150 <strlen>
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <Nextion_Set_Text+0x40>)
 8002200:	b282      	uxth	r2, r0
 8002202:	a905      	add	r1, sp, #20
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	2332      	movs	r3, #50	; 0x32
 8002208:	f7ff fc2a 	bl	8001a60 <HAL_UART_Transmit>
}
 800220c:	b00b      	add	sp, #44	; 0x2c
 800220e:	bd30      	pop	{r4, r5, pc}
 8002210:	08005d3c 	.word	0x08005d3c
 8002214:	20000008 	.word	0x20000008

08002218 <Nextion_Set_BCK_Colour>:
 *
 *
 */

void Nextion_Set_BCK_Colour(char *object_name, int colour)
{
 8002218:	b570      	push	{r4, r5, r6, lr}
	char buf[20] = "";
	char sps = 0xFF;

	sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 800221a:	24ff      	movs	r4, #255	; 0xff
	char buf[20] = "";
 800221c:	2500      	movs	r5, #0
{
 800221e:	b08a      	sub	sp, #40	; 0x28
	sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 8002220:	460b      	mov	r3, r1
 8002222:	4602      	mov	r2, r0
{
 8002224:	4606      	mov	r6, r0
	sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 8002226:	4914      	ldr	r1, [pc, #80]	; (8002278 <Nextion_Set_BCK_Colour+0x60>)
 8002228:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800222c:	9400      	str	r4, [sp, #0]
 800222e:	a805      	add	r0, sp, #20
	char buf[20] = "";
 8002230:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8002234:	e9cd 5507 	strd	r5, r5, [sp, #28]
 8002238:	9509      	str	r5, [sp, #36]	; 0x24
	sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 800223a:	f000 fb35 	bl	80028a8 <sprintf>

	HAL_UART_Transmit(Nextion_UART, (uint8_t *)&buf, strlen(buf), 50);
 800223e:	a805      	add	r0, sp, #20
 8002240:	f7fd ff86 	bl	8000150 <strlen>
 8002244:	4d0d      	ldr	r5, [pc, #52]	; (800227c <Nextion_Set_BCK_Colour+0x64>)
 8002246:	b282      	uxth	r2, r0
 8002248:	a905      	add	r1, sp, #20
 800224a:	6828      	ldr	r0, [r5, #0]
 800224c:	2332      	movs	r3, #50	; 0x32
 800224e:	f7ff fc07 	bl	8001a60 <HAL_UART_Transmit>

	sprintf(buf, "ref %s%c%c%c", object_name, sps, sps, sps);
 8002252:	4623      	mov	r3, r4
 8002254:	4632      	mov	r2, r6
 8002256:	490a      	ldr	r1, [pc, #40]	; (8002280 <Nextion_Set_BCK_Colour+0x68>)
 8002258:	e9cd 4400 	strd	r4, r4, [sp]
 800225c:	a805      	add	r0, sp, #20
 800225e:	f000 fb23 	bl	80028a8 <sprintf>

	HAL_UART_Transmit(Nextion_UART, (uint8_t *)&buf, strlen(buf), 50);
 8002262:	a805      	add	r0, sp, #20
 8002264:	f7fd ff74 	bl	8000150 <strlen>
 8002268:	a905      	add	r1, sp, #20
 800226a:	b282      	uxth	r2, r0
 800226c:	2332      	movs	r3, #50	; 0x32
 800226e:	6828      	ldr	r0, [r5, #0]
 8002270:	f7ff fbf6 	bl	8001a60 <HAL_UART_Transmit>
}
 8002274:	b00a      	add	sp, #40	; 0x28
 8002276:	bd70      	pop	{r4, r5, r6, pc}
 8002278:	08005d1c 	.word	0x08005d1c
 800227c:	20000008 	.word	0x20000008
 8002280:	08005d2c 	.word	0x08005d2c

08002284 <Nextion_Backlight_Brightness>:
 * overide -> false   reset to default after power cycle
 */

void Nextion_Backlight_Brightness(uint8_t value, uint8_t overide)
{
	char buf[10] = "";
 8002284:	2300      	movs	r3, #0
{
 8002286:	b510      	push	{r4, lr}
 8002288:	b086      	sub	sp, #24
	char buf[10] = "";
 800228a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800228e:	f8ad 3014 	strh.w	r3, [sp, #20]
	char sps = 0xFF;

	if (overide > 0)
	{
		sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 8002292:	23ff      	movs	r3, #255	; 0xff
 8002294:	ac03      	add	r4, sp, #12
{
 8002296:	4602      	mov	r2, r0
		sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 8002298:	e9cd 3300 	strd	r3, r3, [sp]
 800229c:	4620      	mov	r0, r4
	if (overide > 0)
 800229e:	b971      	cbnz	r1, 80022be <Nextion_Backlight_Brightness+0x3a>
	}
	else
	{
		sprintf(buf, "dim=%i%c%c%c", value, sps, sps, sps);
 80022a0:	4909      	ldr	r1, [pc, #36]	; (80022c8 <Nextion_Backlight_Brightness+0x44>)
 80022a2:	f000 fb01 	bl	80028a8 <sprintf>
	}

	HAL_UART_Transmit(Nextion_UART, (uint8_t *)&buf, strlen(buf), 50);
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7fd ff52 	bl	8000150 <strlen>
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <Nextion_Backlight_Brightness+0x48>)
 80022ae:	b282      	uxth	r2, r0
 80022b0:	4621      	mov	r1, r4
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	2332      	movs	r3, #50	; 0x32
 80022b6:	f7ff fbd3 	bl	8001a60 <HAL_UART_Transmit>
}
 80022ba:	b006      	add	sp, #24
 80022bc:	bd10      	pop	{r4, pc}
		sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 80022be:	4904      	ldr	r1, [pc, #16]	; (80022d0 <Nextion_Backlight_Brightness+0x4c>)
 80022c0:	f000 faf2 	bl	80028a8 <sprintf>
 80022c4:	e7ef      	b.n	80022a6 <Nextion_Backlight_Brightness+0x22>
 80022c6:	bf00      	nop
 80022c8:	08005cf4 	.word	0x08005cf4
 80022cc:	20000008 	.word	0x20000008
 80022d0:	08005ce4 	.word	0x08005ce4

080022d4 <Nextion_Get_Current_Page>:
void Nextion_Get_Current_Page()
{
	char buf[10] = "";
	char sps = 0xFF;

	sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 80022d4:	23ff      	movs	r3, #255	; 0xff
	char buf[10] = "";
 80022d6:	2100      	movs	r1, #0
{
 80022d8:	b500      	push	{lr}
 80022da:	b087      	sub	sp, #28
	sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	461a      	mov	r2, r3
	char buf[10] = "";
 80022e0:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80022e4:	f8ad 1014 	strh.w	r1, [sp, #20]
	sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 80022e8:	a803      	add	r0, sp, #12
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <Nextion_Get_Current_Page+0x38>)
 80022ec:	f000 fadc 	bl	80028a8 <sprintf>

	HAL_UART_Transmit(Nextion_UART, (uint8_t *)&buf, strlen(buf), 50);
 80022f0:	a803      	add	r0, sp, #12
 80022f2:	f7fd ff2d 	bl	8000150 <strlen>
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <Nextion_Get_Current_Page+0x3c>)
 80022f8:	b282      	uxth	r2, r0
 80022fa:	a903      	add	r1, sp, #12
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	2332      	movs	r3, #50	; 0x32
 8002300:	f7ff fbae 	bl	8001a60 <HAL_UART_Transmit>
}
 8002304:	b007      	add	sp, #28
 8002306:	f85d fb04 	ldr.w	pc, [sp], #4
 800230a:	bf00      	nop
 800230c:	08005d04 	.word	0x08005d04
 8002310:	20000008 	.word	0x20000008

08002314 <Nextion_Loop>:
	char rx_char = 0;
 8002314:	2200      	movs	r2, #0
{
 8002316:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (Idle_Interrupt_Flag)
 8002318:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <Nextion_Loop+0xfc>)
{
 800231a:	b083      	sub	sp, #12
	if (Idle_Interrupt_Flag)
 800231c:	7819      	ldrb	r1, [r3, #0]
	char rx_char = 0;
 800231e:	f88d 2007 	strb.w	r2, [sp, #7]
	if (Idle_Interrupt_Flag)
 8002322:	b1c9      	cbz	r1, 8002358 <Nextion_Loop+0x44>
		while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8002324:	4c3b      	ldr	r4, [pc, #236]	; (8002414 <Nextion_Loop+0x100>)
				Nextion_In_Buffer[rx_char_count] = rx_char;
 8002326:	4d3c      	ldr	r5, [pc, #240]	; (8002418 <Nextion_Loop+0x104>)
 8002328:	4e3c      	ldr	r6, [pc, #240]	; (800241c <Nextion_Loop+0x108>)
		Idle_Interrupt_Flag = 0;
 800232a:	701a      	strb	r2, [r3, #0]
		while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 800232c:	4620      	mov	r0, r4
 800232e:	f000 f94d 	bl	80025cc <Ring_Buffer_Get_Count>
 8002332:	b188      	cbz	r0, 8002358 <Nextion_Loop+0x44>
			Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 8002334:	f10d 0107 	add.w	r1, sp, #7
 8002338:	4620      	mov	r0, r4
 800233a:	f000 f92f 	bl	800259c <Ring_Buffer_Get_Char>
			if (rx_char == 0xFF)
 800233e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d00a      	beq.n	800235c <Nextion_Loop+0x48>
				Nextion_In_Buffer[rx_char_count] = rx_char;
 8002346:	782a      	ldrb	r2, [r5, #0]
		while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8002348:	4620      	mov	r0, r4
				rx_char_count++;
 800234a:	1c51      	adds	r1, r2, #1
				Nextion_In_Buffer[rx_char_count] = rx_char;
 800234c:	54b3      	strb	r3, [r6, r2]
				rx_char_count++;
 800234e:	7029      	strb	r1, [r5, #0]
		while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8002350:	f000 f93c 	bl	80025cc <Ring_Buffer_Get_Count>
 8002354:	2800      	cmp	r0, #0
 8002356:	d1ed      	bne.n	8002334 <Nextion_Loop+0x20>
}
 8002358:	b003      	add	sp, #12
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 800235c:	f10d 0107 	add.w	r1, sp, #7
 8002360:	4620      	mov	r0, r4
 8002362:	f000 f91b 	bl	800259c <Ring_Buffer_Get_Char>
					if (rx_char == 0xFF)
 8002366:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d1de      	bne.n	800232c <Nextion_Loop+0x18>
						Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle,
 800236e:	f10d 0107 	add.w	r1, sp, #7
 8002372:	4620      	mov	r0, r4
 8002374:	f000 f912 	bl	800259c <Ring_Buffer_Get_Char>
						if (rx_char == 0xFF)
 8002378:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800237c:	2bff      	cmp	r3, #255	; 0xff
 800237e:	d1d5      	bne.n	800232c <Nextion_Loop+0x18>
							rx_char_count = 0;
 8002380:	2200      	movs	r2, #0
				switch (Nextion_In_Buffer[0])
 8002382:	7833      	ldrb	r3, [r6, #0]
							rx_char_count = 0;
 8002384:	702a      	strb	r2, [r5, #0]
				switch (Nextion_In_Buffer[0])
 8002386:	2b66      	cmp	r3, #102	; 0x66
 8002388:	d031      	beq.n	80023ee <Nextion_Loop+0xda>
 800238a:	d828      	bhi.n	80023de <Nextion_Loop+0xca>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d036      	beq.n	80023fe <Nextion_Loop+0xea>
 8002390:	2b65      	cmp	r3, #101	; 0x65
 8002392:	d11d      	bne.n	80023d0 <Nextion_Loop+0xbc>
	for (i = 0; i < Nextion_Object_Count; i++)
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <Nextion_Loop+0x10c>)
					Nextion_Find_Object(Nextion_In_Buffer[1], Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
 8002396:	7877      	ldrb	r7, [r6, #1]
	for (i = 0; i < Nextion_Object_Count; i++)
 8002398:	881a      	ldrh	r2, [r3, #0]
					Nextion_Find_Object(Nextion_In_Buffer[1], Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
 800239a:	f896 c002 	ldrb.w	ip, [r6, #2]
	for (i = 0; i < Nextion_Object_Count; i++)
 800239e:	b1ba      	cbz	r2, 80023d0 <Nextion_Loop+0xbc>
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <Nextion_Loop+0x110>)
 80023a2:	3a01      	subs	r2, #1
 80023a4:	b292      	uxth	r2, r2
 80023a6:	1d18      	adds	r0, r3, #4
 80023a8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80023ac:	e001      	b.n	80023b2 <Nextion_Loop+0x9e>
 80023ae:	4283      	cmp	r3, r0
 80023b0:	d00e      	beq.n	80023d0 <Nextion_Loop+0xbc>
		handle = Nextion_Object_List[i];
 80023b2:	f853 2b04 	ldr.w	r2, [r3], #4
		if (handle->Page_ID == pid && handle->Component_ID == cid)
 80023b6:	7811      	ldrb	r1, [r2, #0]
 80023b8:	42b9      	cmp	r1, r7
 80023ba:	d1f8      	bne.n	80023ae <Nextion_Loop+0x9a>
 80023bc:	7851      	ldrb	r1, [r2, #1]
 80023be:	4561      	cmp	r1, ip
 80023c0:	d1f5      	bne.n	80023ae <Nextion_Loop+0x9a>
					Nextion_Find_Object(Nextion_In_Buffer[1], Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
 80023c2:	78f3      	ldrb	r3, [r6, #3]
			if (NEX_EVENT_PUSH == event)
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d01f      	beq.n	8002408 <Nextion_Loop+0xf4>
			else if (NEX_EVENT_POP == event)
 80023c8:	b913      	cbnz	r3, 80023d0 <Nextion_Loop+0xbc>
				if (handle->Pop_Callback != NULL)
 80023ca:	68d3      	ldr	r3, [r2, #12]
 80023cc:	b103      	cbz	r3, 80023d0 <Nextion_Loop+0xbc>
					handle->Pop_Callback();
 80023ce:	4798      	blx	r3
				memset(Nextion_In_Buffer, 0x00, NEXTION_IN_BUFF_SIZE); //reset buffer
 80023d0:	2300      	movs	r3, #0
 80023d2:	6033      	str	r3, [r6, #0]
 80023d4:	6073      	str	r3, [r6, #4]
 80023d6:	60b3      	str	r3, [r6, #8]
 80023d8:	60f3      	str	r3, [r6, #12]
 80023da:	6133      	str	r3, [r6, #16]
 80023dc:	e7a6      	b.n	800232c <Nextion_Loop+0x18>
				switch (Nextion_In_Buffer[0])
 80023de:	2b70      	cmp	r3, #112	; 0x70
 80023e0:	d009      	beq.n	80023f6 <Nextion_Loop+0xe2>
 80023e2:	2b71      	cmp	r3, #113	; 0x71
 80023e4:	d1f4      	bne.n	80023d0 <Nextion_Loop+0xbc>
					Nextion_RX_Number_Callback(rx_number);
 80023e6:	7870      	ldrb	r0, [r6, #1]
 80023e8:	f7ff fe40 	bl	800206c <Nextion_RX_Number_Callback>
					break;
 80023ec:	e7f0      	b.n	80023d0 <Nextion_Loop+0xbc>
					Nextion_RX_Page_ID_Callback(Nextion_In_Buffer[1]);
 80023ee:	7870      	ldrb	r0, [r6, #1]
 80023f0:	f7ff fe30 	bl	8002054 <Nextion_RX_Page_ID_Callback>
					break;
 80023f4:	e7ec      	b.n	80023d0 <Nextion_Loop+0xbc>
					Nextion_RX_String_Callback(&Nextion_In_Buffer[1]);
 80023f6:	480c      	ldr	r0, [pc, #48]	; (8002428 <Nextion_Loop+0x114>)
 80023f8:	f7ff fe36 	bl	8002068 <Nextion_RX_String_Callback>
					break;
 80023fc:	e7e8      	b.n	80023d0 <Nextion_Loop+0xbc>
					CMD_Finished_Flag = 1;
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <Nextion_Loop+0x118>)
 8002400:	7013      	strb	r3, [r2, #0]
					Nextion_CMD_Finished_Callback();
 8002402:	f7ff fe35 	bl	8002070 <Nextion_CMD_Finished_Callback>
					break;
 8002406:	e7e3      	b.n	80023d0 <Nextion_Loop+0xbc>
				if (handle->Push_Callback != NULL)
 8002408:	6893      	ldr	r3, [r2, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1df      	bne.n	80023ce <Nextion_Loop+0xba>
 800240e:	e7df      	b.n	80023d0 <Nextion_Loop+0xbc>
 8002410:	200009e0 	.word	0x200009e0
 8002414:	20000b2c 	.word	0x20000b2c
 8002418:	20000b38 	.word	0x20000b38
 800241c:	20000ba8 	.word	0x20000ba8
 8002420:	200009e2 	.word	0x200009e2
 8002424:	200009e4 	.word	0x200009e4
 8002428:	20000ba9 	.word	0x20000ba9
 800242c:	200009df 	.word	0x200009df

08002430 <Nextion_Init>:
{
 8002430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_UART_Receive_DMA(Nextion_UART, (uint8_t *)UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 8002434:	4d3b      	ldr	r5, [pc, #236]	; (8002524 <Nextion_Init+0xf4>)
{
 8002436:	b083      	sub	sp, #12
	Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	493b      	ldr	r1, [pc, #236]	; (8002528 <Nextion_Init+0xf8>)
 800243c:	483b      	ldr	r0, [pc, #236]	; (800252c <Nextion_Init+0xfc>)
 800243e:	f000 f8a7 	bl	8002590 <Ring_Buffer_Init>
	HAL_UART_Receive_DMA(Nextion_UART, (uint8_t *)UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	4938      	ldr	r1, [pc, #224]	; (8002528 <Nextion_Init+0xf8>)
 8002446:	6828      	ldr	r0, [r5, #0]
 8002448:	f7ff fb90 	bl	8001b6c <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 800244c:	2300      	movs	r3, #0
	CMD_Finished_Flag = 0;
 800244e:	4698      	mov	r8, r3
	__HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 8002450:	6828      	ldr	r0, [r5, #0]
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 8002452:	4f37      	ldr	r7, [pc, #220]	; (8002530 <Nextion_Init+0x100>)
	__HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 8002454:	6801      	ldr	r1, [r0, #0]
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 8002456:	683c      	ldr	r4, [r7, #0]
	__HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 8002458:	68ca      	ldr	r2, [r1, #12]
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 800245a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	__HAL_UART_ENABLE_IT(Nextion_UART, UART_IT_IDLE);
 800245e:	f042 0210 	orr.w	r2, r2, #16
 8002462:	60ca      	str	r2, [r1, #12]
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 8002464:	461a      	mov	r2, r3
 8002466:	4933      	ldr	r1, [pc, #204]	; (8002534 <Nextion_Init+0x104>)
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 8002468:	f8ad 4004 	strh.w	r4, [sp, #4]
 800246c:	f88d 9006 	strb.w	r9, [sp, #6]
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 8002470:	f7ff faf6 	bl	8001a60 <HAL_UART_Transmit>
	HAL_UART_Transmit(Nextion_UART, delimiter, 3, 10);
 8002474:	a901      	add	r1, sp, #4
 8002476:	230a      	movs	r3, #10
 8002478:	2203      	movs	r2, #3
 800247a:	6828      	ldr	r0, [r5, #0]
 800247c:	f7ff faf0 	bl	8001a60 <HAL_UART_Transmit>
	CMD_Finished_Flag = 0;
 8002480:	4e2d      	ldr	r6, [pc, #180]	; (8002538 <Nextion_Init+0x108>)
	HAL_Delay(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f7fe fcca 	bl	8000e1c <HAL_Delay>
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 8002488:	2346      	movs	r3, #70	; 0x46
 800248a:	2207      	movs	r2, #7
 800248c:	492b      	ldr	r1, [pc, #172]	; (800253c <Nextion_Init+0x10c>)
 800248e:	6828      	ldr	r0, [r5, #0]
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 8002490:	f8ad 4004 	strh.w	r4, [sp, #4]
 8002494:	f88d 9006 	strb.w	r9, [sp, #6]
	CMD_Finished_Flag = 0;
 8002498:	f886 8000 	strb.w	r8, [r6]
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 800249c:	f7ff fae0 	bl	8001a60 <HAL_UART_Transmit>
	HAL_UART_Transmit(Nextion_UART, delimiter, 3, 10);
 80024a0:	230a      	movs	r3, #10
 80024a2:	a901      	add	r1, sp, #4
 80024a4:	6828      	ldr	r0, [r5, #0]
 80024a6:	2203      	movs	r2, #3
 80024a8:	f7ff fada 	bl	8001a60 <HAL_UART_Transmit>
 80024ac:	4c24      	ldr	r4, [pc, #144]	; (8002540 <Nextion_Init+0x110>)
	CMD_Finished_Flag = 0;
 80024ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b2:	f886 8000 	strb.w	r8, [r6]
 80024b6:	e001      	b.n	80024bc <Nextion_Init+0x8c>
	while (!Idle_Interrupt_Flag && --timeout)
 80024b8:	3b01      	subs	r3, #1
 80024ba:	d02e      	beq.n	800251a <Nextion_Init+0xea>
 80024bc:	7822      	ldrb	r2, [r4, #0]
 80024be:	2a00      	cmp	r2, #0
 80024c0:	d0fa      	beq.n	80024b8 <Nextion_Init+0x88>
		Nextion_Loop();
 80024c2:	f7ff ff27 	bl	8002314 <Nextion_Loop>
		if (CMD_Finished_Flag)
 80024c6:	7833      	ldrb	r3, [r6, #0]
 80024c8:	b33b      	cbz	r3, 800251a <Nextion_Init+0xea>
			CMD_Finished_Flag = 0;
 80024ca:	f04f 0800 	mov.w	r8, #0
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 80024ce:	6838      	ldr	r0, [r7, #0]
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 80024d0:	233c      	movs	r3, #60	; 0x3c
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 80024d2:	0c07      	lsrs	r7, r0, #16
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 80024d4:	2206      	movs	r2, #6
 80024d6:	491b      	ldr	r1, [pc, #108]	; (8002544 <Nextion_Init+0x114>)
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 80024d8:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 80024dc:	6828      	ldr	r0, [r5, #0]
	uint8_t delimiter[3] = {0xFF, 0xFF, 0xFF};
 80024de:	f88d 7006 	strb.w	r7, [sp, #6]
			CMD_Finished_Flag = 0;
 80024e2:	f886 8000 	strb.w	r8, [r6]
	HAL_UART_Transmit(Nextion_UART, (uint8_t *)cmd, len, len * 10);
 80024e6:	f7ff fabb 	bl	8001a60 <HAL_UART_Transmit>
	HAL_UART_Transmit(Nextion_UART, delimiter, 3, 10);
 80024ea:	230a      	movs	r3, #10
 80024ec:	a901      	add	r1, sp, #4
 80024ee:	6828      	ldr	r0, [r5, #0]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f7ff fab5 	bl	8001a60 <HAL_UART_Transmit>
	CMD_Finished_Flag = 0;
 80024f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fa:	f886 8000 	strb.w	r8, [r6]
 80024fe:	e001      	b.n	8002504 <Nextion_Init+0xd4>
	while (!Idle_Interrupt_Flag && --timeout)
 8002500:	3b01      	subs	r3, #1
 8002502:	d00a      	beq.n	800251a <Nextion_Init+0xea>
 8002504:	7822      	ldrb	r2, [r4, #0]
 8002506:	2a00      	cmp	r2, #0
 8002508:	d0fa      	beq.n	8002500 <Nextion_Init+0xd0>
		Nextion_Loop();
 800250a:	f7ff ff03 	bl	8002314 <Nextion_Loop>
		if (CMD_Finished_Flag)
 800250e:	7833      	ldrb	r3, [r6, #0]
 8002510:	b11b      	cbz	r3, 800251a <Nextion_Init+0xea>
			CMD_Finished_Flag = 0;
 8002512:	2300      	movs	r3, #0
			return NEXTION_OK;
 8002514:	2001      	movs	r0, #1
			CMD_Finished_Flag = 0;
 8002516:	7033      	strb	r3, [r6, #0]
 8002518:	e000      	b.n	800251c <Nextion_Init+0xec>
	return NEXTION_ERR;
 800251a:	2000      	movs	r0, #0
}
 800251c:	b003      	add	sp, #12
 800251e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008
 8002528:	20000aac 	.word	0x20000aac
 800252c:	20000b2c 	.word	0x20000b2c
 8002530:	08005cb8 	.word	0x08005cb8
 8002534:	08005d10 	.word	0x08005d10
 8002538:	200009df 	.word	0x200009df
 800253c:	08005d14 	.word	0x08005d14
 8002540:	200009e0 	.word	0x200009e0
 8002544:	08005cd0 	.word	0x08005cd0

08002548 <Nextion_UART_RX_ISR>:
}

/******************************* ISR ****************************/
void Nextion_UART_RX_ISR()
{
	if (__HAL_UART_GET_FLAG(Nextion_UART, UART_FLAG_IDLE))
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <Nextion_UART_RX_ISR+0x3c>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	06c9      	lsls	r1, r1, #27
 8002552:	d515      	bpl.n	8002580 <Nextion_UART_RX_ISR+0x38>
{
 8002554:	b430      	push	{r4, r5}
	{
		Idle_Interrupt_Flag = 1;

		__HAL_UART_CLEAR_IDLEFLAG(Nextion_UART);
 8002556:	2000      	movs	r0, #0
		Idle_Interrupt_Flag = 1;
 8002558:	2501      	movs	r5, #1
 800255a:	4c0b      	ldr	r4, [pc, #44]	; (8002588 <Nextion_UART_RX_ISR+0x40>)
{
 800255c:	b082      	sub	sp, #8
		Idle_Interrupt_Flag = 1;
 800255e:	7025      	strb	r5, [r4, #0]
		__HAL_UART_CLEAR_IDLEFLAG(Nextion_UART);
 8002560:	9001      	str	r0, [sp, #4]

		/** data is written to buffer via uart DMA in background*/
		/** need to update Write_Index manually */
		UART_Ring_Buffer_Handle.Write_Index = (UART_RING_BUFFER_SIZE - (Nextion_UART->hdmarx->Instance->CNDTR));
 8002562:	6b51      	ldr	r1, [r2, #52]	; 0x34
		__HAL_UART_CLEAR_IDLEFLAG(Nextion_UART);
 8002564:	681a      	ldr	r2, [r3, #0]
		UART_Ring_Buffer_Handle.Write_Index = (UART_RING_BUFFER_SIZE - (Nextion_UART->hdmarx->Instance->CNDTR));
 8002566:	6809      	ldr	r1, [r1, #0]
		__HAL_UART_CLEAR_IDLEFLAG(Nextion_UART);
 8002568:	9201      	str	r2, [sp, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
		UART_Ring_Buffer_Handle.Write_Index = (UART_RING_BUFFER_SIZE - (Nextion_UART->hdmarx->Instance->CNDTR));
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <Nextion_UART_RX_ISR+0x44>)
		__HAL_UART_CLEAR_IDLEFLAG(Nextion_UART);
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	9b01      	ldr	r3, [sp, #4]
		UART_Ring_Buffer_Handle.Write_Index = (UART_RING_BUFFER_SIZE - (Nextion_UART->hdmarx->Instance->CNDTR));
 8002572:	684b      	ldr	r3, [r1, #4]
 8002574:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002578:	8093      	strh	r3, [r2, #4]
	}
}
 800257a:	b002      	add	sp, #8
 800257c:	bc30      	pop	{r4, r5}
 800257e:	4770      	bx	lr
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000008 	.word	0x20000008
 8002588:	200009e0 	.word	0x200009e0
 800258c:	20000b2c 	.word	0x20000b2c

08002590 <Ring_Buffer_Init>:

void Ring_Buffer_Init(Ring_Buffer_t *handle, char *buffer, uint16_t size)
{
    handle->Buffer = buffer;
    handle->Read_Index = 0;
    handle->Write_Index = 0;
 8002590:	2300      	movs	r3, #0
    handle->Buffer = buffer;
 8002592:	6001      	str	r1, [r0, #0]
    handle->Size = size;
 8002594:	8102      	strh	r2, [r0, #8]
    handle->Write_Index = 0;
 8002596:	6043      	str	r3, [r0, #4]
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop

0800259c <Ring_Buffer_Get_Char>:
    return 1;
}

uint8_t Ring_Buffer_Get_Char(Ring_Buffer_t *handle, char *data)
{
    if (handle->Read_Index == handle->Write_Index)
 800259c:	88c2      	ldrh	r2, [r0, #6]
{
 800259e:	4603      	mov	r3, r0
    if (handle->Read_Index == handle->Write_Index)
 80025a0:	8880      	ldrh	r0, [r0, #4]
 80025a2:	4290      	cmp	r0, r2
 80025a4:	d00e      	beq.n	80025c4 <Ring_Buffer_Get_Char+0x28>
    {
        *data = 0;
        return 0;
    }

    *data = handle->Buffer[handle->Read_Index];
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	5c82      	ldrb	r2, [r0, r2]
 80025aa:	700a      	strb	r2, [r1, #0]

    handle->Read_Index++;
 80025ac:	88da      	ldrh	r2, [r3, #6]

    if (handle->Read_Index == handle->Size)
 80025ae:	8919      	ldrh	r1, [r3, #8]
    handle->Read_Index++;
 80025b0:	3201      	adds	r2, #1
 80025b2:	b292      	uxth	r2, r2
    if (handle->Read_Index == handle->Size)
 80025b4:	4291      	cmp	r1, r2
    handle->Read_Index++;
 80025b6:	80da      	strh	r2, [r3, #6]
    {
        handle->Read_Index = 0;
 80025b8:	bf03      	ittte	eq
 80025ba:	2200      	moveq	r2, #0
    }

    return 1;
 80025bc:	2001      	moveq	r0, #1
        handle->Read_Index = 0;
 80025be:	80da      	strheq	r2, [r3, #6]
    return 1;
 80025c0:	2001      	movne	r0, #1
}
 80025c2:	4770      	bx	lr
        *data = 0;
 80025c4:	2000      	movs	r0, #0
 80025c6:	7008      	strb	r0, [r1, #0]
        return 0;
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <Ring_Buffer_Get_Count>:
    handle->Read_Index = handle->Write_Index;
}

uint8_t Ring_Buffer_Get_Count(Ring_Buffer_t *handle)
{
    if (handle->Write_Index >= handle->Read_Index)
 80025cc:	8881      	ldrh	r1, [r0, #4]
 80025ce:	88c2      	ldrh	r2, [r0, #6]
 80025d0:	b2cb      	uxtb	r3, r1
 80025d2:	4291      	cmp	r1, r2
    {
        return (handle->Write_Index - handle->Read_Index);
    }
    return (handle->Size - (handle->Read_Index - handle->Write_Index));
 80025d4:	bf38      	it	cc
 80025d6:	7a00      	ldrbcc	r0, [r0, #8]
{
 80025d8:	b410      	push	{r4}
    return (handle->Size - (handle->Read_Index - handle->Write_Index));
 80025da:	bf38      	it	cc
 80025dc:	18c0      	addcc	r0, r0, r3
 80025de:	b2d4      	uxtb	r4, r2
        return (handle->Write_Index - handle->Read_Index);
 80025e0:	bf2c      	ite	cs
 80025e2:	1b18      	subcs	r0, r3, r4
    return (handle->Size - (handle->Read_Index - handle->Write_Index));
 80025e4:	1b00      	subcc	r0, r0, r4
 80025e6:	b2c0      	uxtb	r0, r0
}
 80025e8:	bc10      	pop	{r4}
 80025ea:	4770      	bx	lr

080025ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_MspInit+0x3c>)
{
 80025ee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80025f0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	f002 0201 	and.w	r2, r2, #1
 8002600:	9200      	str	r2, [sp, #0]
 8002602:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800260a:	61da      	str	r2, [r3, #28]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002616:	684b      	ldr	r3, [r1, #4]
 8002618:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800261c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002620:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002622:	b002      	add	sp, #8
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40010000 	.word	0x40010000

08002630 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop

08002634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002634:	e7fe      	b.n	8002634 <HardFault_Handler>
 8002636:	bf00      	nop

08002638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002638:	e7fe      	b.n	8002638 <MemManage_Handler>
 800263a:	bf00      	nop

0800263c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263c:	e7fe      	b.n	800263c <BusFault_Handler>
 800263e:	bf00      	nop

08002640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002640:	e7fe      	b.n	8002640 <UsageFault_Handler>
 8002642:	bf00      	nop

08002644 <SVC_Handler>:
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <DebugMon_Handler>:
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <PendSV_Handler>:
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002650:	f7fe bbd2 	b.w	8000df8 <HAL_IncTick>

08002654 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002654:	4801      	ldr	r0, [pc, #4]	; (800265c <DMA1_Channel5_IRQHandler+0x8>)
 8002656:	f7fe bd25 	b.w	80010a4 <HAL_DMA_IRQHandler>
 800265a:	bf00      	nop
 800265c:	20000bbc 	.word	0x20000bbc

08002660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  Nextion_UART_RX_ISR();
 8002662:	f7ff ff71 	bl	8002548 <Nextion_UART_RX_ISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_IRQHandler(&huart1);
 800266a:	4801      	ldr	r0, [pc, #4]	; (8002670 <USART1_IRQHandler+0x10>)
 800266c:	f7ff bb60 	b.w	8001d30 <HAL_UART_IRQHandler>
 8002670:	20000c00 	.word	0x20000c00

08002674 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <_sbrk+0x34>)
{
 8002676:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	b133      	cbz	r3, 800268a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800267c:	4669      	mov	r1, sp
 800267e:	4418      	add	r0, r3
 8002680:	4288      	cmp	r0, r1
 8002682:	d809      	bhi.n	8002698 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002684:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <_sbrk+0x38>)
 800268c:	460b      	mov	r3, r1
 800268e:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002690:	4669      	mov	r1, sp
 8002692:	4418      	add	r0, r3
 8002694:	4288      	cmp	r0, r1
 8002696:	d9f5      	bls.n	8002684 <_sbrk+0x10>
		errno = ENOMEM;
 8002698:	f000 f8d4 	bl	8002844 <__errno>
 800269c:	220c      	movs	r2, #12
		return (caddr_t) -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		errno = ENOMEM;
 80026a2:	6002      	str	r2, [r0, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd08      	pop	{r3, pc}
 80026a8:	20000b3c 	.word	0x20000b3c
 80026ac:	20000c50 	.word	0x20000c50

080026b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026b0:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026b2:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026b6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 80026be:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026c0:	480e      	ldr	r0, [pc, #56]	; (80026fc <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 80026c2:	f041 0101 	orr.w	r1, r1, #1
 80026c6:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	400a      	ands	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80026d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026d8:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80026e8:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 80026ea:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026ec:	6084      	str	r4, [r0, #8]
#endif 
}
 80026ee:	bc30      	pop	{r4, r5}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	f8ff0000 	.word	0xf8ff0000
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002700:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 9600;
 8002704:	f44f 5516 	mov.w	r5, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002708:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_USART1_UART_Init+0x30>)
 800270c:	4c09      	ldr	r4, [pc, #36]	; (8002734 <MX_USART1_UART_Init+0x34>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800270e:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 8002710:	e9c3 4500 	strd	r4, r5, [r3]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002714:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002716:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800271a:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002720:	f7ff f934 	bl	800198c <HAL_UART_Init>
 8002724:	b900      	cbnz	r0, 8002728 <MX_USART1_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8002726:	bd38      	pop	{r3, r4, r5, pc}
 8002728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800272c:	f7ff bd1a 	b.w	8002164 <Error_Handler>
 8002730:	20000c00 	.word	0x20000c00
 8002734:	40013800 	.word	0x40013800

08002738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002738:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 800273c:	6802      	ldr	r2, [r0, #0]
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_UART_MspInit+0xb0>)
{
 8002740:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART1)
 8002742:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002748:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(uartHandle->Instance==USART1)
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800274e:	b006      	add	sp, #24
 8002750:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002756:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800275a:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800275c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002766:	619a      	str	r2, [r3, #24]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800276e:	9200      	str	r2, [sp, #0]
 8002770:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	f042 0204 	orr.w	r2, r2, #4
 8002778:	619a      	str	r2, [r3, #24]
 800277a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800277c:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	4818      	ldr	r0, [pc, #96]	; (80027ec <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800278c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f7fe fd1f 	bl	80011d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002792:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	a902      	add	r1, sp, #8
 8002798:	4814      	ldr	r0, [pc, #80]	; (80027ec <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800279a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f7fe fd16 	bl	80011d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027a4:	2080      	movs	r0, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80027a6:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80027ac:	4d10      	ldr	r5, [pc, #64]	; (80027f0 <HAL_UART_MspInit+0xb8>)
 80027ae:	4911      	ldr	r1, [pc, #68]	; (80027f4 <HAL_UART_MspInit+0xbc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027b0:	60e8      	str	r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027b2:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b4:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b8:	e9c5 4404 	strd	r4, r4, [r5, #16]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80027bc:	6029      	str	r1, [r5, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027be:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027c2:	f7fe fbab 	bl	8000f1c <HAL_DMA_Init>
 80027c6:	b958      	cbnz	r0, 80027e0 <HAL_UART_MspInit+0xa8>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80027cc:	6375      	str	r5, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027ce:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80027d0:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027d2:	f7fe fb47 	bl	8000e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027d6:	2025      	movs	r0, #37	; 0x25
 80027d8:	f7fe fb7a 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
}
 80027dc:	b006      	add	sp, #24
 80027de:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80027e0:	f7ff fcc0 	bl	8002164 <Error_Handler>
 80027e4:	e7f0      	b.n	80027c8 <HAL_UART_MspInit+0x90>
 80027e6:	bf00      	nop
 80027e8:	40013800 	.word	0x40013800
 80027ec:	40010800 	.word	0x40010800
 80027f0:	20000bbc 	.word	0x20000bbc
 80027f4:	40020058 	.word	0x40020058

080027f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027fa:	e003      	b.n	8002804 <LoopCopyDataInit>

080027fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002800:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002802:	3104      	adds	r1, #4

08002804 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002804:	480a      	ldr	r0, [pc, #40]	; (8002830 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002808:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800280a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800280c:	d3f6      	bcc.n	80027fc <CopyDataInit>
  ldr r2, =_sbss
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002810:	e002      	b.n	8002818 <LoopFillZerobss>

08002812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002814:	f842 3b04 	str.w	r3, [r2], #4

08002818 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800281a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800281c:	d3f9      	bcc.n	8002812 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800281e:	f7ff ff47 	bl	80026b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002822:	f000 f815 	bl	8002850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002826:	f7ff fc53 	bl	80020d0 <main>
  bx lr
 800282a:	4770      	bx	lr
  ldr r3, =_sidata
 800282c:	08005fec 	.word	0x08005fec
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002834:	200009c0 	.word	0x200009c0
  ldr r2, =_sbss
 8002838:	200009c0 	.word	0x200009c0
  ldr r3, = _ebss
 800283c:	20000c50 	.word	0x20000c50

08002840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002840:	e7fe      	b.n	8002840 <ADC1_2_IRQHandler>
	...

08002844 <__errno>:
 8002844:	4b01      	ldr	r3, [pc, #4]	; (800284c <__errno+0x8>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000010 	.word	0x20000010

08002850 <__libc_init_array>:
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	2500      	movs	r5, #0
 8002854:	4e0c      	ldr	r6, [pc, #48]	; (8002888 <__libc_init_array+0x38>)
 8002856:	4c0d      	ldr	r4, [pc, #52]	; (800288c <__libc_init_array+0x3c>)
 8002858:	1ba4      	subs	r4, r4, r6
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	42a5      	cmp	r5, r4
 800285e:	d109      	bne.n	8002874 <__libc_init_array+0x24>
 8002860:	f003 fa16 	bl	8005c90 <_init>
 8002864:	2500      	movs	r5, #0
 8002866:	4e0a      	ldr	r6, [pc, #40]	; (8002890 <__libc_init_array+0x40>)
 8002868:	4c0a      	ldr	r4, [pc, #40]	; (8002894 <__libc_init_array+0x44>)
 800286a:	1ba4      	subs	r4, r4, r6
 800286c:	10a4      	asrs	r4, r4, #2
 800286e:	42a5      	cmp	r5, r4
 8002870:	d105      	bne.n	800287e <__libc_init_array+0x2e>
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002878:	4798      	blx	r3
 800287a:	3501      	adds	r5, #1
 800287c:	e7ee      	b.n	800285c <__libc_init_array+0xc>
 800287e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002882:	4798      	blx	r3
 8002884:	3501      	adds	r5, #1
 8002886:	e7f2      	b.n	800286e <__libc_init_array+0x1e>
 8002888:	08005fe0 	.word	0x08005fe0
 800288c:	08005fe0 	.word	0x08005fe0
 8002890:	08005fe0 	.word	0x08005fe0
 8002894:	08005fe8 	.word	0x08005fe8

08002898 <memset>:
 8002898:	4603      	mov	r3, r0
 800289a:	4402      	add	r2, r0
 800289c:	4293      	cmp	r3, r2
 800289e:	d100      	bne.n	80028a2 <memset+0xa>
 80028a0:	4770      	bx	lr
 80028a2:	f803 1b01 	strb.w	r1, [r3], #1
 80028a6:	e7f9      	b.n	800289c <memset+0x4>

080028a8 <sprintf>:
 80028a8:	b40e      	push	{r1, r2, r3}
 80028aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028ae:	b500      	push	{lr}
 80028b0:	b09c      	sub	sp, #112	; 0x70
 80028b2:	ab1d      	add	r3, sp, #116	; 0x74
 80028b4:	9002      	str	r0, [sp, #8]
 80028b6:	9006      	str	r0, [sp, #24]
 80028b8:	9107      	str	r1, [sp, #28]
 80028ba:	9104      	str	r1, [sp, #16]
 80028bc:	4808      	ldr	r0, [pc, #32]	; (80028e0 <sprintf+0x38>)
 80028be:	4909      	ldr	r1, [pc, #36]	; (80028e4 <sprintf+0x3c>)
 80028c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80028c4:	9105      	str	r1, [sp, #20]
 80028c6:	6800      	ldr	r0, [r0, #0]
 80028c8:	a902      	add	r1, sp, #8
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	f000 f80c 	bl	80028e8 <_svfprintf_r>
 80028d0:	2200      	movs	r2, #0
 80028d2:	9b02      	ldr	r3, [sp, #8]
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	b01c      	add	sp, #112	; 0x70
 80028d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80028dc:	b003      	add	sp, #12
 80028de:	4770      	bx	lr
 80028e0:	20000010 	.word	0x20000010
 80028e4:	ffff0208 	.word	0xffff0208

080028e8 <_svfprintf_r>:
 80028e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ec:	b0d5      	sub	sp, #340	; 0x154
 80028ee:	4689      	mov	r9, r1
 80028f0:	4693      	mov	fp, r2
 80028f2:	461e      	mov	r6, r3
 80028f4:	9007      	str	r0, [sp, #28]
 80028f6:	f002 f969 	bl	8004bcc <_localeconv_r>
 80028fa:	6803      	ldr	r3, [r0, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	931a      	str	r3, [sp, #104]	; 0x68
 8002900:	f7fd fc26 	bl	8000150 <strlen>
 8002904:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002908:	900f      	str	r0, [sp, #60]	; 0x3c
 800290a:	0618      	lsls	r0, r3, #24
 800290c:	d518      	bpl.n	8002940 <_svfprintf_r+0x58>
 800290e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002912:	b9ab      	cbnz	r3, 8002940 <_svfprintf_r+0x58>
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	9807      	ldr	r0, [sp, #28]
 8002918:	f002 f968 	bl	8004bec <_malloc_r>
 800291c:	f8c9 0000 	str.w	r0, [r9]
 8002920:	f8c9 0010 	str.w	r0, [r9, #16]
 8002924:	b948      	cbnz	r0, 800293a <_svfprintf_r+0x52>
 8002926:	230c      	movs	r3, #12
 8002928:	9a07      	ldr	r2, [sp, #28]
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002930:	9310      	str	r3, [sp, #64]	; 0x40
 8002932:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002934:	b055      	add	sp, #340	; 0x154
 8002936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800293a:	2340      	movs	r3, #64	; 0x40
 800293c:	f8c9 3014 	str.w	r3, [r9, #20]
 8002940:	2300      	movs	r3, #0
 8002942:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8002946:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800294a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 800294e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8002952:	ac2b      	add	r4, sp, #172	; 0xac
 8002954:	9428      	str	r4, [sp, #160]	; 0xa0
 8002956:	9308      	str	r3, [sp, #32]
 8002958:	930d      	str	r3, [sp, #52]	; 0x34
 800295a:	9316      	str	r3, [sp, #88]	; 0x58
 800295c:	931d      	str	r3, [sp, #116]	; 0x74
 800295e:	9310      	str	r3, [sp, #64]	; 0x40
 8002960:	465d      	mov	r5, fp
 8002962:	462b      	mov	r3, r5
 8002964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002968:	b112      	cbz	r2, 8002970 <_svfprintf_r+0x88>
 800296a:	2a25      	cmp	r2, #37	; 0x25
 800296c:	f040 80e4 	bne.w	8002b38 <_svfprintf_r+0x250>
 8002970:	ebb5 070b 	subs.w	r7, r5, fp
 8002974:	d00e      	beq.n	8002994 <_svfprintf_r+0xac>
 8002976:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002978:	e9c4 b700 	strd	fp, r7, [r4]
 800297c:	443b      	add	r3, r7
 800297e:	932a      	str	r3, [sp, #168]	; 0xa8
 8002980:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002982:	3301      	adds	r3, #1
 8002984:	2b07      	cmp	r3, #7
 8002986:	9329      	str	r3, [sp, #164]	; 0xa4
 8002988:	f300 80d8 	bgt.w	8002b3c <_svfprintf_r+0x254>
 800298c:	3408      	adds	r4, #8
 800298e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002990:	443b      	add	r3, r7
 8002992:	9310      	str	r3, [sp, #64]	; 0x40
 8002994:	782b      	ldrb	r3, [r5, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f001 81a4 	beq.w	8003ce4 <_svfprintf_r+0x13fc>
 800299c:	1c6b      	adds	r3, r5, #1
 800299e:	930e      	str	r3, [sp, #56]	; 0x38
 80029a0:	2300      	movs	r3, #0
 80029a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80029a6:	469a      	mov	sl, r3
 80029a8:	270a      	movs	r7, #10
 80029aa:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80029ae:	9311      	str	r3, [sp, #68]	; 0x44
 80029b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	930a      	str	r3, [sp, #40]	; 0x28
 80029b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029b8:	3301      	adds	r3, #1
 80029ba:	930e      	str	r3, [sp, #56]	; 0x38
 80029bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029be:	3b20      	subs	r3, #32
 80029c0:	2b5a      	cmp	r3, #90	; 0x5a
 80029c2:	f200 8614 	bhi.w	80035ee <_svfprintf_r+0xd06>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <_svfprintf_r+0xe4>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	08002bcf 	.word	0x08002bcf
 80029d0:	080035ef 	.word	0x080035ef
 80029d4:	080035ef 	.word	0x080035ef
 80029d8:	08002be1 	.word	0x08002be1
 80029dc:	080035ef 	.word	0x080035ef
 80029e0:	080035ef 	.word	0x080035ef
 80029e4:	080035ef 	.word	0x080035ef
 80029e8:	08002b95 	.word	0x08002b95
 80029ec:	080035ef 	.word	0x080035ef
 80029f0:	080035ef 	.word	0x080035ef
 80029f4:	08002be7 	.word	0x08002be7
 80029f8:	08002bfd 	.word	0x08002bfd
 80029fc:	080035ef 	.word	0x080035ef
 8002a00:	08002bf7 	.word	0x08002bf7
 8002a04:	08002c01 	.word	0x08002c01
 8002a08:	080035ef 	.word	0x080035ef
 8002a0c:	08002c33 	.word	0x08002c33
 8002a10:	08002c39 	.word	0x08002c39
 8002a14:	08002c39 	.word	0x08002c39
 8002a18:	08002c39 	.word	0x08002c39
 8002a1c:	08002c39 	.word	0x08002c39
 8002a20:	08002c39 	.word	0x08002c39
 8002a24:	08002c39 	.word	0x08002c39
 8002a28:	08002c39 	.word	0x08002c39
 8002a2c:	08002c39 	.word	0x08002c39
 8002a30:	08002c39 	.word	0x08002c39
 8002a34:	080035ef 	.word	0x080035ef
 8002a38:	080035ef 	.word	0x080035ef
 8002a3c:	080035ef 	.word	0x080035ef
 8002a40:	080035ef 	.word	0x080035ef
 8002a44:	080035ef 	.word	0x080035ef
 8002a48:	080035ef 	.word	0x080035ef
 8002a4c:	080035ef 	.word	0x080035ef
 8002a50:	08002d27 	.word	0x08002d27
 8002a54:	080035ef 	.word	0x080035ef
 8002a58:	08002c93 	.word	0x08002c93
 8002a5c:	08002cb5 	.word	0x08002cb5
 8002a60:	08002d27 	.word	0x08002d27
 8002a64:	08002d27 	.word	0x08002d27
 8002a68:	08002d27 	.word	0x08002d27
 8002a6c:	080035ef 	.word	0x080035ef
 8002a70:	080035ef 	.word	0x080035ef
 8002a74:	080035ef 	.word	0x080035ef
 8002a78:	080035ef 	.word	0x080035ef
 8002a7c:	08002c59 	.word	0x08002c59
 8002a80:	080035ef 	.word	0x080035ef
 8002a84:	080035ef 	.word	0x080035ef
 8002a88:	080031f5 	.word	0x080031f5
 8002a8c:	080035ef 	.word	0x080035ef
 8002a90:	080035ef 	.word	0x080035ef
 8002a94:	080035ef 	.word	0x080035ef
 8002a98:	08003281 	.word	0x08003281
 8002a9c:	080035ef 	.word	0x080035ef
 8002aa0:	0800345d 	.word	0x0800345d
 8002aa4:	080035ef 	.word	0x080035ef
 8002aa8:	080035ef 	.word	0x080035ef
 8002aac:	08002b55 	.word	0x08002b55
 8002ab0:	080035ef 	.word	0x080035ef
 8002ab4:	080035ef 	.word	0x080035ef
 8002ab8:	080035ef 	.word	0x080035ef
 8002abc:	080035ef 	.word	0x080035ef
 8002ac0:	080035ef 	.word	0x080035ef
 8002ac4:	080035ef 	.word	0x080035ef
 8002ac8:	080035ef 	.word	0x080035ef
 8002acc:	080035ef 	.word	0x080035ef
 8002ad0:	08002d27 	.word	0x08002d27
 8002ad4:	080035ef 	.word	0x080035ef
 8002ad8:	08002c93 	.word	0x08002c93
 8002adc:	08002cb9 	.word	0x08002cb9
 8002ae0:	08002d27 	.word	0x08002d27
 8002ae4:	08002d27 	.word	0x08002d27
 8002ae8:	08002d27 	.word	0x08002d27
 8002aec:	08002c5f 	.word	0x08002c5f
 8002af0:	08002cb9 	.word	0x08002cb9
 8002af4:	08002c87 	.word	0x08002c87
 8002af8:	080035ef 	.word	0x080035ef
 8002afc:	08002c79 	.word	0x08002c79
 8002b00:	080035ef 	.word	0x080035ef
 8002b04:	080031af 	.word	0x080031af
 8002b08:	080031f9 	.word	0x080031f9
 8002b0c:	08003261 	.word	0x08003261
 8002b10:	08002c87 	.word	0x08002c87
 8002b14:	080035ef 	.word	0x080035ef
 8002b18:	08003281 	.word	0x08003281
 8002b1c:	080029b1 	.word	0x080029b1
 8002b20:	08003461 	.word	0x08003461
 8002b24:	080035ef 	.word	0x080035ef
 8002b28:	080035ef 	.word	0x080035ef
 8002b2c:	0800349f 	.word	0x0800349f
 8002b30:	080035ef 	.word	0x080035ef
 8002b34:	080029b1 	.word	0x080029b1
 8002b38:	461d      	mov	r5, r3
 8002b3a:	e712      	b.n	8002962 <_svfprintf_r+0x7a>
 8002b3c:	aa28      	add	r2, sp, #160	; 0xa0
 8002b3e:	4649      	mov	r1, r9
 8002b40:	9807      	ldr	r0, [sp, #28]
 8002b42:	f002 fdb8 	bl	80056b6 <__ssprint_r>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	f040 8157 	bne.w	8002dfa <_svfprintf_r+0x512>
 8002b4c:	ac2b      	add	r4, sp, #172	; 0xac
 8002b4e:	e71e      	b.n	800298e <_svfprintf_r+0xa6>
 8002b50:	461e      	mov	r6, r3
 8002b52:	e72d      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002b54:	4bad      	ldr	r3, [pc, #692]	; (8002e0c <_svfprintf_r+0x524>)
 8002b56:	f01a 0f20 	tst.w	sl, #32
 8002b5a:	931c      	str	r3, [sp, #112]	; 0x70
 8002b5c:	f000 84a2 	beq.w	80034a4 <_svfprintf_r+0xbbc>
 8002b60:	3607      	adds	r6, #7
 8002b62:	f026 0607 	bic.w	r6, r6, #7
 8002b66:	f106 0308 	add.w	r3, r6, #8
 8002b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8002b6c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8002b70:	f01a 0f01 	tst.w	sl, #1
 8002b74:	d00a      	beq.n	8002b8c <_svfprintf_r+0x2a4>
 8002b76:	ea56 0307 	orrs.w	r3, r6, r7
 8002b7a:	d007      	beq.n	8002b8c <_svfprintf_r+0x2a4>
 8002b7c:	2330      	movs	r3, #48	; 0x30
 8002b7e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8002b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b84:	f04a 0a02 	orr.w	sl, sl, #2
 8002b88:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8002b8c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8002b90:	2302      	movs	r3, #2
 8002b92:	e33f      	b.n	8003214 <_svfprintf_r+0x92c>
 8002b94:	9807      	ldr	r0, [sp, #28]
 8002b96:	f002 f819 	bl	8004bcc <_localeconv_r>
 8002b9a:	6843      	ldr	r3, [r0, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	931d      	str	r3, [sp, #116]	; 0x74
 8002ba0:	f7fd fad6 	bl	8000150 <strlen>
 8002ba4:	9016      	str	r0, [sp, #88]	; 0x58
 8002ba6:	9807      	ldr	r0, [sp, #28]
 8002ba8:	f002 f810 	bl	8004bcc <_localeconv_r>
 8002bac:	6883      	ldr	r3, [r0, #8]
 8002bae:	930d      	str	r3, [sp, #52]	; 0x34
 8002bb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f43f aefc 	beq.w	80029b0 <_svfprintf_r+0xc8>
 8002bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f43f aef8 	beq.w	80029b0 <_svfprintf_r+0xc8>
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f43f aef4 	beq.w	80029b0 <_svfprintf_r+0xc8>
 8002bc8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8002bcc:	e6f0      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002bce:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f47f aeec 	bne.w	80029b0 <_svfprintf_r+0xc8>
 8002bd8:	2320      	movs	r3, #32
 8002bda:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002bde:	e6e7      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002be0:	f04a 0a01 	orr.w	sl, sl, #1
 8002be4:	e6e4      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002be6:	6832      	ldr	r2, [r6, #0]
 8002be8:	1d33      	adds	r3, r6, #4
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	9211      	str	r2, [sp, #68]	; 0x44
 8002bee:	daaf      	bge.n	8002b50 <_svfprintf_r+0x268>
 8002bf0:	461e      	mov	r6, r3
 8002bf2:	4252      	negs	r2, r2
 8002bf4:	9211      	str	r2, [sp, #68]	; 0x44
 8002bf6:	f04a 0a04 	orr.w	sl, sl, #4
 8002bfa:	e6d9      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002bfc:	232b      	movs	r3, #43	; 0x2b
 8002bfe:	e7ec      	b.n	8002bda <_svfprintf_r+0x2f2>
 8002c00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	2a2a      	cmp	r2, #42	; 0x2a
 8002c0a:	920a      	str	r2, [sp, #40]	; 0x28
 8002c0c:	d10f      	bne.n	8002c2e <_svfprintf_r+0x346>
 8002c0e:	6835      	ldr	r5, [r6, #0]
 8002c10:	930e      	str	r3, [sp, #56]	; 0x38
 8002c12:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8002c16:	3604      	adds	r6, #4
 8002c18:	e6ca      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002c1a:	fb07 2505 	mla	r5, r7, r5, r2
 8002c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c22:	920a      	str	r2, [sp, #40]	; 0x28
 8002c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c26:	3a30      	subs	r2, #48	; 0x30
 8002c28:	2a09      	cmp	r2, #9
 8002c2a:	d9f6      	bls.n	8002c1a <_svfprintf_r+0x332>
 8002c2c:	e6c5      	b.n	80029ba <_svfprintf_r+0xd2>
 8002c2e:	2500      	movs	r5, #0
 8002c30:	e7f8      	b.n	8002c24 <_svfprintf_r+0x33c>
 8002c32:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8002c36:	e6bb      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002c38:	2200      	movs	r2, #0
 8002c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c3c:	9211      	str	r2, [sp, #68]	; 0x44
 8002c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002c42:	3a30      	subs	r2, #48	; 0x30
 8002c44:	fb07 2201 	mla	r2, r7, r1, r2
 8002c48:	9211      	str	r2, [sp, #68]	; 0x44
 8002c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c4e:	920a      	str	r2, [sp, #40]	; 0x28
 8002c50:	3a30      	subs	r2, #48	; 0x30
 8002c52:	2a09      	cmp	r2, #9
 8002c54:	d9f3      	bls.n	8002c3e <_svfprintf_r+0x356>
 8002c56:	e6b0      	b.n	80029ba <_svfprintf_r+0xd2>
 8002c58:	f04a 0a08 	orr.w	sl, sl, #8
 8002c5c:	e6a8      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b68      	cmp	r3, #104	; 0x68
 8002c64:	bf01      	itttt	eq
 8002c66:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8002c68:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8002c6c:	3301      	addeq	r3, #1
 8002c6e:	930e      	streq	r3, [sp, #56]	; 0x38
 8002c70:	bf18      	it	ne
 8002c72:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8002c76:	e69b      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b6c      	cmp	r3, #108	; 0x6c
 8002c7e:	d105      	bne.n	8002c8c <_svfprintf_r+0x3a4>
 8002c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c82:	3301      	adds	r3, #1
 8002c84:	930e      	str	r3, [sp, #56]	; 0x38
 8002c86:	f04a 0a20 	orr.w	sl, sl, #32
 8002c8a:	e691      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002c8c:	f04a 0a10 	orr.w	sl, sl, #16
 8002c90:	e68e      	b.n	80029b0 <_svfprintf_r+0xc8>
 8002c92:	2000      	movs	r0, #0
 8002c94:	1d33      	adds	r3, r6, #4
 8002c96:	930c      	str	r3, [sp, #48]	; 0x30
 8002c98:	6833      	ldr	r3, [r6, #0]
 8002c9a:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8002c9e:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8002ca2:	4680      	mov	r8, r0
 8002ca4:	2501      	movs	r5, #1
 8002ca6:	9012      	str	r0, [sp, #72]	; 0x48
 8002ca8:	4607      	mov	r7, r0
 8002caa:	900b      	str	r0, [sp, #44]	; 0x2c
 8002cac:	4606      	mov	r6, r0
 8002cae:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8002cb2:	e2fe      	b.n	80032b2 <_svfprintf_r+0x9ca>
 8002cb4:	f04a 0a10 	orr.w	sl, sl, #16
 8002cb8:	f01a 0f20 	tst.w	sl, #32
 8002cbc:	d020      	beq.n	8002d00 <_svfprintf_r+0x418>
 8002cbe:	3607      	adds	r6, #7
 8002cc0:	f026 0607 	bic.w	r6, r6, #7
 8002cc4:	f106 0308 	add.w	r3, r6, #8
 8002cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8002cca:	e9d6 6700 	ldrd	r6, r7, [r6]
 8002cce:	2e00      	cmp	r6, #0
 8002cd0:	f177 0300 	sbcs.w	r3, r7, #0
 8002cd4:	da05      	bge.n	8002ce2 <_svfprintf_r+0x3fa>
 8002cd6:	232d      	movs	r3, #45	; 0x2d
 8002cd8:	4276      	negs	r6, r6
 8002cda:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002cde:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002ce2:	1c6b      	adds	r3, r5, #1
 8002ce4:	f040 83f1 	bne.w	80034ca <_svfprintf_r+0xbe2>
 8002ce8:	2f00      	cmp	r7, #0
 8002cea:	bf08      	it	eq
 8002cec:	2e0a      	cmpeq	r6, #10
 8002cee:	f080 8423 	bcs.w	8003538 <_svfprintf_r+0xc50>
 8002cf2:	3630      	adds	r6, #48	; 0x30
 8002cf4:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8002cf8:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8002cfc:	f000 bc08 	b.w	8003510 <_svfprintf_r+0xc28>
 8002d00:	1d33      	adds	r3, r6, #4
 8002d02:	f01a 0f10 	tst.w	sl, #16
 8002d06:	930c      	str	r3, [sp, #48]	; 0x30
 8002d08:	d002      	beq.n	8002d10 <_svfprintf_r+0x428>
 8002d0a:	6836      	ldr	r6, [r6, #0]
 8002d0c:	17f7      	asrs	r7, r6, #31
 8002d0e:	e7de      	b.n	8002cce <_svfprintf_r+0x3e6>
 8002d10:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8002d14:	6836      	ldr	r6, [r6, #0]
 8002d16:	d001      	beq.n	8002d1c <_svfprintf_r+0x434>
 8002d18:	b236      	sxth	r6, r6
 8002d1a:	e7f7      	b.n	8002d0c <_svfprintf_r+0x424>
 8002d1c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8002d20:	bf18      	it	ne
 8002d22:	b276      	sxtbne	r6, r6
 8002d24:	e7f2      	b.n	8002d0c <_svfprintf_r+0x424>
 8002d26:	3607      	adds	r6, #7
 8002d28:	f026 0607 	bic.w	r6, r6, #7
 8002d2c:	f106 0308 	add.w	r3, r6, #8
 8002d30:	930c      	str	r3, [sp, #48]	; 0x30
 8002d32:	6833      	ldr	r3, [r6, #0]
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d38:	9314      	str	r3, [sp, #80]	; 0x50
 8002d3a:	6873      	ldr	r3, [r6, #4]
 8002d3c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002d3e:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8002d42:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d44:	4638      	mov	r0, r7
 8002d46:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <_svfprintf_r+0x528>)
 8002d48:	4631      	mov	r1, r6
 8002d4a:	f7fd fe5f 	bl	8000a0c <__aeabi_dcmpun>
 8002d4e:	bb00      	cbnz	r0, 8002d92 <_svfprintf_r+0x4aa>
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <_svfprintf_r+0x528>)
 8002d56:	4638      	mov	r0, r7
 8002d58:	4631      	mov	r1, r6
 8002d5a:	f7fd fe39 	bl	80009d0 <__aeabi_dcmple>
 8002d5e:	b9c0      	cbnz	r0, 8002d92 <_svfprintf_r+0x4aa>
 8002d60:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8002d64:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8002d68:	f7fd fe28 	bl	80009bc <__aeabi_dcmplt>
 8002d6c:	b110      	cbz	r0, 8002d74 <_svfprintf_r+0x48c>
 8002d6e:	232d      	movs	r3, #45	; 0x2d
 8002d70:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <_svfprintf_r+0x52c>)
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <_svfprintf_r+0x530>)
 8002d78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d7a:	f04f 0800 	mov.w	r8, #0
 8002d7e:	2947      	cmp	r1, #71	; 0x47
 8002d80:	bfcc      	ite	gt
 8002d82:	4693      	movgt	fp, r2
 8002d84:	469b      	movle	fp, r3
 8002d86:	2503      	movs	r5, #3
 8002d88:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8002d8c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8002d90:	e3c4      	b.n	800351c <_svfprintf_r+0xc34>
 8002d92:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8002d96:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8002d9a:	f7fd fe37 	bl	8000a0c <__aeabi_dcmpun>
 8002d9e:	4680      	mov	r8, r0
 8002da0:	b140      	cbz	r0, 8002db4 <_svfprintf_r+0x4cc>
 8002da2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <_svfprintf_r+0x534>)
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bfbc      	itt	lt
 8002daa:	232d      	movlt	r3, #45	; 0x2d
 8002dac:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <_svfprintf_r+0x538>)
 8002db2:	e7e1      	b.n	8002d78 <_svfprintf_r+0x490>
 8002db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002db6:	f023 0320 	bic.w	r3, r3, #32
 8002dba:	2b41      	cmp	r3, #65	; 0x41
 8002dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dbe:	d131      	bne.n	8002e24 <_svfprintf_r+0x53c>
 8002dc0:	2330      	movs	r3, #48	; 0x30
 8002dc2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8002dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dc8:	f04a 0a02 	orr.w	sl, sl, #2
 8002dcc:	2b61      	cmp	r3, #97	; 0x61
 8002dce:	bf14      	ite	ne
 8002dd0:	2358      	movne	r3, #88	; 0x58
 8002dd2:	2378      	moveq	r3, #120	; 0x78
 8002dd4:	2d63      	cmp	r5, #99	; 0x63
 8002dd6:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8002dda:	f340 8111 	ble.w	8003000 <_svfprintf_r+0x718>
 8002dde:	1c69      	adds	r1, r5, #1
 8002de0:	9807      	ldr	r0, [sp, #28]
 8002de2:	f001 ff03 	bl	8004bec <_malloc_r>
 8002de6:	4683      	mov	fp, r0
 8002de8:	2800      	cmp	r0, #0
 8002dea:	f040 810c 	bne.w	8003006 <_svfprintf_r+0x71e>
 8002dee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df6:	f8a9 300c 	strh.w	r3, [r9, #12]
 8002dfa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002dfe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e04:	bf18      	it	ne
 8002e06:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002e0a:	e591      	b.n	8002930 <_svfprintf_r+0x48>
 8002e0c:	08005d8d 	.word	0x08005d8d
 8002e10:	7fefffff 	.word	0x7fefffff
 8002e14:	08005d70 	.word	0x08005d70
 8002e18:	08005d6c 	.word	0x08005d6c
 8002e1c:	08005d78 	.word	0x08005d78
 8002e20:	08005d74 	.word	0x08005d74
 8002e24:	1c69      	adds	r1, r5, #1
 8002e26:	f000 80f0 	beq.w	800300a <_svfprintf_r+0x722>
 8002e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e2c:	2b47      	cmp	r3, #71	; 0x47
 8002e2e:	d102      	bne.n	8002e36 <_svfprintf_r+0x54e>
 8002e30:	2d00      	cmp	r5, #0
 8002e32:	f000 80ec 	beq.w	800300e <_svfprintf_r+0x726>
 8002e36:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8002e3a:	9315      	str	r3, [sp, #84]	; 0x54
 8002e3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e3e:	1e1e      	subs	r6, r3, #0
 8002e40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e42:	9308      	str	r3, [sp, #32]
 8002e44:	bfb7      	itett	lt
 8002e46:	4633      	movlt	r3, r6
 8002e48:	2300      	movge	r3, #0
 8002e4a:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8002e4e:	232d      	movlt	r3, #45	; 0x2d
 8002e50:	9319      	str	r3, [sp, #100]	; 0x64
 8002e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e54:	2b41      	cmp	r3, #65	; 0x41
 8002e56:	f040 80eb 	bne.w	8003030 <_svfprintf_r+0x748>
 8002e5a:	aa22      	add	r2, sp, #136	; 0x88
 8002e5c:	9808      	ldr	r0, [sp, #32]
 8002e5e:	4631      	mov	r1, r6
 8002e60:	f002 fbd2 	bl	8005608 <frexp>
 8002e64:	2200      	movs	r2, #0
 8002e66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e6a:	f7fd fb35 	bl	80004d8 <__aeabi_dmul>
 8002e6e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8002e72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002e76:	f7fd fd97 	bl	80009a8 <__aeabi_dcmpeq>
 8002e7a:	b108      	cbz	r0, 8002e80 <_svfprintf_r+0x598>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	9322      	str	r3, [sp, #136]	; 0x88
 8002e80:	4fac      	ldr	r7, [pc, #688]	; (8003134 <_svfprintf_r+0x84c>)
 8002e82:	4bad      	ldr	r3, [pc, #692]	; (8003138 <_svfprintf_r+0x850>)
 8002e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e86:	465e      	mov	r6, fp
 8002e88:	2a61      	cmp	r2, #97	; 0x61
 8002e8a:	bf08      	it	eq
 8002e8c:	461f      	moveq	r7, r3
 8002e8e:	9712      	str	r7, [sp, #72]	; 0x48
 8002e90:	1e6f      	subs	r7, r5, #1
 8002e92:	2200      	movs	r2, #0
 8002e94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002e98:	4ba8      	ldr	r3, [pc, #672]	; (800313c <_svfprintf_r+0x854>)
 8002e9a:	f7fd fb1d 	bl	80004d8 <__aeabi_dmul>
 8002e9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002ea2:	f7fd fdc9 	bl	8000a38 <__aeabi_d2iz>
 8002ea6:	901e      	str	r0, [sp, #120]	; 0x78
 8002ea8:	f7fd faac 	bl	8000404 <__aeabi_i2d>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002eb4:	f7fd f958 	bl	8000168 <__aeabi_dsub>
 8002eb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ebc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002ec0:	5c9b      	ldrb	r3, [r3, r2]
 8002ec2:	1c7a      	adds	r2, r7, #1
 8002ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8002ec8:	971f      	str	r7, [sp, #124]	; 0x7c
 8002eca:	d006      	beq.n	8002eda <_svfprintf_r+0x5f2>
 8002ecc:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8002ed0:	3f01      	subs	r7, #1
 8002ed2:	f7fd fd69 	bl	80009a8 <__aeabi_dcmpeq>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d0db      	beq.n	8002e92 <_svfprintf_r+0x5aa>
 8002eda:	2200      	movs	r2, #0
 8002edc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002ee0:	4b97      	ldr	r3, [pc, #604]	; (8003140 <_svfprintf_r+0x858>)
 8002ee2:	f7fd fd89 	bl	80009f8 <__aeabi_dcmpgt>
 8002ee6:	b960      	cbnz	r0, 8002f02 <_svfprintf_r+0x61a>
 8002ee8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002eec:	2200      	movs	r2, #0
 8002eee:	4b94      	ldr	r3, [pc, #592]	; (8003140 <_svfprintf_r+0x858>)
 8002ef0:	f7fd fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	f000 8096 	beq.w	8003026 <_svfprintf_r+0x73e>
 8002efa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002efc:	07db      	lsls	r3, r3, #31
 8002efe:	f140 8092 	bpl.w	8003026 <_svfprintf_r+0x73e>
 8002f02:	2030      	movs	r0, #48	; 0x30
 8002f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f06:	9626      	str	r6, [sp, #152]	; 0x98
 8002f08:	7bd9      	ldrb	r1, [r3, #15]
 8002f0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002f0c:	1e53      	subs	r3, r2, #1
 8002f0e:	9326      	str	r3, [sp, #152]	; 0x98
 8002f10:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d07d      	beq.n	8003014 <_svfprintf_r+0x72c>
 8002f18:	2b39      	cmp	r3, #57	; 0x39
 8002f1a:	bf0b      	itete	eq
 8002f1c:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8002f1e:	3301      	addne	r3, #1
 8002f20:	7a9b      	ldrbeq	r3, [r3, #10]
 8002f22:	b2db      	uxtbne	r3, r3
 8002f24:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002f28:	4633      	mov	r3, r6
 8002f2a:	eba3 030b 	sub.w	r3, r3, fp
 8002f2e:	9308      	str	r3, [sp, #32]
 8002f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f32:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8002f34:	2b47      	cmp	r3, #71	; 0x47
 8002f36:	f040 80c7 	bne.w	80030c8 <_svfprintf_r+0x7e0>
 8002f3a:	1cf7      	adds	r7, r6, #3
 8002f3c:	db02      	blt.n	8002f44 <_svfprintf_r+0x65c>
 8002f3e:	42b5      	cmp	r5, r6
 8002f40:	f280 80ed 	bge.w	800311e <_svfprintf_r+0x836>
 8002f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f46:	3b02      	subs	r3, #2
 8002f48:	930a      	str	r3, [sp, #40]	; 0x28
 8002f4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f4c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8002f50:	f021 0120 	bic.w	r1, r1, #32
 8002f54:	2941      	cmp	r1, #65	; 0x41
 8002f56:	bf08      	it	eq
 8002f58:	320f      	addeq	r2, #15
 8002f5a:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 8002f5e:	bf06      	itte	eq
 8002f60:	b2d2      	uxtbeq	r2, r2
 8002f62:	2101      	moveq	r1, #1
 8002f64:	2100      	movne	r1, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8002f6c:	bfb4      	ite	lt
 8002f6e:	222d      	movlt	r2, #45	; 0x2d
 8002f70:	222b      	movge	r2, #43	; 0x2b
 8002f72:	9322      	str	r3, [sp, #136]	; 0x88
 8002f74:	bfb8      	it	lt
 8002f76:	f1c6 0301 	rsblt	r3, r6, #1
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8002f80:	f340 80b9 	ble.w	80030f6 <_svfprintf_r+0x80e>
 8002f84:	250a      	movs	r5, #10
 8002f86:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8002f8a:	fb93 f0f5 	sdiv	r0, r3, r5
 8002f8e:	fb05 3310 	mls	r3, r5, r0, r3
 8002f92:	2809      	cmp	r0, #9
 8002f94:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002f98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002f9c:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f300 80a1 	bgt.w	80030e8 <_svfprintf_r+0x800>
 8002fa6:	3330      	adds	r3, #48	; 0x30
 8002fa8:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002fac:	3a02      	subs	r2, #2
 8002fae:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8002fb2:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8002fb6:	4282      	cmp	r2, r0
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f0c0 8097 	bcc.w	80030ec <_svfprintf_r+0x804>
 8002fbe:	9a08      	ldr	r2, [sp, #32]
 8002fc0:	ab24      	add	r3, sp, #144	; 0x90
 8002fc2:	1acb      	subs	r3, r1, r3
 8002fc4:	2a01      	cmp	r2, #1
 8002fc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8002fc8:	eb03 0502 	add.w	r5, r3, r2
 8002fcc:	dc02      	bgt.n	8002fd4 <_svfprintf_r+0x6ec>
 8002fce:	f01a 0f01 	tst.w	sl, #1
 8002fd2:	d001      	beq.n	8002fd8 <_svfprintf_r+0x6f0>
 8002fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fd6:	441d      	add	r5, r3
 8002fd8:	2700      	movs	r7, #0
 8002fda:	463e      	mov	r6, r7
 8002fdc:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	9315      	str	r3, [sp, #84]	; 0x54
 8002fe6:	970b      	str	r7, [sp, #44]	; 0x2c
 8002fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 830b 	beq.w	8003606 <_svfprintf_r+0xd1e>
 8002ff0:	232d      	movs	r3, #45	; 0x2d
 8002ff2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8002ffc:	9312      	str	r3, [sp, #72]	; 0x48
 8002ffe:	e158      	b.n	80032b2 <_svfprintf_r+0x9ca>
 8003000:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8003004:	e717      	b.n	8002e36 <_svfprintf_r+0x54e>
 8003006:	4680      	mov	r8, r0
 8003008:	e715      	b.n	8002e36 <_svfprintf_r+0x54e>
 800300a:	2506      	movs	r5, #6
 800300c:	e713      	b.n	8002e36 <_svfprintf_r+0x54e>
 800300e:	46a8      	mov	r8, r5
 8003010:	2501      	movs	r5, #1
 8003012:	e710      	b.n	8002e36 <_svfprintf_r+0x54e>
 8003014:	f802 0c01 	strb.w	r0, [r2, #-1]
 8003018:	e777      	b.n	8002f0a <_svfprintf_r+0x622>
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	1af2      	subs	r2, r6, r3
 8003020:	2a00      	cmp	r2, #0
 8003022:	dafa      	bge.n	800301a <_svfprintf_r+0x732>
 8003024:	e781      	b.n	8002f2a <_svfprintf_r+0x642>
 8003026:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003028:	4633      	mov	r3, r6
 800302a:	2130      	movs	r1, #48	; 0x30
 800302c:	4416      	add	r6, r2
 800302e:	e7f6      	b.n	800301e <_svfprintf_r+0x736>
 8003030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003032:	2b46      	cmp	r3, #70	; 0x46
 8003034:	d004      	beq.n	8003040 <_svfprintf_r+0x758>
 8003036:	2b45      	cmp	r3, #69	; 0x45
 8003038:	d140      	bne.n	80030bc <_svfprintf_r+0x7d4>
 800303a:	1c6f      	adds	r7, r5, #1
 800303c:	2302      	movs	r3, #2
 800303e:	e001      	b.n	8003044 <_svfprintf_r+0x75c>
 8003040:	462f      	mov	r7, r5
 8003042:	2303      	movs	r3, #3
 8003044:	aa26      	add	r2, sp, #152	; 0x98
 8003046:	9204      	str	r2, [sp, #16]
 8003048:	aa23      	add	r2, sp, #140	; 0x8c
 800304a:	9203      	str	r2, [sp, #12]
 800304c:	aa22      	add	r2, sp, #136	; 0x88
 800304e:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	9a08      	ldr	r2, [sp, #32]
 8003056:	4633      	mov	r3, r6
 8003058:	9807      	ldr	r0, [sp, #28]
 800305a:	f000 fef1 	bl	8003e40 <_dtoa_r>
 800305e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003060:	4683      	mov	fp, r0
 8003062:	2b47      	cmp	r3, #71	; 0x47
 8003064:	d102      	bne.n	800306c <_svfprintf_r+0x784>
 8003066:	f01a 0f01 	tst.w	sl, #1
 800306a:	d02b      	beq.n	80030c4 <_svfprintf_r+0x7dc>
 800306c:	eb0b 0307 	add.w	r3, fp, r7
 8003070:	9312      	str	r3, [sp, #72]	; 0x48
 8003072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003074:	2b46      	cmp	r3, #70	; 0x46
 8003076:	d111      	bne.n	800309c <_svfprintf_r+0x7b4>
 8003078:	f89b 3000 	ldrb.w	r3, [fp]
 800307c:	2b30      	cmp	r3, #48	; 0x30
 800307e:	d109      	bne.n	8003094 <_svfprintf_r+0x7ac>
 8003080:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003084:	9808      	ldr	r0, [sp, #32]
 8003086:	4631      	mov	r1, r6
 8003088:	f7fd fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800308c:	b910      	cbnz	r0, 8003094 <_svfprintf_r+0x7ac>
 800308e:	f1c7 0701 	rsb	r7, r7, #1
 8003092:	9722      	str	r7, [sp, #136]	; 0x88
 8003094:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003096:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003098:	441a      	add	r2, r3
 800309a:	9212      	str	r2, [sp, #72]	; 0x48
 800309c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80030a0:	9808      	ldr	r0, [sp, #32]
 80030a2:	4631      	mov	r1, r6
 80030a4:	f7fd fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80030a8:	b950      	cbnz	r0, 80030c0 <_svfprintf_r+0x7d8>
 80030aa:	2230      	movs	r2, #48	; 0x30
 80030ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80030ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 80030b0:	4299      	cmp	r1, r3
 80030b2:	d907      	bls.n	80030c4 <_svfprintf_r+0x7dc>
 80030b4:	1c59      	adds	r1, r3, #1
 80030b6:	9126      	str	r1, [sp, #152]	; 0x98
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e7f7      	b.n	80030ac <_svfprintf_r+0x7c4>
 80030bc:	462f      	mov	r7, r5
 80030be:	e7bd      	b.n	800303c <_svfprintf_r+0x754>
 80030c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030c2:	9326      	str	r3, [sp, #152]	; 0x98
 80030c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80030c6:	e730      	b.n	8002f2a <_svfprintf_r+0x642>
 80030c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030ca:	2b46      	cmp	r3, #70	; 0x46
 80030cc:	f47f af3d 	bne.w	8002f4a <_svfprintf_r+0x662>
 80030d0:	2e00      	cmp	r6, #0
 80030d2:	dd1d      	ble.n	8003110 <_svfprintf_r+0x828>
 80030d4:	b915      	cbnz	r5, 80030dc <_svfprintf_r+0x7f4>
 80030d6:	f01a 0f01 	tst.w	sl, #1
 80030da:	d03d      	beq.n	8003158 <_svfprintf_r+0x870>
 80030dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030de:	18f3      	adds	r3, r6, r3
 80030e0:	441d      	add	r5, r3
 80030e2:	2366      	movs	r3, #102	; 0x66
 80030e4:	930a      	str	r3, [sp, #40]	; 0x28
 80030e6:	e03c      	b.n	8003162 <_svfprintf_r+0x87a>
 80030e8:	460a      	mov	r2, r1
 80030ea:	e74e      	b.n	8002f8a <_svfprintf_r+0x6a2>
 80030ec:	f812 1b01 	ldrb.w	r1, [r2], #1
 80030f0:	f803 1b01 	strb.w	r1, [r3], #1
 80030f4:	e75f      	b.n	8002fb6 <_svfprintf_r+0x6ce>
 80030f6:	b941      	cbnz	r1, 800310a <_svfprintf_r+0x822>
 80030f8:	2230      	movs	r2, #48	; 0x30
 80030fa:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 80030fe:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8003102:	3330      	adds	r3, #48	; 0x30
 8003104:	1c51      	adds	r1, r2, #1
 8003106:	7013      	strb	r3, [r2, #0]
 8003108:	e759      	b.n	8002fbe <_svfprintf_r+0x6d6>
 800310a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 800310e:	e7f8      	b.n	8003102 <_svfprintf_r+0x81a>
 8003110:	b915      	cbnz	r5, 8003118 <_svfprintf_r+0x830>
 8003112:	f01a 0f01 	tst.w	sl, #1
 8003116:	d021      	beq.n	800315c <_svfprintf_r+0x874>
 8003118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800311a:	3301      	adds	r3, #1
 800311c:	e7e0      	b.n	80030e0 <_svfprintf_r+0x7f8>
 800311e:	9b08      	ldr	r3, [sp, #32]
 8003120:	42b3      	cmp	r3, r6
 8003122:	dc0f      	bgt.n	8003144 <_svfprintf_r+0x85c>
 8003124:	f01a 0f01 	tst.w	sl, #1
 8003128:	d02e      	beq.n	8003188 <_svfprintf_r+0x8a0>
 800312a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800312c:	18f5      	adds	r5, r6, r3
 800312e:	2367      	movs	r3, #103	; 0x67
 8003130:	e7d8      	b.n	80030e4 <_svfprintf_r+0x7fc>
 8003132:	bf00      	nop
 8003134:	08005d8d 	.word	0x08005d8d
 8003138:	08005d7c 	.word	0x08005d7c
 800313c:	40300000 	.word	0x40300000
 8003140:	3fe00000 	.word	0x3fe00000
 8003144:	9b08      	ldr	r3, [sp, #32]
 8003146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003148:	2e00      	cmp	r6, #0
 800314a:	eb03 0502 	add.w	r5, r3, r2
 800314e:	dcee      	bgt.n	800312e <_svfprintf_r+0x846>
 8003150:	f1c6 0301 	rsb	r3, r6, #1
 8003154:	441d      	add	r5, r3
 8003156:	e7ea      	b.n	800312e <_svfprintf_r+0x846>
 8003158:	4635      	mov	r5, r6
 800315a:	e7c2      	b.n	80030e2 <_svfprintf_r+0x7fa>
 800315c:	2366      	movs	r3, #102	; 0x66
 800315e:	2501      	movs	r5, #1
 8003160:	930a      	str	r3, [sp, #40]	; 0x28
 8003162:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8003166:	930b      	str	r3, [sp, #44]	; 0x2c
 8003168:	d01f      	beq.n	80031aa <_svfprintf_r+0x8c2>
 800316a:	2700      	movs	r7, #0
 800316c:	2e00      	cmp	r6, #0
 800316e:	970b      	str	r7, [sp, #44]	; 0x2c
 8003170:	f77f af3a 	ble.w	8002fe8 <_svfprintf_r+0x700>
 8003174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2bff      	cmp	r3, #255	; 0xff
 800317a:	d107      	bne.n	800318c <_svfprintf_r+0x8a4>
 800317c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800317e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003180:	443b      	add	r3, r7
 8003182:	fb02 5503 	mla	r5, r2, r3, r5
 8003186:	e72f      	b.n	8002fe8 <_svfprintf_r+0x700>
 8003188:	4635      	mov	r5, r6
 800318a:	e7d0      	b.n	800312e <_svfprintf_r+0x846>
 800318c:	42b3      	cmp	r3, r6
 800318e:	daf5      	bge.n	800317c <_svfprintf_r+0x894>
 8003190:	1af6      	subs	r6, r6, r3
 8003192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	b133      	cbz	r3, 80031a6 <_svfprintf_r+0x8be>
 8003198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800319a:	3301      	adds	r3, #1
 800319c:	930b      	str	r3, [sp, #44]	; 0x2c
 800319e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031a0:	3301      	adds	r3, #1
 80031a2:	930d      	str	r3, [sp, #52]	; 0x34
 80031a4:	e7e6      	b.n	8003174 <_svfprintf_r+0x88c>
 80031a6:	3701      	adds	r7, #1
 80031a8:	e7e4      	b.n	8003174 <_svfprintf_r+0x88c>
 80031aa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80031ac:	e71c      	b.n	8002fe8 <_svfprintf_r+0x700>
 80031ae:	4632      	mov	r2, r6
 80031b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80031b4:	f01a 0f20 	tst.w	sl, #32
 80031b8:	920c      	str	r2, [sp, #48]	; 0x30
 80031ba:	d009      	beq.n	80031d0 <_svfprintf_r+0x8e8>
 80031bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031be:	4610      	mov	r0, r2
 80031c0:	17d1      	asrs	r1, r2, #31
 80031c2:	e9c3 0100 	strd	r0, r1, [r3]
 80031c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80031c8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80031cc:	f7ff bbc8 	b.w	8002960 <_svfprintf_r+0x78>
 80031d0:	f01a 0f10 	tst.w	sl, #16
 80031d4:	d002      	beq.n	80031dc <_svfprintf_r+0x8f4>
 80031d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e7f4      	b.n	80031c6 <_svfprintf_r+0x8de>
 80031dc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80031e0:	d002      	beq.n	80031e8 <_svfprintf_r+0x900>
 80031e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	e7ee      	b.n	80031c6 <_svfprintf_r+0x8de>
 80031e8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80031ec:	d0f3      	beq.n	80031d6 <_svfprintf_r+0x8ee>
 80031ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e7e8      	b.n	80031c6 <_svfprintf_r+0x8de>
 80031f4:	f04a 0a10 	orr.w	sl, sl, #16
 80031f8:	f01a 0f20 	tst.w	sl, #32
 80031fc:	d01e      	beq.n	800323c <_svfprintf_r+0x954>
 80031fe:	3607      	adds	r6, #7
 8003200:	f026 0607 	bic.w	r6, r6, #7
 8003204:	f106 0308 	add.w	r3, r6, #8
 8003208:	930c      	str	r3, [sp, #48]	; 0x30
 800320a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800320e:	2300      	movs	r3, #0
 8003210:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8003214:	2200      	movs	r2, #0
 8003216:	1c69      	adds	r1, r5, #1
 8003218:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 800321c:	f000 8158 	beq.w	80034d0 <_svfprintf_r+0xbe8>
 8003220:	4652      	mov	r2, sl
 8003222:	ea56 0107 	orrs.w	r1, r6, r7
 8003226:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800322a:	f040 8151 	bne.w	80034d0 <_svfprintf_r+0xbe8>
 800322e:	2d00      	cmp	r5, #0
 8003230:	f000 81d3 	beq.w	80035da <_svfprintf_r+0xcf2>
 8003234:	2b01      	cmp	r3, #1
 8003236:	f040 814e 	bne.w	80034d6 <_svfprintf_r+0xbee>
 800323a:	e55a      	b.n	8002cf2 <_svfprintf_r+0x40a>
 800323c:	1d33      	adds	r3, r6, #4
 800323e:	f01a 0f10 	tst.w	sl, #16
 8003242:	930c      	str	r3, [sp, #48]	; 0x30
 8003244:	d001      	beq.n	800324a <_svfprintf_r+0x962>
 8003246:	6836      	ldr	r6, [r6, #0]
 8003248:	e003      	b.n	8003252 <_svfprintf_r+0x96a>
 800324a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800324e:	d002      	beq.n	8003256 <_svfprintf_r+0x96e>
 8003250:	8836      	ldrh	r6, [r6, #0]
 8003252:	2700      	movs	r7, #0
 8003254:	e7db      	b.n	800320e <_svfprintf_r+0x926>
 8003256:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800325a:	d0f4      	beq.n	8003246 <_svfprintf_r+0x95e>
 800325c:	7836      	ldrb	r6, [r6, #0]
 800325e:	e7f8      	b.n	8003252 <_svfprintf_r+0x96a>
 8003260:	1d33      	adds	r3, r6, #4
 8003262:	930c      	str	r3, [sp, #48]	; 0x30
 8003264:	f647 0330 	movw	r3, #30768	; 0x7830
 8003268:	2278      	movs	r2, #120	; 0x78
 800326a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 800326e:	4baf      	ldr	r3, [pc, #700]	; (800352c <_svfprintf_r+0xc44>)
 8003270:	6836      	ldr	r6, [r6, #0]
 8003272:	931c      	str	r3, [sp, #112]	; 0x70
 8003274:	2700      	movs	r7, #0
 8003276:	f04a 0a02 	orr.w	sl, sl, #2
 800327a:	2302      	movs	r3, #2
 800327c:	920a      	str	r2, [sp, #40]	; 0x28
 800327e:	e7c9      	b.n	8003214 <_svfprintf_r+0x92c>
 8003280:	1d33      	adds	r3, r6, #4
 8003282:	f8d6 b000 	ldr.w	fp, [r6]
 8003286:	2600      	movs	r6, #0
 8003288:	1c68      	adds	r0, r5, #1
 800328a:	930c      	str	r3, [sp, #48]	; 0x30
 800328c:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8003290:	f000 80de 	beq.w	8003450 <_svfprintf_r+0xb68>
 8003294:	462a      	mov	r2, r5
 8003296:	4631      	mov	r1, r6
 8003298:	4658      	mov	r0, fp
 800329a:	f001 fedd 	bl	8005058 <memchr>
 800329e:	4680      	mov	r8, r0
 80032a0:	2800      	cmp	r0, #0
 80032a2:	f43f ad73 	beq.w	8002d8c <_svfprintf_r+0x4a4>
 80032a6:	46b0      	mov	r8, r6
 80032a8:	4637      	mov	r7, r6
 80032aa:	eba0 050b 	sub.w	r5, r0, fp
 80032ae:	9612      	str	r6, [sp, #72]	; 0x48
 80032b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80032b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032b4:	42ab      	cmp	r3, r5
 80032b6:	bfb8      	it	lt
 80032b8:	462b      	movlt	r3, r5
 80032ba:	9315      	str	r3, [sp, #84]	; 0x54
 80032bc:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80032c0:	b113      	cbz	r3, 80032c8 <_svfprintf_r+0x9e0>
 80032c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80032c4:	3301      	adds	r3, #1
 80032c6:	9315      	str	r3, [sp, #84]	; 0x54
 80032c8:	f01a 0302 	ands.w	r3, sl, #2
 80032cc:	931e      	str	r3, [sp, #120]	; 0x78
 80032ce:	bf1e      	ittt	ne
 80032d0:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 80032d2:	3302      	addne	r3, #2
 80032d4:	9315      	strne	r3, [sp, #84]	; 0x54
 80032d6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80032da:	931f      	str	r3, [sp, #124]	; 0x7c
 80032dc:	d121      	bne.n	8003322 <_svfprintf_r+0xa3a>
 80032de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	9319      	str	r3, [sp, #100]	; 0x64
 80032e8:	dd1b      	ble.n	8003322 <_svfprintf_r+0xa3a>
 80032ea:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80032ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80032f0:	3201      	adds	r2, #1
 80032f2:	2810      	cmp	r0, #16
 80032f4:	488e      	ldr	r0, [pc, #568]	; (8003530 <_svfprintf_r+0xc48>)
 80032f6:	f104 0108 	add.w	r1, r4, #8
 80032fa:	6020      	str	r0, [r4, #0]
 80032fc:	f300 8187 	bgt.w	800360e <_svfprintf_r+0xd26>
 8003300:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003302:	2a07      	cmp	r2, #7
 8003304:	4403      	add	r3, r0
 8003306:	6060      	str	r0, [r4, #4]
 8003308:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800330c:	f340 8194 	ble.w	8003638 <_svfprintf_r+0xd50>
 8003310:	aa28      	add	r2, sp, #160	; 0xa0
 8003312:	4649      	mov	r1, r9
 8003314:	9807      	ldr	r0, [sp, #28]
 8003316:	f002 f9ce 	bl	80056b6 <__ssprint_r>
 800331a:	2800      	cmp	r0, #0
 800331c:	f040 84c0 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003320:	ac2b      	add	r4, sp, #172	; 0xac
 8003322:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8003326:	b173      	cbz	r3, 8003346 <_svfprintf_r+0xa5e>
 8003328:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	2301      	movs	r3, #1
 8003330:	6063      	str	r3, [r4, #4]
 8003332:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003334:	3301      	adds	r3, #1
 8003336:	932a      	str	r3, [sp, #168]	; 0xa8
 8003338:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800333a:	3301      	adds	r3, #1
 800333c:	2b07      	cmp	r3, #7
 800333e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003340:	f300 817c 	bgt.w	800363c <_svfprintf_r+0xd54>
 8003344:	3408      	adds	r4, #8
 8003346:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003348:	b16b      	cbz	r3, 8003366 <_svfprintf_r+0xa7e>
 800334a:	ab21      	add	r3, sp, #132	; 0x84
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	2302      	movs	r3, #2
 8003350:	6063      	str	r3, [r4, #4]
 8003352:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003354:	3302      	adds	r3, #2
 8003356:	932a      	str	r3, [sp, #168]	; 0xa8
 8003358:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800335a:	3301      	adds	r3, #1
 800335c:	2b07      	cmp	r3, #7
 800335e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003360:	f300 8176 	bgt.w	8003650 <_svfprintf_r+0xd68>
 8003364:	3408      	adds	r4, #8
 8003366:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d121      	bne.n	80033b0 <_svfprintf_r+0xac8>
 800336c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800336e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	9319      	str	r3, [sp, #100]	; 0x64
 8003376:	dd1b      	ble.n	80033b0 <_svfprintf_r+0xac8>
 8003378:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800337c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800337e:	3201      	adds	r2, #1
 8003380:	2810      	cmp	r0, #16
 8003382:	486c      	ldr	r0, [pc, #432]	; (8003534 <_svfprintf_r+0xc4c>)
 8003384:	f104 0108 	add.w	r1, r4, #8
 8003388:	6020      	str	r0, [r4, #0]
 800338a:	f300 816b 	bgt.w	8003664 <_svfprintf_r+0xd7c>
 800338e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003390:	2a07      	cmp	r2, #7
 8003392:	4403      	add	r3, r0
 8003394:	6060      	str	r0, [r4, #4]
 8003396:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800339a:	f340 8178 	ble.w	800368e <_svfprintf_r+0xda6>
 800339e:	aa28      	add	r2, sp, #160	; 0xa0
 80033a0:	4649      	mov	r1, r9
 80033a2:	9807      	ldr	r0, [sp, #28]
 80033a4:	f002 f987 	bl	80056b6 <__ssprint_r>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	f040 8479 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 80033ae:	ac2b      	add	r4, sp, #172	; 0xac
 80033b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80033b2:	1b5b      	subs	r3, r3, r5
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	9312      	str	r3, [sp, #72]	; 0x48
 80033b8:	dd1b      	ble.n	80033f2 <_svfprintf_r+0xb0a>
 80033ba:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80033be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80033c0:	3201      	adds	r2, #1
 80033c2:	2810      	cmp	r0, #16
 80033c4:	485b      	ldr	r0, [pc, #364]	; (8003534 <_svfprintf_r+0xc4c>)
 80033c6:	f104 0108 	add.w	r1, r4, #8
 80033ca:	6020      	str	r0, [r4, #0]
 80033cc:	f300 8161 	bgt.w	8003692 <_svfprintf_r+0xdaa>
 80033d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80033d2:	2a07      	cmp	r2, #7
 80033d4:	4403      	add	r3, r0
 80033d6:	6060      	str	r0, [r4, #4]
 80033d8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80033dc:	f340 816e 	ble.w	80036bc <_svfprintf_r+0xdd4>
 80033e0:	aa28      	add	r2, sp, #160	; 0xa0
 80033e2:	4649      	mov	r1, r9
 80033e4:	9807      	ldr	r0, [sp, #28]
 80033e6:	f002 f966 	bl	80056b6 <__ssprint_r>
 80033ea:	2800      	cmp	r0, #0
 80033ec:	f040 8458 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 80033f0:	ac2b      	add	r4, sp, #172	; 0xac
 80033f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80033f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80033f8:	9312      	str	r3, [sp, #72]	; 0x48
 80033fa:	f040 8161 	bne.w	80036c0 <_svfprintf_r+0xdd8>
 80033fe:	e9c4 b500 	strd	fp, r5, [r4]
 8003402:	441d      	add	r5, r3
 8003404:	952a      	str	r5, [sp, #168]	; 0xa8
 8003406:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003408:	3301      	adds	r3, #1
 800340a:	2b07      	cmp	r3, #7
 800340c:	9329      	str	r3, [sp, #164]	; 0xa4
 800340e:	f300 819d 	bgt.w	800374c <_svfprintf_r+0xe64>
 8003412:	3408      	adds	r4, #8
 8003414:	f01a 0f04 	tst.w	sl, #4
 8003418:	f040 8424 	bne.w	8003c64 <_svfprintf_r+0x137c>
 800341c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8003420:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003422:	428a      	cmp	r2, r1
 8003424:	bfac      	ite	ge
 8003426:	189b      	addge	r3, r3, r2
 8003428:	185b      	addlt	r3, r3, r1
 800342a:	9310      	str	r3, [sp, #64]	; 0x40
 800342c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800342e:	b13b      	cbz	r3, 8003440 <_svfprintf_r+0xb58>
 8003430:	aa28      	add	r2, sp, #160	; 0xa0
 8003432:	4649      	mov	r1, r9
 8003434:	9807      	ldr	r0, [sp, #28]
 8003436:	f002 f93e 	bl	80056b6 <__ssprint_r>
 800343a:	2800      	cmp	r0, #0
 800343c:	f040 8430 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003440:	2300      	movs	r3, #0
 8003442:	9329      	str	r3, [sp, #164]	; 0xa4
 8003444:	f1b8 0f00 	cmp.w	r8, #0
 8003448:	f040 8446 	bne.w	8003cd8 <_svfprintf_r+0x13f0>
 800344c:	ac2b      	add	r4, sp, #172	; 0xac
 800344e:	e6ba      	b.n	80031c6 <_svfprintf_r+0x8de>
 8003450:	4658      	mov	r0, fp
 8003452:	f7fc fe7d 	bl	8000150 <strlen>
 8003456:	46b0      	mov	r8, r6
 8003458:	4605      	mov	r5, r0
 800345a:	e497      	b.n	8002d8c <_svfprintf_r+0x4a4>
 800345c:	f04a 0a10 	orr.w	sl, sl, #16
 8003460:	f01a 0f20 	tst.w	sl, #32
 8003464:	d009      	beq.n	800347a <_svfprintf_r+0xb92>
 8003466:	3607      	adds	r6, #7
 8003468:	f026 0607 	bic.w	r6, r6, #7
 800346c:	f106 0308 	add.w	r3, r6, #8
 8003470:	930c      	str	r3, [sp, #48]	; 0x30
 8003472:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003476:	2301      	movs	r3, #1
 8003478:	e6cc      	b.n	8003214 <_svfprintf_r+0x92c>
 800347a:	1d33      	adds	r3, r6, #4
 800347c:	f01a 0f10 	tst.w	sl, #16
 8003480:	930c      	str	r3, [sp, #48]	; 0x30
 8003482:	d001      	beq.n	8003488 <_svfprintf_r+0xba0>
 8003484:	6836      	ldr	r6, [r6, #0]
 8003486:	e003      	b.n	8003490 <_svfprintf_r+0xba8>
 8003488:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800348c:	d002      	beq.n	8003494 <_svfprintf_r+0xbac>
 800348e:	8836      	ldrh	r6, [r6, #0]
 8003490:	2700      	movs	r7, #0
 8003492:	e7f0      	b.n	8003476 <_svfprintf_r+0xb8e>
 8003494:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003498:	d0f4      	beq.n	8003484 <_svfprintf_r+0xb9c>
 800349a:	7836      	ldrb	r6, [r6, #0]
 800349c:	e7f8      	b.n	8003490 <_svfprintf_r+0xba8>
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <_svfprintf_r+0xc44>)
 80034a0:	f7ff bb59 	b.w	8002b56 <_svfprintf_r+0x26e>
 80034a4:	1d33      	adds	r3, r6, #4
 80034a6:	f01a 0f10 	tst.w	sl, #16
 80034aa:	930c      	str	r3, [sp, #48]	; 0x30
 80034ac:	d001      	beq.n	80034b2 <_svfprintf_r+0xbca>
 80034ae:	6836      	ldr	r6, [r6, #0]
 80034b0:	e003      	b.n	80034ba <_svfprintf_r+0xbd2>
 80034b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80034b6:	d003      	beq.n	80034c0 <_svfprintf_r+0xbd8>
 80034b8:	8836      	ldrh	r6, [r6, #0]
 80034ba:	2700      	movs	r7, #0
 80034bc:	f7ff bb58 	b.w	8002b70 <_svfprintf_r+0x288>
 80034c0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80034c4:	d0f3      	beq.n	80034ae <_svfprintf_r+0xbc6>
 80034c6:	7836      	ldrb	r6, [r6, #0]
 80034c8:	e7f7      	b.n	80034ba <_svfprintf_r+0xbd2>
 80034ca:	4652      	mov	r2, sl
 80034cc:	2301      	movs	r3, #1
 80034ce:	e6a8      	b.n	8003222 <_svfprintf_r+0x93a>
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f43f ac09 	beq.w	8002ce8 <_svfprintf_r+0x400>
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d06d      	beq.n	80035b6 <_svfprintf_r+0xcce>
 80034da:	ab54      	add	r3, sp, #336	; 0x150
 80034dc:	08f1      	lsrs	r1, r6, #3
 80034de:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80034e2:	08f8      	lsrs	r0, r7, #3
 80034e4:	f006 0207 	and.w	r2, r6, #7
 80034e8:	4607      	mov	r7, r0
 80034ea:	460e      	mov	r6, r1
 80034ec:	3230      	adds	r2, #48	; 0x30
 80034ee:	ea56 0107 	orrs.w	r1, r6, r7
 80034f2:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80034f6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80034fa:	d114      	bne.n	8003526 <_svfprintf_r+0xc3e>
 80034fc:	f01a 0f01 	tst.w	sl, #1
 8003500:	d006      	beq.n	8003510 <_svfprintf_r+0xc28>
 8003502:	2a30      	cmp	r2, #48	; 0x30
 8003504:	d004      	beq.n	8003510 <_svfprintf_r+0xc28>
 8003506:	2230      	movs	r2, #48	; 0x30
 8003508:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800350c:	f1a3 0b02 	sub.w	fp, r3, #2
 8003510:	f04f 0800 	mov.w	r8, #0
 8003514:	ab54      	add	r3, sp, #336	; 0x150
 8003516:	9512      	str	r5, [sp, #72]	; 0x48
 8003518:	eba3 050b 	sub.w	r5, r3, fp
 800351c:	4647      	mov	r7, r8
 800351e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003522:	4646      	mov	r6, r8
 8003524:	e6c5      	b.n	80032b2 <_svfprintf_r+0x9ca>
 8003526:	465b      	mov	r3, fp
 8003528:	e7d8      	b.n	80034dc <_svfprintf_r+0xbf4>
 800352a:	bf00      	nop
 800352c:	08005d7c 	.word	0x08005d7c
 8003530:	08005da0 	.word	0x08005da0
 8003534:	08005db0 	.word	0x08005db0
 8003538:	2300      	movs	r3, #0
 800353a:	9308      	str	r3, [sp, #32]
 800353c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8003540:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8003544:	930b      	str	r3, [sp, #44]	; 0x2c
 8003546:	220a      	movs	r2, #10
 8003548:	2300      	movs	r3, #0
 800354a:	4630      	mov	r0, r6
 800354c:	4639      	mov	r1, r7
 800354e:	f7fd fa9b 	bl	8000a88 <__aeabi_uldivmod>
 8003552:	9b08      	ldr	r3, [sp, #32]
 8003554:	3230      	adds	r2, #48	; 0x30
 8003556:	3301      	adds	r3, #1
 8003558:	9308      	str	r3, [sp, #32]
 800355a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800355c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 8003560:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003564:	b1d3      	cbz	r3, 800359c <_svfprintf_r+0xcb4>
 8003566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003568:	9a08      	ldr	r2, [sp, #32]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d115      	bne.n	800359c <_svfprintf_r+0xcb4>
 8003570:	2aff      	cmp	r2, #255	; 0xff
 8003572:	d013      	beq.n	800359c <_svfprintf_r+0xcb4>
 8003574:	2f00      	cmp	r7, #0
 8003576:	bf08      	it	eq
 8003578:	2e0a      	cmpeq	r6, #10
 800357a:	d30f      	bcc.n	800359c <_svfprintf_r+0xcb4>
 800357c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800357e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003580:	ebab 0b03 	sub.w	fp, fp, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4658      	mov	r0, fp
 8003588:	f002 f880 	bl	800568c <strncpy>
 800358c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	b11b      	cbz	r3, 800359a <_svfprintf_r+0xcb2>
 8003592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003594:	3301      	adds	r3, #1
 8003596:	930d      	str	r3, [sp, #52]	; 0x34
 8003598:	2300      	movs	r3, #0
 800359a:	9308      	str	r3, [sp, #32]
 800359c:	2300      	movs	r3, #0
 800359e:	4630      	mov	r0, r6
 80035a0:	4639      	mov	r1, r7
 80035a2:	220a      	movs	r2, #10
 80035a4:	f7fd fa70 	bl	8000a88 <__aeabi_uldivmod>
 80035a8:	4606      	mov	r6, r0
 80035aa:	460f      	mov	r7, r1
 80035ac:	ea56 0307 	orrs.w	r3, r6, r7
 80035b0:	d0ae      	beq.n	8003510 <_svfprintf_r+0xc28>
 80035b2:	46d8      	mov	r8, fp
 80035b4:	e7c7      	b.n	8003546 <_svfprintf_r+0xc5e>
 80035b6:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80035ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80035bc:	f006 030f 	and.w	r3, r6, #15
 80035c0:	5cd3      	ldrb	r3, [r2, r3]
 80035c2:	093a      	lsrs	r2, r7, #4
 80035c4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80035c8:	0933      	lsrs	r3, r6, #4
 80035ca:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80035ce:	461e      	mov	r6, r3
 80035d0:	4617      	mov	r7, r2
 80035d2:	ea56 0307 	orrs.w	r3, r6, r7
 80035d6:	d1f0      	bne.n	80035ba <_svfprintf_r+0xcd2>
 80035d8:	e79a      	b.n	8003510 <_svfprintf_r+0xc28>
 80035da:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d196      	bne.n	8003510 <_svfprintf_r+0xc28>
 80035e2:	07d2      	lsls	r2, r2, #31
 80035e4:	bf44      	itt	mi
 80035e6:	2330      	movmi	r3, #48	; 0x30
 80035e8:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 80035ec:	e790      	b.n	8003510 <_svfprintf_r+0xc28>
 80035ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8377 	beq.w	8003ce4 <_svfprintf_r+0x13fc>
 80035f6:	2000      	movs	r0, #0
 80035f8:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 80035fc:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8003600:	960c      	str	r6, [sp, #48]	; 0x30
 8003602:	f7ff bb4e 	b.w	8002ca2 <_svfprintf_r+0x3ba>
 8003606:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800360a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800360c:	e4f6      	b.n	8002ffc <_svfprintf_r+0x714>
 800360e:	2010      	movs	r0, #16
 8003610:	2a07      	cmp	r2, #7
 8003612:	4403      	add	r3, r0
 8003614:	6060      	str	r0, [r4, #4]
 8003616:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800361a:	dd08      	ble.n	800362e <_svfprintf_r+0xd46>
 800361c:	aa28      	add	r2, sp, #160	; 0xa0
 800361e:	4649      	mov	r1, r9
 8003620:	9807      	ldr	r0, [sp, #28]
 8003622:	f002 f848 	bl	80056b6 <__ssprint_r>
 8003626:	2800      	cmp	r0, #0
 8003628:	f040 833a 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 800362c:	a92b      	add	r1, sp, #172	; 0xac
 800362e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003630:	460c      	mov	r4, r1
 8003632:	3b10      	subs	r3, #16
 8003634:	9319      	str	r3, [sp, #100]	; 0x64
 8003636:	e658      	b.n	80032ea <_svfprintf_r+0xa02>
 8003638:	460c      	mov	r4, r1
 800363a:	e672      	b.n	8003322 <_svfprintf_r+0xa3a>
 800363c:	aa28      	add	r2, sp, #160	; 0xa0
 800363e:	4649      	mov	r1, r9
 8003640:	9807      	ldr	r0, [sp, #28]
 8003642:	f002 f838 	bl	80056b6 <__ssprint_r>
 8003646:	2800      	cmp	r0, #0
 8003648:	f040 832a 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 800364c:	ac2b      	add	r4, sp, #172	; 0xac
 800364e:	e67a      	b.n	8003346 <_svfprintf_r+0xa5e>
 8003650:	aa28      	add	r2, sp, #160	; 0xa0
 8003652:	4649      	mov	r1, r9
 8003654:	9807      	ldr	r0, [sp, #28]
 8003656:	f002 f82e 	bl	80056b6 <__ssprint_r>
 800365a:	2800      	cmp	r0, #0
 800365c:	f040 8320 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003660:	ac2b      	add	r4, sp, #172	; 0xac
 8003662:	e680      	b.n	8003366 <_svfprintf_r+0xa7e>
 8003664:	2010      	movs	r0, #16
 8003666:	2a07      	cmp	r2, #7
 8003668:	4403      	add	r3, r0
 800366a:	6060      	str	r0, [r4, #4]
 800366c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003670:	dd08      	ble.n	8003684 <_svfprintf_r+0xd9c>
 8003672:	aa28      	add	r2, sp, #160	; 0xa0
 8003674:	4649      	mov	r1, r9
 8003676:	9807      	ldr	r0, [sp, #28]
 8003678:	f002 f81d 	bl	80056b6 <__ssprint_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	f040 830f 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003682:	a92b      	add	r1, sp, #172	; 0xac
 8003684:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003686:	460c      	mov	r4, r1
 8003688:	3b10      	subs	r3, #16
 800368a:	9319      	str	r3, [sp, #100]	; 0x64
 800368c:	e674      	b.n	8003378 <_svfprintf_r+0xa90>
 800368e:	460c      	mov	r4, r1
 8003690:	e68e      	b.n	80033b0 <_svfprintf_r+0xac8>
 8003692:	2010      	movs	r0, #16
 8003694:	2a07      	cmp	r2, #7
 8003696:	4403      	add	r3, r0
 8003698:	6060      	str	r0, [r4, #4]
 800369a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800369e:	dd08      	ble.n	80036b2 <_svfprintf_r+0xdca>
 80036a0:	aa28      	add	r2, sp, #160	; 0xa0
 80036a2:	4649      	mov	r1, r9
 80036a4:	9807      	ldr	r0, [sp, #28]
 80036a6:	f002 f806 	bl	80056b6 <__ssprint_r>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	f040 82f8 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 80036b0:	a92b      	add	r1, sp, #172	; 0xac
 80036b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036b4:	460c      	mov	r4, r1
 80036b6:	3b10      	subs	r3, #16
 80036b8:	9312      	str	r3, [sp, #72]	; 0x48
 80036ba:	e67e      	b.n	80033ba <_svfprintf_r+0xad2>
 80036bc:	460c      	mov	r4, r1
 80036be:	e698      	b.n	80033f2 <_svfprintf_r+0xb0a>
 80036c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036c2:	2b65      	cmp	r3, #101	; 0x65
 80036c4:	f340 8234 	ble.w	8003b30 <_svfprintf_r+0x1248>
 80036c8:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80036cc:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80036d0:	f7fd f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d069      	beq.n	80037ac <_svfprintf_r+0xec4>
 80036d8:	4b6e      	ldr	r3, [pc, #440]	; (8003894 <_svfprintf_r+0xfac>)
 80036da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	2301      	movs	r3, #1
 80036e0:	441d      	add	r5, r3
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80036e6:	952a      	str	r5, [sp, #168]	; 0xa8
 80036e8:	3301      	adds	r3, #1
 80036ea:	2b07      	cmp	r3, #7
 80036ec:	9329      	str	r3, [sp, #164]	; 0xa4
 80036ee:	dc37      	bgt.n	8003760 <_svfprintf_r+0xe78>
 80036f0:	3408      	adds	r4, #8
 80036f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036f4:	9a08      	ldr	r2, [sp, #32]
 80036f6:	4293      	cmp	r3, r2
 80036f8:	db03      	blt.n	8003702 <_svfprintf_r+0xe1a>
 80036fa:	f01a 0f01 	tst.w	sl, #1
 80036fe:	f43f ae89 	beq.w	8003414 <_svfprintf_r+0xb2c>
 8003702:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003704:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800370e:	4413      	add	r3, r2
 8003710:	932a      	str	r3, [sp, #168]	; 0xa8
 8003712:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003714:	3301      	adds	r3, #1
 8003716:	2b07      	cmp	r3, #7
 8003718:	9329      	str	r3, [sp, #164]	; 0xa4
 800371a:	dc2b      	bgt.n	8003774 <_svfprintf_r+0xe8c>
 800371c:	3408      	adds	r4, #8
 800371e:	9b08      	ldr	r3, [sp, #32]
 8003720:	1e5d      	subs	r5, r3, #1
 8003722:	2d00      	cmp	r5, #0
 8003724:	f77f ae76 	ble.w	8003414 <_svfprintf_r+0xb2c>
 8003728:	2710      	movs	r7, #16
 800372a:	4e5b      	ldr	r6, [pc, #364]	; (8003898 <_svfprintf_r+0xfb0>)
 800372c:	2d10      	cmp	r5, #16
 800372e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8003732:	f104 0108 	add.w	r1, r4, #8
 8003736:	f103 0301 	add.w	r3, r3, #1
 800373a:	6026      	str	r6, [r4, #0]
 800373c:	dc24      	bgt.n	8003788 <_svfprintf_r+0xea0>
 800373e:	6065      	str	r5, [r4, #4]
 8003740:	2b07      	cmp	r3, #7
 8003742:	4415      	add	r5, r2
 8003744:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003748:	f340 8289 	ble.w	8003c5e <_svfprintf_r+0x1376>
 800374c:	aa28      	add	r2, sp, #160	; 0xa0
 800374e:	4649      	mov	r1, r9
 8003750:	9807      	ldr	r0, [sp, #28]
 8003752:	f001 ffb0 	bl	80056b6 <__ssprint_r>
 8003756:	2800      	cmp	r0, #0
 8003758:	f040 82a2 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 800375c:	ac2b      	add	r4, sp, #172	; 0xac
 800375e:	e659      	b.n	8003414 <_svfprintf_r+0xb2c>
 8003760:	aa28      	add	r2, sp, #160	; 0xa0
 8003762:	4649      	mov	r1, r9
 8003764:	9807      	ldr	r0, [sp, #28]
 8003766:	f001 ffa6 	bl	80056b6 <__ssprint_r>
 800376a:	2800      	cmp	r0, #0
 800376c:	f040 8298 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003770:	ac2b      	add	r4, sp, #172	; 0xac
 8003772:	e7be      	b.n	80036f2 <_svfprintf_r+0xe0a>
 8003774:	aa28      	add	r2, sp, #160	; 0xa0
 8003776:	4649      	mov	r1, r9
 8003778:	9807      	ldr	r0, [sp, #28]
 800377a:	f001 ff9c 	bl	80056b6 <__ssprint_r>
 800377e:	2800      	cmp	r0, #0
 8003780:	f040 828e 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003784:	ac2b      	add	r4, sp, #172	; 0xac
 8003786:	e7ca      	b.n	800371e <_svfprintf_r+0xe36>
 8003788:	3210      	adds	r2, #16
 800378a:	2b07      	cmp	r3, #7
 800378c:	6067      	str	r7, [r4, #4]
 800378e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8003792:	dd08      	ble.n	80037a6 <_svfprintf_r+0xebe>
 8003794:	aa28      	add	r2, sp, #160	; 0xa0
 8003796:	4649      	mov	r1, r9
 8003798:	9807      	ldr	r0, [sp, #28]
 800379a:	f001 ff8c 	bl	80056b6 <__ssprint_r>
 800379e:	2800      	cmp	r0, #0
 80037a0:	f040 827e 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 80037a4:	a92b      	add	r1, sp, #172	; 0xac
 80037a6:	3d10      	subs	r5, #16
 80037a8:	460c      	mov	r4, r1
 80037aa:	e7bf      	b.n	800372c <_svfprintf_r+0xe44>
 80037ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dc74      	bgt.n	800389c <_svfprintf_r+0xfb4>
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <_svfprintf_r+0xfac>)
 80037b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	2301      	movs	r3, #1
 80037ba:	441d      	add	r5, r3
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80037c0:	952a      	str	r5, [sp, #168]	; 0xa8
 80037c2:	3301      	adds	r3, #1
 80037c4:	2b07      	cmp	r3, #7
 80037c6:	9329      	str	r3, [sp, #164]	; 0xa4
 80037c8:	dc3e      	bgt.n	8003848 <_svfprintf_r+0xf60>
 80037ca:	3408      	adds	r4, #8
 80037cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037ce:	b92b      	cbnz	r3, 80037dc <_svfprintf_r+0xef4>
 80037d0:	9b08      	ldr	r3, [sp, #32]
 80037d2:	b91b      	cbnz	r3, 80037dc <_svfprintf_r+0xef4>
 80037d4:	f01a 0f01 	tst.w	sl, #1
 80037d8:	f43f ae1c 	beq.w	8003414 <_svfprintf_r+0xb2c>
 80037dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80037de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037e4:	6063      	str	r3, [r4, #4]
 80037e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80037e8:	4413      	add	r3, r2
 80037ea:	932a      	str	r3, [sp, #168]	; 0xa8
 80037ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80037ee:	3301      	adds	r3, #1
 80037f0:	2b07      	cmp	r3, #7
 80037f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80037f4:	dc32      	bgt.n	800385c <_svfprintf_r+0xf74>
 80037f6:	3408      	adds	r4, #8
 80037f8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	da1b      	bge.n	8003836 <_svfprintf_r+0xf4e>
 80037fe:	4623      	mov	r3, r4
 8003800:	2710      	movs	r7, #16
 8003802:	4e25      	ldr	r6, [pc, #148]	; (8003898 <_svfprintf_r+0xfb0>)
 8003804:	426d      	negs	r5, r5
 8003806:	2d10      	cmp	r5, #16
 8003808:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 800380c:	f104 0408 	add.w	r4, r4, #8
 8003810:	f102 0201 	add.w	r2, r2, #1
 8003814:	601e      	str	r6, [r3, #0]
 8003816:	dc2b      	bgt.n	8003870 <_svfprintf_r+0xf88>
 8003818:	605d      	str	r5, [r3, #4]
 800381a:	2a07      	cmp	r2, #7
 800381c:	440d      	add	r5, r1
 800381e:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 8003822:	dd08      	ble.n	8003836 <_svfprintf_r+0xf4e>
 8003824:	aa28      	add	r2, sp, #160	; 0xa0
 8003826:	4649      	mov	r1, r9
 8003828:	9807      	ldr	r0, [sp, #28]
 800382a:	f001 ff44 	bl	80056b6 <__ssprint_r>
 800382e:	2800      	cmp	r0, #0
 8003830:	f040 8236 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003834:	ac2b      	add	r4, sp, #172	; 0xac
 8003836:	9b08      	ldr	r3, [sp, #32]
 8003838:	9a08      	ldr	r2, [sp, #32]
 800383a:	6063      	str	r3, [r4, #4]
 800383c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800383e:	f8c4 b000 	str.w	fp, [r4]
 8003842:	4413      	add	r3, r2
 8003844:	932a      	str	r3, [sp, #168]	; 0xa8
 8003846:	e5de      	b.n	8003406 <_svfprintf_r+0xb1e>
 8003848:	aa28      	add	r2, sp, #160	; 0xa0
 800384a:	4649      	mov	r1, r9
 800384c:	9807      	ldr	r0, [sp, #28]
 800384e:	f001 ff32 	bl	80056b6 <__ssprint_r>
 8003852:	2800      	cmp	r0, #0
 8003854:	f040 8224 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003858:	ac2b      	add	r4, sp, #172	; 0xac
 800385a:	e7b7      	b.n	80037cc <_svfprintf_r+0xee4>
 800385c:	aa28      	add	r2, sp, #160	; 0xa0
 800385e:	4649      	mov	r1, r9
 8003860:	9807      	ldr	r0, [sp, #28]
 8003862:	f001 ff28 	bl	80056b6 <__ssprint_r>
 8003866:	2800      	cmp	r0, #0
 8003868:	f040 821a 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 800386c:	ac2b      	add	r4, sp, #172	; 0xac
 800386e:	e7c3      	b.n	80037f8 <_svfprintf_r+0xf10>
 8003870:	3110      	adds	r1, #16
 8003872:	2a07      	cmp	r2, #7
 8003874:	605f      	str	r7, [r3, #4]
 8003876:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 800387a:	dd08      	ble.n	800388e <_svfprintf_r+0xfa6>
 800387c:	aa28      	add	r2, sp, #160	; 0xa0
 800387e:	4649      	mov	r1, r9
 8003880:	9807      	ldr	r0, [sp, #28]
 8003882:	f001 ff18 	bl	80056b6 <__ssprint_r>
 8003886:	2800      	cmp	r0, #0
 8003888:	f040 820a 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 800388c:	ac2b      	add	r4, sp, #172	; 0xac
 800388e:	3d10      	subs	r5, #16
 8003890:	4623      	mov	r3, r4
 8003892:	e7b8      	b.n	8003806 <_svfprintf_r+0xf1e>
 8003894:	08005d9e 	.word	0x08005d9e
 8003898:	08005db0 	.word	0x08005db0
 800389c:	9b08      	ldr	r3, [sp, #32]
 800389e:	42b3      	cmp	r3, r6
 80038a0:	bfa8      	it	ge
 80038a2:	4633      	movge	r3, r6
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	461d      	mov	r5, r3
 80038a8:	dd0b      	ble.n	80038c2 <_svfprintf_r+0xfda>
 80038aa:	e9c4 b300 	strd	fp, r3, [r4]
 80038ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038b0:	442b      	add	r3, r5
 80038b2:	932a      	str	r3, [sp, #168]	; 0xa8
 80038b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80038b6:	3301      	adds	r3, #1
 80038b8:	2b07      	cmp	r3, #7
 80038ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80038bc:	f300 8086 	bgt.w	80039cc <_svfprintf_r+0x10e4>
 80038c0:	3408      	adds	r4, #8
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	bfb4      	ite	lt
 80038c6:	4635      	movlt	r5, r6
 80038c8:	1b75      	subge	r5, r6, r5
 80038ca:	2d00      	cmp	r5, #0
 80038cc:	dd19      	ble.n	8003902 <_svfprintf_r+0x101a>
 80038ce:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80038d2:	4896      	ldr	r0, [pc, #600]	; (8003b2c <_svfprintf_r+0x1244>)
 80038d4:	2d10      	cmp	r5, #16
 80038d6:	f103 0301 	add.w	r3, r3, #1
 80038da:	f104 0108 	add.w	r1, r4, #8
 80038de:	6020      	str	r0, [r4, #0]
 80038e0:	dc7e      	bgt.n	80039e0 <_svfprintf_r+0x10f8>
 80038e2:	6065      	str	r5, [r4, #4]
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	4415      	add	r5, r2
 80038e8:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80038ec:	f340 808b 	ble.w	8003a06 <_svfprintf_r+0x111e>
 80038f0:	aa28      	add	r2, sp, #160	; 0xa0
 80038f2:	4649      	mov	r1, r9
 80038f4:	9807      	ldr	r0, [sp, #28]
 80038f6:	f001 fede 	bl	80056b6 <__ssprint_r>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	f040 81d0 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003900:	ac2b      	add	r4, sp, #172	; 0xac
 8003902:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8003906:	445e      	add	r6, fp
 8003908:	d009      	beq.n	800391e <_svfprintf_r+0x1036>
 800390a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d17c      	bne.n	8003a0a <_svfprintf_r+0x1122>
 8003910:	2f00      	cmp	r7, #0
 8003912:	d17c      	bne.n	8003a0e <_svfprintf_r+0x1126>
 8003914:	9b08      	ldr	r3, [sp, #32]
 8003916:	445b      	add	r3, fp
 8003918:	429e      	cmp	r6, r3
 800391a:	bf28      	it	cs
 800391c:	461e      	movcs	r6, r3
 800391e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003920:	9a08      	ldr	r2, [sp, #32]
 8003922:	4293      	cmp	r3, r2
 8003924:	db02      	blt.n	800392c <_svfprintf_r+0x1044>
 8003926:	f01a 0f01 	tst.w	sl, #1
 800392a:	d00e      	beq.n	800394a <_svfprintf_r+0x1062>
 800392c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800392e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003938:	4413      	add	r3, r2
 800393a:	932a      	str	r3, [sp, #168]	; 0xa8
 800393c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800393e:	3301      	adds	r3, #1
 8003940:	2b07      	cmp	r3, #7
 8003942:	9329      	str	r3, [sp, #164]	; 0xa4
 8003944:	f300 80dd 	bgt.w	8003b02 <_svfprintf_r+0x121a>
 8003948:	3408      	adds	r4, #8
 800394a:	9b08      	ldr	r3, [sp, #32]
 800394c:	9a08      	ldr	r2, [sp, #32]
 800394e:	eb0b 0503 	add.w	r5, fp, r3
 8003952:	1bab      	subs	r3, r5, r6
 8003954:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8003956:	1b55      	subs	r5, r2, r5
 8003958:	429d      	cmp	r5, r3
 800395a:	bfa8      	it	ge
 800395c:	461d      	movge	r5, r3
 800395e:	2d00      	cmp	r5, #0
 8003960:	dd0b      	ble.n	800397a <_svfprintf_r+0x1092>
 8003962:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003964:	e9c4 6500 	strd	r6, r5, [r4]
 8003968:	442b      	add	r3, r5
 800396a:	932a      	str	r3, [sp, #168]	; 0xa8
 800396c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800396e:	3301      	adds	r3, #1
 8003970:	2b07      	cmp	r3, #7
 8003972:	9329      	str	r3, [sp, #164]	; 0xa4
 8003974:	f300 80cf 	bgt.w	8003b16 <_svfprintf_r+0x122e>
 8003978:	3408      	adds	r4, #8
 800397a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800397c:	9a08      	ldr	r2, [sp, #32]
 800397e:	2d00      	cmp	r5, #0
 8003980:	eba2 0303 	sub.w	r3, r2, r3
 8003984:	bfb4      	ite	lt
 8003986:	461d      	movlt	r5, r3
 8003988:	1b5d      	subge	r5, r3, r5
 800398a:	2d00      	cmp	r5, #0
 800398c:	f77f ad42 	ble.w	8003414 <_svfprintf_r+0xb2c>
 8003990:	2710      	movs	r7, #16
 8003992:	4e66      	ldr	r6, [pc, #408]	; (8003b2c <_svfprintf_r+0x1244>)
 8003994:	2d10      	cmp	r5, #16
 8003996:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800399a:	f104 0108 	add.w	r1, r4, #8
 800399e:	f103 0301 	add.w	r3, r3, #1
 80039a2:	6026      	str	r6, [r4, #0]
 80039a4:	f77f aecb 	ble.w	800373e <_svfprintf_r+0xe56>
 80039a8:	3210      	adds	r2, #16
 80039aa:	2b07      	cmp	r3, #7
 80039ac:	6067      	str	r7, [r4, #4]
 80039ae:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80039b2:	dd08      	ble.n	80039c6 <_svfprintf_r+0x10de>
 80039b4:	aa28      	add	r2, sp, #160	; 0xa0
 80039b6:	4649      	mov	r1, r9
 80039b8:	9807      	ldr	r0, [sp, #28]
 80039ba:	f001 fe7c 	bl	80056b6 <__ssprint_r>
 80039be:	2800      	cmp	r0, #0
 80039c0:	f040 816e 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 80039c4:	a92b      	add	r1, sp, #172	; 0xac
 80039c6:	3d10      	subs	r5, #16
 80039c8:	460c      	mov	r4, r1
 80039ca:	e7e3      	b.n	8003994 <_svfprintf_r+0x10ac>
 80039cc:	aa28      	add	r2, sp, #160	; 0xa0
 80039ce:	4649      	mov	r1, r9
 80039d0:	9807      	ldr	r0, [sp, #28]
 80039d2:	f001 fe70 	bl	80056b6 <__ssprint_r>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	f040 8162 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 80039dc:	ac2b      	add	r4, sp, #172	; 0xac
 80039de:	e770      	b.n	80038c2 <_svfprintf_r+0xfda>
 80039e0:	2010      	movs	r0, #16
 80039e2:	2b07      	cmp	r3, #7
 80039e4:	4402      	add	r2, r0
 80039e6:	6060      	str	r0, [r4, #4]
 80039e8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80039ec:	dd08      	ble.n	8003a00 <_svfprintf_r+0x1118>
 80039ee:	aa28      	add	r2, sp, #160	; 0xa0
 80039f0:	4649      	mov	r1, r9
 80039f2:	9807      	ldr	r0, [sp, #28]
 80039f4:	f001 fe5f 	bl	80056b6 <__ssprint_r>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	f040 8151 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 80039fe:	a92b      	add	r1, sp, #172	; 0xac
 8003a00:	3d10      	subs	r5, #16
 8003a02:	460c      	mov	r4, r1
 8003a04:	e763      	b.n	80038ce <_svfprintf_r+0xfe6>
 8003a06:	460c      	mov	r4, r1
 8003a08:	e77b      	b.n	8003902 <_svfprintf_r+0x101a>
 8003a0a:	2f00      	cmp	r7, #0
 8003a0c:	d049      	beq.n	8003aa2 <_svfprintf_r+0x11ba>
 8003a0e:	3f01      	subs	r7, #1
 8003a10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a18:	6063      	str	r3, [r4, #4]
 8003a1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003a1c:	4413      	add	r3, r2
 8003a1e:	932a      	str	r3, [sp, #168]	; 0xa8
 8003a20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003a22:	3301      	adds	r3, #1
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	9329      	str	r3, [sp, #164]	; 0xa4
 8003a28:	dc42      	bgt.n	8003ab0 <_svfprintf_r+0x11c8>
 8003a2a:	3408      	adds	r4, #8
 8003a2c:	9b08      	ldr	r3, [sp, #32]
 8003a2e:	445b      	add	r3, fp
 8003a30:	1b9a      	subs	r2, r3, r6
 8003a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	4293      	cmp	r3, r2
 8003a38:	bfa8      	it	ge
 8003a3a:	4613      	movge	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	461d      	mov	r5, r3
 8003a40:	dd0a      	ble.n	8003a58 <_svfprintf_r+0x1170>
 8003a42:	e9c4 6300 	strd	r6, r3, [r4]
 8003a46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003a48:	442b      	add	r3, r5
 8003a4a:	932a      	str	r3, [sp, #168]	; 0xa8
 8003a4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003a4e:	3301      	adds	r3, #1
 8003a50:	2b07      	cmp	r3, #7
 8003a52:	9329      	str	r3, [sp, #164]	; 0xa4
 8003a54:	dc36      	bgt.n	8003ac4 <_svfprintf_r+0x11dc>
 8003a56:	3408      	adds	r4, #8
 8003a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a5a:	2d00      	cmp	r5, #0
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	bfb4      	ite	lt
 8003a60:	461d      	movlt	r5, r3
 8003a62:	1b5d      	subge	r5, r3, r5
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	dd18      	ble.n	8003a9a <_svfprintf_r+0x11b2>
 8003a68:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8003a6c:	482f      	ldr	r0, [pc, #188]	; (8003b2c <_svfprintf_r+0x1244>)
 8003a6e:	2d10      	cmp	r5, #16
 8003a70:	f102 0201 	add.w	r2, r2, #1
 8003a74:	f104 0108 	add.w	r1, r4, #8
 8003a78:	6020      	str	r0, [r4, #0]
 8003a7a:	dc2d      	bgt.n	8003ad8 <_svfprintf_r+0x11f0>
 8003a7c:	442b      	add	r3, r5
 8003a7e:	2a07      	cmp	r2, #7
 8003a80:	6065      	str	r5, [r4, #4]
 8003a82:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003a86:	dd3a      	ble.n	8003afe <_svfprintf_r+0x1216>
 8003a88:	aa28      	add	r2, sp, #160	; 0xa0
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	9807      	ldr	r0, [sp, #28]
 8003a8e:	f001 fe12 	bl	80056b6 <__ssprint_r>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	f040 8104 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003a98:	ac2b      	add	r4, sp, #172	; 0xac
 8003a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	441e      	add	r6, r3
 8003aa0:	e733      	b.n	800390a <_svfprintf_r+0x1022>
 8003aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8003aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003aae:	e7af      	b.n	8003a10 <_svfprintf_r+0x1128>
 8003ab0:	aa28      	add	r2, sp, #160	; 0xa0
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	9807      	ldr	r0, [sp, #28]
 8003ab6:	f001 fdfe 	bl	80056b6 <__ssprint_r>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	f040 80f0 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003ac0:	ac2b      	add	r4, sp, #172	; 0xac
 8003ac2:	e7b3      	b.n	8003a2c <_svfprintf_r+0x1144>
 8003ac4:	aa28      	add	r2, sp, #160	; 0xa0
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	9807      	ldr	r0, [sp, #28]
 8003aca:	f001 fdf4 	bl	80056b6 <__ssprint_r>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	f040 80e6 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003ad4:	ac2b      	add	r4, sp, #172	; 0xac
 8003ad6:	e7bf      	b.n	8003a58 <_svfprintf_r+0x1170>
 8003ad8:	2010      	movs	r0, #16
 8003ada:	2a07      	cmp	r2, #7
 8003adc:	4403      	add	r3, r0
 8003ade:	6060      	str	r0, [r4, #4]
 8003ae0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003ae4:	dd08      	ble.n	8003af8 <_svfprintf_r+0x1210>
 8003ae6:	aa28      	add	r2, sp, #160	; 0xa0
 8003ae8:	4649      	mov	r1, r9
 8003aea:	9807      	ldr	r0, [sp, #28]
 8003aec:	f001 fde3 	bl	80056b6 <__ssprint_r>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	f040 80d5 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003af6:	a92b      	add	r1, sp, #172	; 0xac
 8003af8:	3d10      	subs	r5, #16
 8003afa:	460c      	mov	r4, r1
 8003afc:	e7b4      	b.n	8003a68 <_svfprintf_r+0x1180>
 8003afe:	460c      	mov	r4, r1
 8003b00:	e7cb      	b.n	8003a9a <_svfprintf_r+0x11b2>
 8003b02:	aa28      	add	r2, sp, #160	; 0xa0
 8003b04:	4649      	mov	r1, r9
 8003b06:	9807      	ldr	r0, [sp, #28]
 8003b08:	f001 fdd5 	bl	80056b6 <__ssprint_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	f040 80c7 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003b12:	ac2b      	add	r4, sp, #172	; 0xac
 8003b14:	e719      	b.n	800394a <_svfprintf_r+0x1062>
 8003b16:	aa28      	add	r2, sp, #160	; 0xa0
 8003b18:	4649      	mov	r1, r9
 8003b1a:	9807      	ldr	r0, [sp, #28]
 8003b1c:	f001 fdcb 	bl	80056b6 <__ssprint_r>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f040 80bd 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003b26:	ac2b      	add	r4, sp, #172	; 0xac
 8003b28:	e727      	b.n	800397a <_svfprintf_r+0x1092>
 8003b2a:	bf00      	nop
 8003b2c:	08005db0 	.word	0x08005db0
 8003b30:	9a08      	ldr	r2, [sp, #32]
 8003b32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003b34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003b36:	2a01      	cmp	r2, #1
 8003b38:	f105 0501 	add.w	r5, r5, #1
 8003b3c:	f103 0301 	add.w	r3, r3, #1
 8003b40:	f104 0608 	add.w	r6, r4, #8
 8003b44:	dc02      	bgt.n	8003b4c <_svfprintf_r+0x1264>
 8003b46:	f01a 0f01 	tst.w	sl, #1
 8003b4a:	d07d      	beq.n	8003c48 <_svfprintf_r+0x1360>
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2b07      	cmp	r3, #7
 8003b50:	f8c4 b000 	str.w	fp, [r4]
 8003b54:	6062      	str	r2, [r4, #4]
 8003b56:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003b5a:	dd08      	ble.n	8003b6e <_svfprintf_r+0x1286>
 8003b5c:	aa28      	add	r2, sp, #160	; 0xa0
 8003b5e:	4649      	mov	r1, r9
 8003b60:	9807      	ldr	r0, [sp, #28]
 8003b62:	f001 fda8 	bl	80056b6 <__ssprint_r>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	f040 809a 	bne.w	8003ca0 <_svfprintf_r+0x13b8>
 8003b6c:	ae2b      	add	r6, sp, #172	; 0xac
 8003b6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b76:	6073      	str	r3, [r6, #4]
 8003b78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003b7a:	4413      	add	r3, r2
 8003b7c:	932a      	str	r3, [sp, #168]	; 0xa8
 8003b7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003b80:	3301      	adds	r3, #1
 8003b82:	2b07      	cmp	r3, #7
 8003b84:	9329      	str	r3, [sp, #164]	; 0xa4
 8003b86:	dc31      	bgt.n	8003bec <_svfprintf_r+0x1304>
 8003b88:	3608      	adds	r6, #8
 8003b8a:	9b08      	ldr	r3, [sp, #32]
 8003b8c:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8003b90:	1e5c      	subs	r4, r3, #1
 8003b92:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003b96:	f7fc ff07 	bl	80009a8 <__aeabi_dcmpeq>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d12f      	bne.n	8003bfe <_svfprintf_r+0x1316>
 8003b9e:	f10b 0301 	add.w	r3, fp, #1
 8003ba2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003ba4:	e9c6 3400 	strd	r3, r4, [r6]
 8003ba8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003baa:	9908      	ldr	r1, [sp, #32]
 8003bac:	3201      	adds	r2, #1
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	440b      	add	r3, r1
 8003bb2:	2a07      	cmp	r2, #7
 8003bb4:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8003bb8:	dd4f      	ble.n	8003c5a <_svfprintf_r+0x1372>
 8003bba:	aa28      	add	r2, sp, #160	; 0xa0
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	9807      	ldr	r0, [sp, #28]
 8003bc0:	f001 fd79 	bl	80056b6 <__ssprint_r>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d16b      	bne.n	8003ca0 <_svfprintf_r+0x13b8>
 8003bc8:	ae2b      	add	r6, sp, #172	; 0xac
 8003bca:	ab24      	add	r3, sp, #144	; 0x90
 8003bcc:	6033      	str	r3, [r6, #0]
 8003bce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003bd2:	6073      	str	r3, [r6, #4]
 8003bd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003bd6:	4413      	add	r3, r2
 8003bd8:	932a      	str	r3, [sp, #168]	; 0xa8
 8003bda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003bdc:	3301      	adds	r3, #1
 8003bde:	2b07      	cmp	r3, #7
 8003be0:	9329      	str	r3, [sp, #164]	; 0xa4
 8003be2:	f73f adb3 	bgt.w	800374c <_svfprintf_r+0xe64>
 8003be6:	f106 0408 	add.w	r4, r6, #8
 8003bea:	e413      	b.n	8003414 <_svfprintf_r+0xb2c>
 8003bec:	aa28      	add	r2, sp, #160	; 0xa0
 8003bee:	4649      	mov	r1, r9
 8003bf0:	9807      	ldr	r0, [sp, #28]
 8003bf2:	f001 fd60 	bl	80056b6 <__ssprint_r>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d152      	bne.n	8003ca0 <_svfprintf_r+0x13b8>
 8003bfa:	ae2b      	add	r6, sp, #172	; 0xac
 8003bfc:	e7c5      	b.n	8003b8a <_svfprintf_r+0x12a2>
 8003bfe:	2c00      	cmp	r4, #0
 8003c00:	dde3      	ble.n	8003bca <_svfprintf_r+0x12e2>
 8003c02:	2710      	movs	r7, #16
 8003c04:	4d3d      	ldr	r5, [pc, #244]	; (8003cfc <_svfprintf_r+0x1414>)
 8003c06:	2c10      	cmp	r4, #16
 8003c08:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8003c0c:	f106 0108 	add.w	r1, r6, #8
 8003c10:	f103 0301 	add.w	r3, r3, #1
 8003c14:	6035      	str	r5, [r6, #0]
 8003c16:	dc07      	bgt.n	8003c28 <_svfprintf_r+0x1340>
 8003c18:	6074      	str	r4, [r6, #4]
 8003c1a:	2b07      	cmp	r3, #7
 8003c1c:	4414      	add	r4, r2
 8003c1e:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8003c22:	dcca      	bgt.n	8003bba <_svfprintf_r+0x12d2>
 8003c24:	460e      	mov	r6, r1
 8003c26:	e7d0      	b.n	8003bca <_svfprintf_r+0x12e2>
 8003c28:	3210      	adds	r2, #16
 8003c2a:	2b07      	cmp	r3, #7
 8003c2c:	6077      	str	r7, [r6, #4]
 8003c2e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8003c32:	dd06      	ble.n	8003c42 <_svfprintf_r+0x135a>
 8003c34:	aa28      	add	r2, sp, #160	; 0xa0
 8003c36:	4649      	mov	r1, r9
 8003c38:	9807      	ldr	r0, [sp, #28]
 8003c3a:	f001 fd3c 	bl	80056b6 <__ssprint_r>
 8003c3e:	bb78      	cbnz	r0, 8003ca0 <_svfprintf_r+0x13b8>
 8003c40:	a92b      	add	r1, sp, #172	; 0xac
 8003c42:	3c10      	subs	r4, #16
 8003c44:	460e      	mov	r6, r1
 8003c46:	e7de      	b.n	8003c06 <_svfprintf_r+0x131e>
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2b07      	cmp	r3, #7
 8003c4c:	f8c4 b000 	str.w	fp, [r4]
 8003c50:	6062      	str	r2, [r4, #4]
 8003c52:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003c56:	ddb8      	ble.n	8003bca <_svfprintf_r+0x12e2>
 8003c58:	e7af      	b.n	8003bba <_svfprintf_r+0x12d2>
 8003c5a:	3608      	adds	r6, #8
 8003c5c:	e7b5      	b.n	8003bca <_svfprintf_r+0x12e2>
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f7ff bbd8 	b.w	8003414 <_svfprintf_r+0xb2c>
 8003c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003c68:	1a9d      	subs	r5, r3, r2
 8003c6a:	2d00      	cmp	r5, #0
 8003c6c:	f77f abd6 	ble.w	800341c <_svfprintf_r+0xb34>
 8003c70:	2710      	movs	r7, #16
 8003c72:	4e23      	ldr	r6, [pc, #140]	; (8003d00 <_svfprintf_r+0x1418>)
 8003c74:	2d10      	cmp	r5, #16
 8003c76:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8003c7a:	6026      	str	r6, [r4, #0]
 8003c7c:	f103 0301 	add.w	r3, r3, #1
 8003c80:	dc18      	bgt.n	8003cb4 <_svfprintf_r+0x13cc>
 8003c82:	6065      	str	r5, [r4, #4]
 8003c84:	2b07      	cmp	r3, #7
 8003c86:	4415      	add	r5, r2
 8003c88:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8003c8c:	f77f abc6 	ble.w	800341c <_svfprintf_r+0xb34>
 8003c90:	aa28      	add	r2, sp, #160	; 0xa0
 8003c92:	4649      	mov	r1, r9
 8003c94:	9807      	ldr	r0, [sp, #28]
 8003c96:	f001 fd0e 	bl	80056b6 <__ssprint_r>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	f43f abbe 	beq.w	800341c <_svfprintf_r+0xb34>
 8003ca0:	f1b8 0f00 	cmp.w	r8, #0
 8003ca4:	f43f a8a9 	beq.w	8002dfa <_svfprintf_r+0x512>
 8003ca8:	4641      	mov	r1, r8
 8003caa:	9807      	ldr	r0, [sp, #28]
 8003cac:	f000 fed2 	bl	8004a54 <_free_r>
 8003cb0:	f7ff b8a3 	b.w	8002dfa <_svfprintf_r+0x512>
 8003cb4:	3210      	adds	r2, #16
 8003cb6:	2b07      	cmp	r3, #7
 8003cb8:	6067      	str	r7, [r4, #4]
 8003cba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8003cbe:	dc02      	bgt.n	8003cc6 <_svfprintf_r+0x13de>
 8003cc0:	3408      	adds	r4, #8
 8003cc2:	3d10      	subs	r5, #16
 8003cc4:	e7d6      	b.n	8003c74 <_svfprintf_r+0x138c>
 8003cc6:	aa28      	add	r2, sp, #160	; 0xa0
 8003cc8:	4649      	mov	r1, r9
 8003cca:	9807      	ldr	r0, [sp, #28]
 8003ccc:	f001 fcf3 	bl	80056b6 <__ssprint_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <_svfprintf_r+0x13b8>
 8003cd4:	ac2b      	add	r4, sp, #172	; 0xac
 8003cd6:	e7f4      	b.n	8003cc2 <_svfprintf_r+0x13da>
 8003cd8:	4641      	mov	r1, r8
 8003cda:	9807      	ldr	r0, [sp, #28]
 8003cdc:	f000 feba 	bl	8004a54 <_free_r>
 8003ce0:	f7ff bbb4 	b.w	800344c <_svfprintf_r+0xb64>
 8003ce4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f43f a887 	beq.w	8002dfa <_svfprintf_r+0x512>
 8003cec:	aa28      	add	r2, sp, #160	; 0xa0
 8003cee:	4649      	mov	r1, r9
 8003cf0:	9807      	ldr	r0, [sp, #28]
 8003cf2:	f001 fce0 	bl	80056b6 <__ssprint_r>
 8003cf6:	f7ff b880 	b.w	8002dfa <_svfprintf_r+0x512>
 8003cfa:	bf00      	nop
 8003cfc:	08005db0 	.word	0x08005db0
 8003d00:	08005da0 	.word	0x08005da0

08003d04 <register_fini>:
 8003d04:	4b02      	ldr	r3, [pc, #8]	; (8003d10 <register_fini+0xc>)
 8003d06:	b113      	cbz	r3, 8003d0e <register_fini+0xa>
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <register_fini+0x10>)
 8003d0a:	f000 b805 	b.w	8003d18 <atexit>
 8003d0e:	4770      	bx	lr
 8003d10:	00000000 	.word	0x00000000
 8003d14:	08004985 	.word	0x08004985

08003d18 <atexit>:
 8003d18:	2300      	movs	r3, #0
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 bd4e 	b.w	80057c0 <__register_exitproc>

08003d24 <quorem>:
 8003d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	6903      	ldr	r3, [r0, #16]
 8003d2a:	690c      	ldr	r4, [r1, #16]
 8003d2c:	4680      	mov	r8, r0
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	f2c0 8084 	blt.w	8003e3c <quorem+0x118>
 8003d34:	3c01      	subs	r4, #1
 8003d36:	f101 0714 	add.w	r7, r1, #20
 8003d3a:	f100 0614 	add.w	r6, r0, #20
 8003d3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003d42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003d46:	3501      	adds	r5, #1
 8003d48:	fbb0 f5f5 	udiv	r5, r0, r5
 8003d4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003d50:	eb06 030c 	add.w	r3, r6, ip
 8003d54:	eb07 090c 	add.w	r9, r7, ip
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	b39d      	cbz	r5, 8003dc4 <quorem+0xa0>
 8003d5c:	f04f 0a00 	mov.w	sl, #0
 8003d60:	4638      	mov	r0, r7
 8003d62:	46b6      	mov	lr, r6
 8003d64:	46d3      	mov	fp, sl
 8003d66:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d6a:	b293      	uxth	r3, r2
 8003d6c:	fb05 a303 	mla	r3, r5, r3, sl
 8003d70:	0c12      	lsrs	r2, r2, #16
 8003d72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003d76:	fb05 a202 	mla	r2, r5, r2, sl
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	ebab 0303 	sub.w	r3, fp, r3
 8003d80:	f8de b000 	ldr.w	fp, [lr]
 8003d84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003d88:	fa1f fb8b 	uxth.w	fp, fp
 8003d8c:	445b      	add	r3, fp
 8003d8e:	fa1f fb82 	uxth.w	fp, r2
 8003d92:	f8de 2000 	ldr.w	r2, [lr]
 8003d96:	4581      	cmp	r9, r0
 8003d98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003da6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003daa:	f84e 3b04 	str.w	r3, [lr], #4
 8003dae:	d2da      	bcs.n	8003d66 <quorem+0x42>
 8003db0:	f856 300c 	ldr.w	r3, [r6, ip]
 8003db4:	b933      	cbnz	r3, 8003dc4 <quorem+0xa0>
 8003db6:	9b01      	ldr	r3, [sp, #4]
 8003db8:	3b04      	subs	r3, #4
 8003dba:	429e      	cmp	r6, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	d331      	bcc.n	8003e24 <quorem+0x100>
 8003dc0:	f8c8 4010 	str.w	r4, [r8, #16]
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	f001 fb57 	bl	8005478 <__mcmp>
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	db26      	blt.n	8003e1c <quorem+0xf8>
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f04f 0c00 	mov.w	ip, #0
 8003dd4:	3501      	adds	r5, #1
 8003dd6:	f857 1b04 	ldr.w	r1, [r7], #4
 8003dda:	f8d0 e000 	ldr.w	lr, [r0]
 8003dde:	b28b      	uxth	r3, r1
 8003de0:	ebac 0303 	sub.w	r3, ip, r3
 8003de4:	fa1f f28e 	uxth.w	r2, lr
 8003de8:	4413      	add	r3, r2
 8003dea:	0c0a      	lsrs	r2, r1, #16
 8003dec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dfa:	45b9      	cmp	r9, r7
 8003dfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e00:	f840 3b04 	str.w	r3, [r0], #4
 8003e04:	d2e7      	bcs.n	8003dd6 <quorem+0xb2>
 8003e06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003e0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003e0e:	b92a      	cbnz	r2, 8003e1c <quorem+0xf8>
 8003e10:	3b04      	subs	r3, #4
 8003e12:	429e      	cmp	r6, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	d30b      	bcc.n	8003e30 <quorem+0x10c>
 8003e18:	f8c8 4010 	str.w	r4, [r8, #16]
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	b003      	add	sp, #12
 8003e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	3b04      	subs	r3, #4
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	d1c9      	bne.n	8003dc0 <quorem+0x9c>
 8003e2c:	3c01      	subs	r4, #1
 8003e2e:	e7c4      	b.n	8003dba <quorem+0x96>
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	3b04      	subs	r3, #4
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d1ef      	bne.n	8003e18 <quorem+0xf4>
 8003e38:	3c01      	subs	r4, #1
 8003e3a:	e7ea      	b.n	8003e12 <quorem+0xee>
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	e7ee      	b.n	8003e1e <quorem+0xfa>

08003e40 <_dtoa_r>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	4616      	mov	r6, r2
 8003e46:	461f      	mov	r7, r3
 8003e48:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003e4a:	b095      	sub	sp, #84	; 0x54
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003e50:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003e54:	b141      	cbz	r1, 8003e68 <_dtoa_r+0x28>
 8003e56:	2301      	movs	r3, #1
 8003e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e5a:	4093      	lsls	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
 8003e5e:	604a      	str	r2, [r1, #4]
 8003e60:	f001 f945 	bl	80050ee <_Bfree>
 8003e64:	2300      	movs	r3, #0
 8003e66:	6423      	str	r3, [r4, #64]	; 0x40
 8003e68:	1e3b      	subs	r3, r7, #0
 8003e6a:	bfaf      	iteee	ge
 8003e6c:	2300      	movge	r3, #0
 8003e6e:	2201      	movlt	r2, #1
 8003e70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e74:	9303      	strlt	r3, [sp, #12]
 8003e76:	bfa8      	it	ge
 8003e78:	602b      	strge	r3, [r5, #0]
 8003e7a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003e7e:	4bb0      	ldr	r3, [pc, #704]	; (8004140 <_dtoa_r+0x300>)
 8003e80:	bfb8      	it	lt
 8003e82:	602a      	strlt	r2, [r5, #0]
 8003e84:	ea33 0308 	bics.w	r3, r3, r8
 8003e88:	d116      	bne.n	8003eb8 <_dtoa_r+0x78>
 8003e8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	9b02      	ldr	r3, [sp, #8]
 8003e94:	b923      	cbnz	r3, 8003ea0 <_dtoa_r+0x60>
 8003e96:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	f000 853f 	beq.w	800491e <_dtoa_r+0xade>
 8003ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ea2:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8004154 <_dtoa_r+0x314>
 8003ea6:	b11b      	cbz	r3, 8003eb0 <_dtoa_r+0x70>
 8003ea8:	f10b 0303 	add.w	r3, fp, #3
 8003eac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4658      	mov	r0, fp
 8003eb2:	b015      	add	sp, #84	; 0x54
 8003eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	f7fc fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec8:	4682      	mov	sl, r0
 8003eca:	b160      	cbz	r0, 8003ee6 <_dtoa_r+0xa6>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 851e 	beq.w	8004916 <_dtoa_r+0xad6>
 8003eda:	4b9a      	ldr	r3, [pc, #616]	; (8004144 <_dtoa_r+0x304>)
 8003edc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003ede:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e7e4      	b.n	8003eb0 <_dtoa_r+0x70>
 8003ee6:	ab12      	add	r3, sp, #72	; 0x48
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	ab13      	add	r3, sp, #76	; 0x4c
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	4632      	mov	r2, r6
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f001 fb38 	bl	8005568 <__d2b>
 8003ef8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003efc:	9006      	str	r0, [sp, #24]
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	d07d      	beq.n	8003ffe <_dtoa_r+0x1be>
 8003f02:	46b0      	mov	r8, r6
 8003f04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f08:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003f0c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003f10:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f14:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4b8b      	ldr	r3, [pc, #556]	; (8004148 <_dtoa_r+0x308>)
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc f922 	bl	8000168 <__aeabi_dsub>
 8003f24:	a380      	add	r3, pc, #512	; (adr r3, 8004128 <_dtoa_r+0x2e8>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f7fc fad5 	bl	80004d8 <__aeabi_dmul>
 8003f2e:	a380      	add	r3, pc, #512	; (adr r3, 8004130 <_dtoa_r+0x2f0>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f7fc f91a 	bl	800016c <__adddf3>
 8003f38:	4606      	mov	r6, r0
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	460f      	mov	r7, r1
 8003f3e:	f7fc fa61 	bl	8000404 <__aeabi_i2d>
 8003f42:	a37d      	add	r3, pc, #500	; (adr r3, 8004138 <_dtoa_r+0x2f8>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f7fc fac6 	bl	80004d8 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4630      	mov	r0, r6
 8003f52:	4639      	mov	r1, r7
 8003f54:	f7fc f90a 	bl	800016c <__adddf3>
 8003f58:	4606      	mov	r6, r0
 8003f5a:	460f      	mov	r7, r1
 8003f5c:	f7fc fd6c 	bl	8000a38 <__aeabi_d2iz>
 8003f60:	2200      	movs	r2, #0
 8003f62:	4682      	mov	sl, r0
 8003f64:	2300      	movs	r3, #0
 8003f66:	4630      	mov	r0, r6
 8003f68:	4639      	mov	r1, r7
 8003f6a:	f7fc fd27 	bl	80009bc <__aeabi_dcmplt>
 8003f6e:	b148      	cbz	r0, 8003f84 <_dtoa_r+0x144>
 8003f70:	4650      	mov	r0, sl
 8003f72:	f7fc fa47 	bl	8000404 <__aeabi_i2d>
 8003f76:	4632      	mov	r2, r6
 8003f78:	463b      	mov	r3, r7
 8003f7a:	f7fc fd15 	bl	80009a8 <__aeabi_dcmpeq>
 8003f7e:	b908      	cbnz	r0, 8003f84 <_dtoa_r+0x144>
 8003f80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003f84:	f1ba 0f16 	cmp.w	sl, #22
 8003f88:	d85a      	bhi.n	8004040 <_dtoa_r+0x200>
 8003f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f8e:	496f      	ldr	r1, [pc, #444]	; (800414c <_dtoa_r+0x30c>)
 8003f90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f98:	f7fc fd2e 	bl	80009f8 <__aeabi_dcmpgt>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d051      	beq.n	8004044 <_dtoa_r+0x204>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003fa6:	930d      	str	r3, [sp, #52]	; 0x34
 8003fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003faa:	1b5d      	subs	r5, r3, r5
 8003fac:	1e6b      	subs	r3, r5, #1
 8003fae:	9307      	str	r3, [sp, #28]
 8003fb0:	bf43      	ittte	mi
 8003fb2:	2300      	movmi	r3, #0
 8003fb4:	f1c5 0901 	rsbmi	r9, r5, #1
 8003fb8:	9307      	strmi	r3, [sp, #28]
 8003fba:	f04f 0900 	movpl.w	r9, #0
 8003fbe:	f1ba 0f00 	cmp.w	sl, #0
 8003fc2:	db41      	blt.n	8004048 <_dtoa_r+0x208>
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003fca:	4453      	add	r3, sl
 8003fcc:	9307      	str	r3, [sp, #28]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	9308      	str	r3, [sp, #32]
 8003fd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fd4:	2b09      	cmp	r3, #9
 8003fd6:	f200 808c 	bhi.w	80040f2 <_dtoa_r+0x2b2>
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	bfc4      	itt	gt
 8003fde:	3b04      	subgt	r3, #4
 8003fe0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003fe2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fe4:	bfc8      	it	gt
 8003fe6:	2500      	movgt	r5, #0
 8003fe8:	f1a3 0302 	sub.w	r3, r3, #2
 8003fec:	bfd8      	it	le
 8003fee:	2501      	movle	r5, #1
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	f200 808a 	bhi.w	800410a <_dtoa_r+0x2ca>
 8003ff6:	e8df f003 	tbb	[pc, r3]
 8003ffa:	7a78      	.short	0x7a78
 8003ffc:	6c2f      	.short	0x6c2f
 8003ffe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004002:	441d      	add	r5, r3
 8004004:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004008:	2820      	cmp	r0, #32
 800400a:	dd13      	ble.n	8004034 <_dtoa_r+0x1f4>
 800400c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004010:	9b02      	ldr	r3, [sp, #8]
 8004012:	fa08 f800 	lsl.w	r8, r8, r0
 8004016:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800401a:	fa23 f000 	lsr.w	r0, r3, r0
 800401e:	ea48 0000 	orr.w	r0, r8, r0
 8004022:	f7fc f9df 	bl	80003e4 <__aeabi_ui2d>
 8004026:	2301      	movs	r3, #1
 8004028:	4680      	mov	r8, r0
 800402a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800402e:	3d01      	subs	r5, #1
 8004030:	9310      	str	r3, [sp, #64]	; 0x40
 8004032:	e771      	b.n	8003f18 <_dtoa_r+0xd8>
 8004034:	9b02      	ldr	r3, [sp, #8]
 8004036:	f1c0 0020 	rsb	r0, r0, #32
 800403a:	fa03 f000 	lsl.w	r0, r3, r0
 800403e:	e7f0      	b.n	8004022 <_dtoa_r+0x1e2>
 8004040:	2301      	movs	r3, #1
 8004042:	e7b0      	b.n	8003fa6 <_dtoa_r+0x166>
 8004044:	900d      	str	r0, [sp, #52]	; 0x34
 8004046:	e7af      	b.n	8003fa8 <_dtoa_r+0x168>
 8004048:	f1ca 0300 	rsb	r3, sl, #0
 800404c:	9308      	str	r3, [sp, #32]
 800404e:	2300      	movs	r3, #0
 8004050:	eba9 090a 	sub.w	r9, r9, sl
 8004054:	930c      	str	r3, [sp, #48]	; 0x30
 8004056:	e7bc      	b.n	8003fd2 <_dtoa_r+0x192>
 8004058:	2301      	movs	r3, #1
 800405a:	9309      	str	r3, [sp, #36]	; 0x24
 800405c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800405e:	2b00      	cmp	r3, #0
 8004060:	dd56      	ble.n	8004110 <_dtoa_r+0x2d0>
 8004062:	4698      	mov	r8, r3
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	2200      	movs	r2, #0
 8004068:	6462      	str	r2, [r4, #68]	; 0x44
 800406a:	2204      	movs	r2, #4
 800406c:	f102 0014 	add.w	r0, r2, #20
 8004070:	4298      	cmp	r0, r3
 8004072:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004074:	d951      	bls.n	800411a <_dtoa_r+0x2da>
 8004076:	4620      	mov	r0, r4
 8004078:	f001 f814 	bl	80050a4 <_Balloc>
 800407c:	f1b8 0f0e 	cmp.w	r8, #14
 8004080:	4683      	mov	fp, r0
 8004082:	6420      	str	r0, [r4, #64]	; 0x40
 8004084:	f200 80ed 	bhi.w	8004262 <_dtoa_r+0x422>
 8004088:	2d00      	cmp	r5, #0
 800408a:	f000 80ea 	beq.w	8004262 <_dtoa_r+0x422>
 800408e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004092:	f1ba 0f00 	cmp.w	sl, #0
 8004096:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800409a:	dd77      	ble.n	800418c <_dtoa_r+0x34c>
 800409c:	4a2b      	ldr	r2, [pc, #172]	; (800414c <_dtoa_r+0x30c>)
 800409e:	f00a 030f 	and.w	r3, sl, #15
 80040a2:	ea4f 162a 	mov.w	r6, sl, asr #4
 80040a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80040aa:	06f0      	lsls	r0, r6, #27
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80040b4:	d568      	bpl.n	8004188 <_dtoa_r+0x348>
 80040b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80040ba:	4b25      	ldr	r3, [pc, #148]	; (8004150 <_dtoa_r+0x310>)
 80040bc:	2503      	movs	r5, #3
 80040be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80040c2:	f7fc fb33 	bl	800072c <__aeabi_ddiv>
 80040c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040ca:	f006 060f 	and.w	r6, r6, #15
 80040ce:	4f20      	ldr	r7, [pc, #128]	; (8004150 <_dtoa_r+0x310>)
 80040d0:	e04f      	b.n	8004172 <_dtoa_r+0x332>
 80040d2:	2301      	movs	r3, #1
 80040d4:	9309      	str	r3, [sp, #36]	; 0x24
 80040d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040d8:	4453      	add	r3, sl
 80040da:	f103 0801 	add.w	r8, r3, #1
 80040de:	9304      	str	r3, [sp, #16]
 80040e0:	4643      	mov	r3, r8
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	bfb8      	it	lt
 80040e6:	2301      	movlt	r3, #1
 80040e8:	e7bd      	b.n	8004066 <_dtoa_r+0x226>
 80040ea:	2300      	movs	r3, #0
 80040ec:	e7b5      	b.n	800405a <_dtoa_r+0x21a>
 80040ee:	2300      	movs	r3, #0
 80040f0:	e7f0      	b.n	80040d4 <_dtoa_r+0x294>
 80040f2:	2501      	movs	r5, #1
 80040f4:	2300      	movs	r3, #0
 80040f6:	9509      	str	r5, [sp, #36]	; 0x24
 80040f8:	931e      	str	r3, [sp, #120]	; 0x78
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040fe:	2200      	movs	r2, #0
 8004100:	9304      	str	r3, [sp, #16]
 8004102:	4698      	mov	r8, r3
 8004104:	2312      	movs	r3, #18
 8004106:	921f      	str	r2, [sp, #124]	; 0x7c
 8004108:	e7ad      	b.n	8004066 <_dtoa_r+0x226>
 800410a:	2301      	movs	r3, #1
 800410c:	9309      	str	r3, [sp, #36]	; 0x24
 800410e:	e7f4      	b.n	80040fa <_dtoa_r+0x2ba>
 8004110:	2301      	movs	r3, #1
 8004112:	9304      	str	r3, [sp, #16]
 8004114:	4698      	mov	r8, r3
 8004116:	461a      	mov	r2, r3
 8004118:	e7f5      	b.n	8004106 <_dtoa_r+0x2c6>
 800411a:	3101      	adds	r1, #1
 800411c:	6461      	str	r1, [r4, #68]	; 0x44
 800411e:	0052      	lsls	r2, r2, #1
 8004120:	e7a4      	b.n	800406c <_dtoa_r+0x22c>
 8004122:	bf00      	nop
 8004124:	f3af 8000 	nop.w
 8004128:	636f4361 	.word	0x636f4361
 800412c:	3fd287a7 	.word	0x3fd287a7
 8004130:	8b60c8b3 	.word	0x8b60c8b3
 8004134:	3fc68a28 	.word	0x3fc68a28
 8004138:	509f79fb 	.word	0x509f79fb
 800413c:	3fd34413 	.word	0x3fd34413
 8004140:	7ff00000 	.word	0x7ff00000
 8004144:	08005d9f 	.word	0x08005d9f
 8004148:	3ff80000 	.word	0x3ff80000
 800414c:	08005df8 	.word	0x08005df8
 8004150:	08005dd0 	.word	0x08005dd0
 8004154:	08005dc9 	.word	0x08005dc9
 8004158:	07f1      	lsls	r1, r6, #31
 800415a:	d508      	bpl.n	800416e <_dtoa_r+0x32e>
 800415c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004164:	f7fc f9b8 	bl	80004d8 <__aeabi_dmul>
 8004168:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800416c:	3501      	adds	r5, #1
 800416e:	1076      	asrs	r6, r6, #1
 8004170:	3708      	adds	r7, #8
 8004172:	2e00      	cmp	r6, #0
 8004174:	d1f0      	bne.n	8004158 <_dtoa_r+0x318>
 8004176:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800417a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800417e:	f7fc fad5 	bl	800072c <__aeabi_ddiv>
 8004182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004186:	e01b      	b.n	80041c0 <_dtoa_r+0x380>
 8004188:	2502      	movs	r5, #2
 800418a:	e7a0      	b.n	80040ce <_dtoa_r+0x28e>
 800418c:	f000 80a4 	beq.w	80042d8 <_dtoa_r+0x498>
 8004190:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004194:	f1ca 0600 	rsb	r6, sl, #0
 8004198:	4ba0      	ldr	r3, [pc, #640]	; (800441c <_dtoa_r+0x5dc>)
 800419a:	f006 020f 	and.w	r2, r6, #15
 800419e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fc f997 	bl	80004d8 <__aeabi_dmul>
 80041aa:	2502      	movs	r5, #2
 80041ac:	2300      	movs	r3, #0
 80041ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041b2:	4f9b      	ldr	r7, [pc, #620]	; (8004420 <_dtoa_r+0x5e0>)
 80041b4:	1136      	asrs	r6, r6, #4
 80041b6:	2e00      	cmp	r6, #0
 80041b8:	f040 8083 	bne.w	80042c2 <_dtoa_r+0x482>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e0      	bne.n	8004182 <_dtoa_r+0x342>
 80041c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 808a 	beq.w	80042dc <_dtoa_r+0x49c>
 80041c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80041d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041d4:	2200      	movs	r2, #0
 80041d6:	4b93      	ldr	r3, [pc, #588]	; (8004424 <_dtoa_r+0x5e4>)
 80041d8:	f7fc fbf0 	bl	80009bc <__aeabi_dcmplt>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d07d      	beq.n	80042dc <_dtoa_r+0x49c>
 80041e0:	f1b8 0f00 	cmp.w	r8, #0
 80041e4:	d07a      	beq.n	80042dc <_dtoa_r+0x49c>
 80041e6:	9b04      	ldr	r3, [sp, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dd36      	ble.n	800425a <_dtoa_r+0x41a>
 80041ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041f0:	2200      	movs	r2, #0
 80041f2:	4b8d      	ldr	r3, [pc, #564]	; (8004428 <_dtoa_r+0x5e8>)
 80041f4:	f7fc f970 	bl	80004d8 <__aeabi_dmul>
 80041f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041fc:	9e04      	ldr	r6, [sp, #16]
 80041fe:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004202:	3501      	adds	r5, #1
 8004204:	4628      	mov	r0, r5
 8004206:	f7fc f8fd 	bl	8000404 <__aeabi_i2d>
 800420a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800420e:	f7fc f963 	bl	80004d8 <__aeabi_dmul>
 8004212:	2200      	movs	r2, #0
 8004214:	4b85      	ldr	r3, [pc, #532]	; (800442c <_dtoa_r+0x5ec>)
 8004216:	f7fb ffa9 	bl	800016c <__adddf3>
 800421a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800421e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004222:	950b      	str	r5, [sp, #44]	; 0x2c
 8004224:	2e00      	cmp	r6, #0
 8004226:	d15c      	bne.n	80042e2 <_dtoa_r+0x4a2>
 8004228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	4b80      	ldr	r3, [pc, #512]	; (8004430 <_dtoa_r+0x5f0>)
 8004230:	f7fb ff9a 	bl	8000168 <__aeabi_dsub>
 8004234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004236:	462b      	mov	r3, r5
 8004238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800423c:	f7fc fbdc 	bl	80009f8 <__aeabi_dcmpgt>
 8004240:	2800      	cmp	r0, #0
 8004242:	f040 8282 	bne.w	800474a <_dtoa_r+0x90a>
 8004246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800424a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800424c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004250:	f7fc fbb4 	bl	80009bc <__aeabi_dcmplt>
 8004254:	2800      	cmp	r0, #0
 8004256:	f040 8276 	bne.w	8004746 <_dtoa_r+0x906>
 800425a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800425e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004262:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004264:	2b00      	cmp	r3, #0
 8004266:	f2c0 814c 	blt.w	8004502 <_dtoa_r+0x6c2>
 800426a:	f1ba 0f0e 	cmp.w	sl, #14
 800426e:	f300 8148 	bgt.w	8004502 <_dtoa_r+0x6c2>
 8004272:	4b6a      	ldr	r3, [pc, #424]	; (800441c <_dtoa_r+0x5dc>)
 8004274:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004280:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004282:	2b00      	cmp	r3, #0
 8004284:	f280 80d8 	bge.w	8004438 <_dtoa_r+0x5f8>
 8004288:	f1b8 0f00 	cmp.w	r8, #0
 800428c:	f300 80d4 	bgt.w	8004438 <_dtoa_r+0x5f8>
 8004290:	f040 8258 	bne.w	8004744 <_dtoa_r+0x904>
 8004294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004298:	2200      	movs	r2, #0
 800429a:	4b65      	ldr	r3, [pc, #404]	; (8004430 <_dtoa_r+0x5f0>)
 800429c:	f7fc f91c 	bl	80004d8 <__aeabi_dmul>
 80042a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042a4:	f7fc fb9e 	bl	80009e4 <__aeabi_dcmpge>
 80042a8:	4646      	mov	r6, r8
 80042aa:	4647      	mov	r7, r8
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f040 822e 	bne.w	800470e <_dtoa_r+0x8ce>
 80042b2:	2331      	movs	r3, #49	; 0x31
 80042b4:	f10b 0501 	add.w	r5, fp, #1
 80042b8:	f88b 3000 	strb.w	r3, [fp]
 80042bc:	f10a 0a01 	add.w	sl, sl, #1
 80042c0:	e229      	b.n	8004716 <_dtoa_r+0x8d6>
 80042c2:	07f2      	lsls	r2, r6, #31
 80042c4:	d505      	bpl.n	80042d2 <_dtoa_r+0x492>
 80042c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ca:	f7fc f905 	bl	80004d8 <__aeabi_dmul>
 80042ce:	2301      	movs	r3, #1
 80042d0:	3501      	adds	r5, #1
 80042d2:	1076      	asrs	r6, r6, #1
 80042d4:	3708      	adds	r7, #8
 80042d6:	e76e      	b.n	80041b6 <_dtoa_r+0x376>
 80042d8:	2502      	movs	r5, #2
 80042da:	e771      	b.n	80041c0 <_dtoa_r+0x380>
 80042dc:	4657      	mov	r7, sl
 80042de:	4646      	mov	r6, r8
 80042e0:	e790      	b.n	8004204 <_dtoa_r+0x3c4>
 80042e2:	4b4e      	ldr	r3, [pc, #312]	; (800441c <_dtoa_r+0x5dc>)
 80042e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80042e8:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d048      	beq.n	8004384 <_dtoa_r+0x544>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	2000      	movs	r0, #0
 80042f8:	494e      	ldr	r1, [pc, #312]	; (8004434 <_dtoa_r+0x5f4>)
 80042fa:	f7fc fa17 	bl	800072c <__aeabi_ddiv>
 80042fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004302:	f7fb ff31 	bl	8000168 <__aeabi_dsub>
 8004306:	465d      	mov	r5, fp
 8004308:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800430c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004310:	f7fc fb92 	bl	8000a38 <__aeabi_d2iz>
 8004314:	9011      	str	r0, [sp, #68]	; 0x44
 8004316:	f7fc f875 	bl	8000404 <__aeabi_i2d>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004322:	f7fb ff21 	bl	8000168 <__aeabi_dsub>
 8004326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800432c:	3330      	adds	r3, #48	; 0x30
 800432e:	f805 3b01 	strb.w	r3, [r5], #1
 8004332:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004336:	f7fc fb41 	bl	80009bc <__aeabi_dcmplt>
 800433a:	2800      	cmp	r0, #0
 800433c:	d163      	bne.n	8004406 <_dtoa_r+0x5c6>
 800433e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004342:	2000      	movs	r0, #0
 8004344:	4937      	ldr	r1, [pc, #220]	; (8004424 <_dtoa_r+0x5e4>)
 8004346:	f7fb ff0f 	bl	8000168 <__aeabi_dsub>
 800434a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800434e:	f7fc fb35 	bl	80009bc <__aeabi_dcmplt>
 8004352:	2800      	cmp	r0, #0
 8004354:	f040 80b6 	bne.w	80044c4 <_dtoa_r+0x684>
 8004358:	eba5 030b 	sub.w	r3, r5, fp
 800435c:	429e      	cmp	r6, r3
 800435e:	f77f af7c 	ble.w	800425a <_dtoa_r+0x41a>
 8004362:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004366:	2200      	movs	r2, #0
 8004368:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <_dtoa_r+0x5e8>)
 800436a:	f7fc f8b5 	bl	80004d8 <__aeabi_dmul>
 800436e:	2200      	movs	r2, #0
 8004370:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <_dtoa_r+0x5e8>)
 800437a:	f7fc f8ad 	bl	80004d8 <__aeabi_dmul>
 800437e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004382:	e7c3      	b.n	800430c <_dtoa_r+0x4cc>
 8004384:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004388:	f7fc f8a6 	bl	80004d8 <__aeabi_dmul>
 800438c:	eb0b 0506 	add.w	r5, fp, r6
 8004390:	465e      	mov	r6, fp
 8004392:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800439a:	f7fc fb4d 	bl	8000a38 <__aeabi_d2iz>
 800439e:	9011      	str	r0, [sp, #68]	; 0x44
 80043a0:	f7fc f830 	bl	8000404 <__aeabi_i2d>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043ac:	f7fb fedc 	bl	8000168 <__aeabi_dsub>
 80043b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043b6:	3330      	adds	r3, #48	; 0x30
 80043b8:	f806 3b01 	strb.w	r3, [r6], #1
 80043bc:	42ae      	cmp	r6, r5
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	d124      	bne.n	800440e <_dtoa_r+0x5ce>
 80043c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <_dtoa_r+0x5f4>)
 80043ca:	f7fb fecf 	bl	800016c <__adddf3>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043d6:	f7fc fb0f 	bl	80009f8 <__aeabi_dcmpgt>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d172      	bne.n	80044c4 <_dtoa_r+0x684>
 80043de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043e2:	2000      	movs	r0, #0
 80043e4:	4913      	ldr	r1, [pc, #76]	; (8004434 <_dtoa_r+0x5f4>)
 80043e6:	f7fb febf 	bl	8000168 <__aeabi_dsub>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043f2:	f7fc fae3 	bl	80009bc <__aeabi_dcmplt>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	f43f af2f 	beq.w	800425a <_dtoa_r+0x41a>
 80043fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004400:	1e6a      	subs	r2, r5, #1
 8004402:	2b30      	cmp	r3, #48	; 0x30
 8004404:	d001      	beq.n	800440a <_dtoa_r+0x5ca>
 8004406:	46ba      	mov	sl, r7
 8004408:	e04b      	b.n	80044a2 <_dtoa_r+0x662>
 800440a:	4615      	mov	r5, r2
 800440c:	e7f6      	b.n	80043fc <_dtoa_r+0x5bc>
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <_dtoa_r+0x5e8>)
 8004410:	f7fc f862 	bl	80004d8 <__aeabi_dmul>
 8004414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004418:	e7bd      	b.n	8004396 <_dtoa_r+0x556>
 800441a:	bf00      	nop
 800441c:	08005df8 	.word	0x08005df8
 8004420:	08005dd0 	.word	0x08005dd0
 8004424:	3ff00000 	.word	0x3ff00000
 8004428:	40240000 	.word	0x40240000
 800442c:	401c0000 	.word	0x401c0000
 8004430:	40140000 	.word	0x40140000
 8004434:	3fe00000 	.word	0x3fe00000
 8004438:	465d      	mov	r5, fp
 800443a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800443e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004442:	4630      	mov	r0, r6
 8004444:	4639      	mov	r1, r7
 8004446:	f7fc f971 	bl	800072c <__aeabi_ddiv>
 800444a:	f7fc faf5 	bl	8000a38 <__aeabi_d2iz>
 800444e:	4681      	mov	r9, r0
 8004450:	f7fb ffd8 	bl	8000404 <__aeabi_i2d>
 8004454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004458:	f7fc f83e 	bl	80004d8 <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4630      	mov	r0, r6
 8004462:	4639      	mov	r1, r7
 8004464:	f7fb fe80 	bl	8000168 <__aeabi_dsub>
 8004468:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800446c:	f805 6b01 	strb.w	r6, [r5], #1
 8004470:	eba5 060b 	sub.w	r6, r5, fp
 8004474:	45b0      	cmp	r8, r6
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	d135      	bne.n	80044e8 <_dtoa_r+0x6a8>
 800447c:	f7fb fe76 	bl	800016c <__adddf3>
 8004480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004484:	4606      	mov	r6, r0
 8004486:	460f      	mov	r7, r1
 8004488:	f7fc fab6 	bl	80009f8 <__aeabi_dcmpgt>
 800448c:	b9c8      	cbnz	r0, 80044c2 <_dtoa_r+0x682>
 800448e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fc fa87 	bl	80009a8 <__aeabi_dcmpeq>
 800449a:	b110      	cbz	r0, 80044a2 <_dtoa_r+0x662>
 800449c:	f019 0f01 	tst.w	r9, #1
 80044a0:	d10f      	bne.n	80044c2 <_dtoa_r+0x682>
 80044a2:	9906      	ldr	r1, [sp, #24]
 80044a4:	4620      	mov	r0, r4
 80044a6:	f000 fe22 	bl	80050ee <_Bfree>
 80044aa:	2300      	movs	r3, #0
 80044ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044ae:	702b      	strb	r3, [r5, #0]
 80044b0:	f10a 0301 	add.w	r3, sl, #1
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f43f acf9 	beq.w	8003eb0 <_dtoa_r+0x70>
 80044be:	601d      	str	r5, [r3, #0]
 80044c0:	e4f6      	b.n	8003eb0 <_dtoa_r+0x70>
 80044c2:	4657      	mov	r7, sl
 80044c4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80044c8:	1e6b      	subs	r3, r5, #1
 80044ca:	2a39      	cmp	r2, #57	; 0x39
 80044cc:	d106      	bne.n	80044dc <_dtoa_r+0x69c>
 80044ce:	459b      	cmp	fp, r3
 80044d0:	d108      	bne.n	80044e4 <_dtoa_r+0x6a4>
 80044d2:	2330      	movs	r3, #48	; 0x30
 80044d4:	f88b 3000 	strb.w	r3, [fp]
 80044d8:	465b      	mov	r3, fp
 80044da:	3701      	adds	r7, #1
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	3201      	adds	r2, #1
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e790      	b.n	8004406 <_dtoa_r+0x5c6>
 80044e4:	461d      	mov	r5, r3
 80044e6:	e7ed      	b.n	80044c4 <_dtoa_r+0x684>
 80044e8:	2200      	movs	r2, #0
 80044ea:	4b99      	ldr	r3, [pc, #612]	; (8004750 <_dtoa_r+0x910>)
 80044ec:	f7fb fff4 	bl	80004d8 <__aeabi_dmul>
 80044f0:	2200      	movs	r2, #0
 80044f2:	2300      	movs	r3, #0
 80044f4:	4606      	mov	r6, r0
 80044f6:	460f      	mov	r7, r1
 80044f8:	f7fc fa56 	bl	80009a8 <__aeabi_dcmpeq>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d09e      	beq.n	800443e <_dtoa_r+0x5fe>
 8004500:	e7cf      	b.n	80044a2 <_dtoa_r+0x662>
 8004502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004504:	2a00      	cmp	r2, #0
 8004506:	f000 8088 	beq.w	800461a <_dtoa_r+0x7da>
 800450a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800450c:	2a01      	cmp	r2, #1
 800450e:	dc6d      	bgt.n	80045ec <_dtoa_r+0x7ac>
 8004510:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004512:	2a00      	cmp	r2, #0
 8004514:	d066      	beq.n	80045e4 <_dtoa_r+0x7a4>
 8004516:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800451a:	464d      	mov	r5, r9
 800451c:	9e08      	ldr	r6, [sp, #32]
 800451e:	9a07      	ldr	r2, [sp, #28]
 8004520:	2101      	movs	r1, #1
 8004522:	441a      	add	r2, r3
 8004524:	4620      	mov	r0, r4
 8004526:	4499      	add	r9, r3
 8004528:	9207      	str	r2, [sp, #28]
 800452a:	f000 fe72 	bl	8005212 <__i2b>
 800452e:	4607      	mov	r7, r0
 8004530:	2d00      	cmp	r5, #0
 8004532:	dd0b      	ble.n	800454c <_dtoa_r+0x70c>
 8004534:	9b07      	ldr	r3, [sp, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	dd08      	ble.n	800454c <_dtoa_r+0x70c>
 800453a:	42ab      	cmp	r3, r5
 800453c:	bfa8      	it	ge
 800453e:	462b      	movge	r3, r5
 8004540:	9a07      	ldr	r2, [sp, #28]
 8004542:	eba9 0903 	sub.w	r9, r9, r3
 8004546:	1aed      	subs	r5, r5, r3
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	9307      	str	r3, [sp, #28]
 800454c:	9b08      	ldr	r3, [sp, #32]
 800454e:	b1eb      	cbz	r3, 800458c <_dtoa_r+0x74c>
 8004550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d065      	beq.n	8004622 <_dtoa_r+0x7e2>
 8004556:	b18e      	cbz	r6, 800457c <_dtoa_r+0x73c>
 8004558:	4639      	mov	r1, r7
 800455a:	4632      	mov	r2, r6
 800455c:	4620      	mov	r0, r4
 800455e:	f000 fef7 	bl	8005350 <__pow5mult>
 8004562:	9a06      	ldr	r2, [sp, #24]
 8004564:	4601      	mov	r1, r0
 8004566:	4607      	mov	r7, r0
 8004568:	4620      	mov	r0, r4
 800456a:	f000 fe5b 	bl	8005224 <__multiply>
 800456e:	9906      	ldr	r1, [sp, #24]
 8004570:	900a      	str	r0, [sp, #40]	; 0x28
 8004572:	4620      	mov	r0, r4
 8004574:	f000 fdbb 	bl	80050ee <_Bfree>
 8004578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800457a:	9306      	str	r3, [sp, #24]
 800457c:	9b08      	ldr	r3, [sp, #32]
 800457e:	1b9a      	subs	r2, r3, r6
 8004580:	d004      	beq.n	800458c <_dtoa_r+0x74c>
 8004582:	9906      	ldr	r1, [sp, #24]
 8004584:	4620      	mov	r0, r4
 8004586:	f000 fee3 	bl	8005350 <__pow5mult>
 800458a:	9006      	str	r0, [sp, #24]
 800458c:	2101      	movs	r1, #1
 800458e:	4620      	mov	r0, r4
 8004590:	f000 fe3f 	bl	8005212 <__i2b>
 8004594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004596:	4606      	mov	r6, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 81ca 	beq.w	8004932 <_dtoa_r+0xaf2>
 800459e:	461a      	mov	r2, r3
 80045a0:	4601      	mov	r1, r0
 80045a2:	4620      	mov	r0, r4
 80045a4:	f000 fed4 	bl	8005350 <__pow5mult>
 80045a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045aa:	4606      	mov	r6, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	dc3e      	bgt.n	800462e <_dtoa_r+0x7ee>
 80045b0:	9b02      	ldr	r3, [sp, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d137      	bne.n	8004626 <_dtoa_r+0x7e6>
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d134      	bne.n	800462a <_dtoa_r+0x7ea>
 80045c0:	9b03      	ldr	r3, [sp, #12]
 80045c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045c6:	0d1b      	lsrs	r3, r3, #20
 80045c8:	051b      	lsls	r3, r3, #20
 80045ca:	b12b      	cbz	r3, 80045d8 <_dtoa_r+0x798>
 80045cc:	9b07      	ldr	r3, [sp, #28]
 80045ce:	f109 0901 	add.w	r9, r9, #1
 80045d2:	3301      	adds	r3, #1
 80045d4:	9307      	str	r3, [sp, #28]
 80045d6:	2301      	movs	r3, #1
 80045d8:	9308      	str	r3, [sp, #32]
 80045da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d128      	bne.n	8004632 <_dtoa_r+0x7f2>
 80045e0:	2001      	movs	r0, #1
 80045e2:	e02e      	b.n	8004642 <_dtoa_r+0x802>
 80045e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80045ea:	e796      	b.n	800451a <_dtoa_r+0x6da>
 80045ec:	9b08      	ldr	r3, [sp, #32]
 80045ee:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80045f2:	42b3      	cmp	r3, r6
 80045f4:	bfb7      	itett	lt
 80045f6:	9b08      	ldrlt	r3, [sp, #32]
 80045f8:	1b9e      	subge	r6, r3, r6
 80045fa:	1af2      	sublt	r2, r6, r3
 80045fc:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80045fe:	bfbf      	itttt	lt
 8004600:	9608      	strlt	r6, [sp, #32]
 8004602:	189b      	addlt	r3, r3, r2
 8004604:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004606:	2600      	movlt	r6, #0
 8004608:	f1b8 0f00 	cmp.w	r8, #0
 800460c:	bfb9      	ittee	lt
 800460e:	eba9 0508 	sublt.w	r5, r9, r8
 8004612:	2300      	movlt	r3, #0
 8004614:	464d      	movge	r5, r9
 8004616:	4643      	movge	r3, r8
 8004618:	e781      	b.n	800451e <_dtoa_r+0x6de>
 800461a:	9e08      	ldr	r6, [sp, #32]
 800461c:	464d      	mov	r5, r9
 800461e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004620:	e786      	b.n	8004530 <_dtoa_r+0x6f0>
 8004622:	9a08      	ldr	r2, [sp, #32]
 8004624:	e7ad      	b.n	8004582 <_dtoa_r+0x742>
 8004626:	2300      	movs	r3, #0
 8004628:	e7d6      	b.n	80045d8 <_dtoa_r+0x798>
 800462a:	9b02      	ldr	r3, [sp, #8]
 800462c:	e7d4      	b.n	80045d8 <_dtoa_r+0x798>
 800462e:	2300      	movs	r3, #0
 8004630:	9308      	str	r3, [sp, #32]
 8004632:	6933      	ldr	r3, [r6, #16]
 8004634:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004638:	6918      	ldr	r0, [r3, #16]
 800463a:	f000 fd9c 	bl	8005176 <__hi0bits>
 800463e:	f1c0 0020 	rsb	r0, r0, #32
 8004642:	9b07      	ldr	r3, [sp, #28]
 8004644:	4418      	add	r0, r3
 8004646:	f010 001f 	ands.w	r0, r0, #31
 800464a:	d047      	beq.n	80046dc <_dtoa_r+0x89c>
 800464c:	f1c0 0320 	rsb	r3, r0, #32
 8004650:	2b04      	cmp	r3, #4
 8004652:	dd3b      	ble.n	80046cc <_dtoa_r+0x88c>
 8004654:	9b07      	ldr	r3, [sp, #28]
 8004656:	f1c0 001c 	rsb	r0, r0, #28
 800465a:	4481      	add	r9, r0
 800465c:	4405      	add	r5, r0
 800465e:	4403      	add	r3, r0
 8004660:	9307      	str	r3, [sp, #28]
 8004662:	f1b9 0f00 	cmp.w	r9, #0
 8004666:	dd05      	ble.n	8004674 <_dtoa_r+0x834>
 8004668:	464a      	mov	r2, r9
 800466a:	9906      	ldr	r1, [sp, #24]
 800466c:	4620      	mov	r0, r4
 800466e:	f000 feaf 	bl	80053d0 <__lshift>
 8004672:	9006      	str	r0, [sp, #24]
 8004674:	9b07      	ldr	r3, [sp, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	dd05      	ble.n	8004686 <_dtoa_r+0x846>
 800467a:	4631      	mov	r1, r6
 800467c:	461a      	mov	r2, r3
 800467e:	4620      	mov	r0, r4
 8004680:	f000 fea6 	bl	80053d0 <__lshift>
 8004684:	4606      	mov	r6, r0
 8004686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004688:	b353      	cbz	r3, 80046e0 <_dtoa_r+0x8a0>
 800468a:	4631      	mov	r1, r6
 800468c:	9806      	ldr	r0, [sp, #24]
 800468e:	f000 fef3 	bl	8005478 <__mcmp>
 8004692:	2800      	cmp	r0, #0
 8004694:	da24      	bge.n	80046e0 <_dtoa_r+0x8a0>
 8004696:	2300      	movs	r3, #0
 8004698:	220a      	movs	r2, #10
 800469a:	9906      	ldr	r1, [sp, #24]
 800469c:	4620      	mov	r0, r4
 800469e:	f000 fd2f 	bl	8005100 <__multadd>
 80046a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80046a8:	9006      	str	r0, [sp, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8148 	beq.w	8004940 <_dtoa_r+0xb00>
 80046b0:	2300      	movs	r3, #0
 80046b2:	4639      	mov	r1, r7
 80046b4:	220a      	movs	r2, #10
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 fd22 	bl	8005100 <__multadd>
 80046bc:	9b04      	ldr	r3, [sp, #16]
 80046be:	4607      	mov	r7, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	dc4d      	bgt.n	8004760 <_dtoa_r+0x920>
 80046c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	dd4a      	ble.n	8004760 <_dtoa_r+0x920>
 80046ca:	e011      	b.n	80046f0 <_dtoa_r+0x8b0>
 80046cc:	d0c9      	beq.n	8004662 <_dtoa_r+0x822>
 80046ce:	9a07      	ldr	r2, [sp, #28]
 80046d0:	331c      	adds	r3, #28
 80046d2:	441a      	add	r2, r3
 80046d4:	4499      	add	r9, r3
 80046d6:	441d      	add	r5, r3
 80046d8:	4613      	mov	r3, r2
 80046da:	e7c1      	b.n	8004660 <_dtoa_r+0x820>
 80046dc:	4603      	mov	r3, r0
 80046de:	e7f6      	b.n	80046ce <_dtoa_r+0x88e>
 80046e0:	f1b8 0f00 	cmp.w	r8, #0
 80046e4:	dc36      	bgt.n	8004754 <_dtoa_r+0x914>
 80046e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	dd33      	ble.n	8004754 <_dtoa_r+0x914>
 80046ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80046f0:	9b04      	ldr	r3, [sp, #16]
 80046f2:	b963      	cbnz	r3, 800470e <_dtoa_r+0x8ce>
 80046f4:	4631      	mov	r1, r6
 80046f6:	2205      	movs	r2, #5
 80046f8:	4620      	mov	r0, r4
 80046fa:	f000 fd01 	bl	8005100 <__multadd>
 80046fe:	4601      	mov	r1, r0
 8004700:	4606      	mov	r6, r0
 8004702:	9806      	ldr	r0, [sp, #24]
 8004704:	f000 feb8 	bl	8005478 <__mcmp>
 8004708:	2800      	cmp	r0, #0
 800470a:	f73f add2 	bgt.w	80042b2 <_dtoa_r+0x472>
 800470e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004710:	465d      	mov	r5, fp
 8004712:	ea6f 0a03 	mvn.w	sl, r3
 8004716:	f04f 0900 	mov.w	r9, #0
 800471a:	4631      	mov	r1, r6
 800471c:	4620      	mov	r0, r4
 800471e:	f000 fce6 	bl	80050ee <_Bfree>
 8004722:	2f00      	cmp	r7, #0
 8004724:	f43f aebd 	beq.w	80044a2 <_dtoa_r+0x662>
 8004728:	f1b9 0f00 	cmp.w	r9, #0
 800472c:	d005      	beq.n	800473a <_dtoa_r+0x8fa>
 800472e:	45b9      	cmp	r9, r7
 8004730:	d003      	beq.n	800473a <_dtoa_r+0x8fa>
 8004732:	4649      	mov	r1, r9
 8004734:	4620      	mov	r0, r4
 8004736:	f000 fcda 	bl	80050ee <_Bfree>
 800473a:	4639      	mov	r1, r7
 800473c:	4620      	mov	r0, r4
 800473e:	f000 fcd6 	bl	80050ee <_Bfree>
 8004742:	e6ae      	b.n	80044a2 <_dtoa_r+0x662>
 8004744:	2600      	movs	r6, #0
 8004746:	4637      	mov	r7, r6
 8004748:	e7e1      	b.n	800470e <_dtoa_r+0x8ce>
 800474a:	46ba      	mov	sl, r7
 800474c:	4637      	mov	r7, r6
 800474e:	e5b0      	b.n	80042b2 <_dtoa_r+0x472>
 8004750:	40240000 	.word	0x40240000
 8004754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004756:	f8cd 8010 	str.w	r8, [sp, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80f7 	beq.w	800494e <_dtoa_r+0xb0e>
 8004760:	2d00      	cmp	r5, #0
 8004762:	dd05      	ble.n	8004770 <_dtoa_r+0x930>
 8004764:	4639      	mov	r1, r7
 8004766:	462a      	mov	r2, r5
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fe31 	bl	80053d0 <__lshift>
 800476e:	4607      	mov	r7, r0
 8004770:	9b08      	ldr	r3, [sp, #32]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d04c      	beq.n	8004810 <_dtoa_r+0x9d0>
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fc93 	bl	80050a4 <_Balloc>
 800477e:	4605      	mov	r5, r0
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	f107 010c 	add.w	r1, r7, #12
 8004786:	3202      	adds	r2, #2
 8004788:	0092      	lsls	r2, r2, #2
 800478a:	300c      	adds	r0, #12
 800478c:	f000 fc72 	bl	8005074 <memcpy>
 8004790:	2201      	movs	r2, #1
 8004792:	4629      	mov	r1, r5
 8004794:	4620      	mov	r0, r4
 8004796:	f000 fe1b 	bl	80053d0 <__lshift>
 800479a:	46b9      	mov	r9, r7
 800479c:	4607      	mov	r7, r0
 800479e:	9b02      	ldr	r3, [sp, #8]
 80047a0:	f8cd b01c 	str.w	fp, [sp, #28]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	9308      	str	r3, [sp, #32]
 80047aa:	4631      	mov	r1, r6
 80047ac:	9806      	ldr	r0, [sp, #24]
 80047ae:	f7ff fab9 	bl	8003d24 <quorem>
 80047b2:	4649      	mov	r1, r9
 80047b4:	4605      	mov	r5, r0
 80047b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80047ba:	9806      	ldr	r0, [sp, #24]
 80047bc:	f000 fe5c 	bl	8005478 <__mcmp>
 80047c0:	463a      	mov	r2, r7
 80047c2:	9002      	str	r0, [sp, #8]
 80047c4:	4631      	mov	r1, r6
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 fe70 	bl	80054ac <__mdiff>
 80047cc:	68c3      	ldr	r3, [r0, #12]
 80047ce:	4602      	mov	r2, r0
 80047d0:	bb03      	cbnz	r3, 8004814 <_dtoa_r+0x9d4>
 80047d2:	4601      	mov	r1, r0
 80047d4:	9009      	str	r0, [sp, #36]	; 0x24
 80047d6:	9806      	ldr	r0, [sp, #24]
 80047d8:	f000 fe4e 	bl	8005478 <__mcmp>
 80047dc:	4603      	mov	r3, r0
 80047de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e0:	4611      	mov	r1, r2
 80047e2:	4620      	mov	r0, r4
 80047e4:	9309      	str	r3, [sp, #36]	; 0x24
 80047e6:	f000 fc82 	bl	80050ee <_Bfree>
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	b9a3      	cbnz	r3, 8004818 <_dtoa_r+0x9d8>
 80047ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80047f0:	b992      	cbnz	r2, 8004818 <_dtoa_r+0x9d8>
 80047f2:	9a08      	ldr	r2, [sp, #32]
 80047f4:	b982      	cbnz	r2, 8004818 <_dtoa_r+0x9d8>
 80047f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80047fa:	d029      	beq.n	8004850 <_dtoa_r+0xa10>
 80047fc:	9b02      	ldr	r3, [sp, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	dd01      	ble.n	8004806 <_dtoa_r+0x9c6>
 8004802:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004806:	9b07      	ldr	r3, [sp, #28]
 8004808:	1c5d      	adds	r5, r3, #1
 800480a:	f883 8000 	strb.w	r8, [r3]
 800480e:	e784      	b.n	800471a <_dtoa_r+0x8da>
 8004810:	4638      	mov	r0, r7
 8004812:	e7c2      	b.n	800479a <_dtoa_r+0x95a>
 8004814:	2301      	movs	r3, #1
 8004816:	e7e3      	b.n	80047e0 <_dtoa_r+0x9a0>
 8004818:	9a02      	ldr	r2, [sp, #8]
 800481a:	2a00      	cmp	r2, #0
 800481c:	db04      	blt.n	8004828 <_dtoa_r+0x9e8>
 800481e:	d124      	bne.n	800486a <_dtoa_r+0xa2a>
 8004820:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004822:	bb12      	cbnz	r2, 800486a <_dtoa_r+0xa2a>
 8004824:	9a08      	ldr	r2, [sp, #32]
 8004826:	bb02      	cbnz	r2, 800486a <_dtoa_r+0xa2a>
 8004828:	2b00      	cmp	r3, #0
 800482a:	ddec      	ble.n	8004806 <_dtoa_r+0x9c6>
 800482c:	2201      	movs	r2, #1
 800482e:	9906      	ldr	r1, [sp, #24]
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fdcd 	bl	80053d0 <__lshift>
 8004836:	4631      	mov	r1, r6
 8004838:	9006      	str	r0, [sp, #24]
 800483a:	f000 fe1d 	bl	8005478 <__mcmp>
 800483e:	2800      	cmp	r0, #0
 8004840:	dc03      	bgt.n	800484a <_dtoa_r+0xa0a>
 8004842:	d1e0      	bne.n	8004806 <_dtoa_r+0x9c6>
 8004844:	f018 0f01 	tst.w	r8, #1
 8004848:	d0dd      	beq.n	8004806 <_dtoa_r+0x9c6>
 800484a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800484e:	d1d8      	bne.n	8004802 <_dtoa_r+0x9c2>
 8004850:	9b07      	ldr	r3, [sp, #28]
 8004852:	9a07      	ldr	r2, [sp, #28]
 8004854:	1c5d      	adds	r5, r3, #1
 8004856:	2339      	movs	r3, #57	; 0x39
 8004858:	7013      	strb	r3, [r2, #0]
 800485a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800485e:	1e6a      	subs	r2, r5, #1
 8004860:	2b39      	cmp	r3, #57	; 0x39
 8004862:	d04e      	beq.n	8004902 <_dtoa_r+0xac2>
 8004864:	3301      	adds	r3, #1
 8004866:	7013      	strb	r3, [r2, #0]
 8004868:	e757      	b.n	800471a <_dtoa_r+0x8da>
 800486a:	9a07      	ldr	r2, [sp, #28]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f102 0501 	add.w	r5, r2, #1
 8004872:	dd06      	ble.n	8004882 <_dtoa_r+0xa42>
 8004874:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004878:	d0ea      	beq.n	8004850 <_dtoa_r+0xa10>
 800487a:	f108 0801 	add.w	r8, r8, #1
 800487e:	9b07      	ldr	r3, [sp, #28]
 8004880:	e7c3      	b.n	800480a <_dtoa_r+0x9ca>
 8004882:	9a04      	ldr	r2, [sp, #16]
 8004884:	eba5 030b 	sub.w	r3, r5, fp
 8004888:	4293      	cmp	r3, r2
 800488a:	f805 8c01 	strb.w	r8, [r5, #-1]
 800488e:	d021      	beq.n	80048d4 <_dtoa_r+0xa94>
 8004890:	2300      	movs	r3, #0
 8004892:	220a      	movs	r2, #10
 8004894:	9906      	ldr	r1, [sp, #24]
 8004896:	4620      	mov	r0, r4
 8004898:	f000 fc32 	bl	8005100 <__multadd>
 800489c:	45b9      	cmp	r9, r7
 800489e:	9006      	str	r0, [sp, #24]
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	f04f 020a 	mov.w	r2, #10
 80048a8:	4649      	mov	r1, r9
 80048aa:	4620      	mov	r0, r4
 80048ac:	d105      	bne.n	80048ba <_dtoa_r+0xa7a>
 80048ae:	f000 fc27 	bl	8005100 <__multadd>
 80048b2:	4681      	mov	r9, r0
 80048b4:	4607      	mov	r7, r0
 80048b6:	9507      	str	r5, [sp, #28]
 80048b8:	e777      	b.n	80047aa <_dtoa_r+0x96a>
 80048ba:	f000 fc21 	bl	8005100 <__multadd>
 80048be:	4639      	mov	r1, r7
 80048c0:	4681      	mov	r9, r0
 80048c2:	2300      	movs	r3, #0
 80048c4:	220a      	movs	r2, #10
 80048c6:	4620      	mov	r0, r4
 80048c8:	f000 fc1a 	bl	8005100 <__multadd>
 80048cc:	4607      	mov	r7, r0
 80048ce:	e7f2      	b.n	80048b6 <_dtoa_r+0xa76>
 80048d0:	f04f 0900 	mov.w	r9, #0
 80048d4:	2201      	movs	r2, #1
 80048d6:	9906      	ldr	r1, [sp, #24]
 80048d8:	4620      	mov	r0, r4
 80048da:	f000 fd79 	bl	80053d0 <__lshift>
 80048de:	4631      	mov	r1, r6
 80048e0:	9006      	str	r0, [sp, #24]
 80048e2:	f000 fdc9 	bl	8005478 <__mcmp>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	dcb7      	bgt.n	800485a <_dtoa_r+0xa1a>
 80048ea:	d102      	bne.n	80048f2 <_dtoa_r+0xab2>
 80048ec:	f018 0f01 	tst.w	r8, #1
 80048f0:	d1b3      	bne.n	800485a <_dtoa_r+0xa1a>
 80048f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80048f6:	1e6a      	subs	r2, r5, #1
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	f47f af0e 	bne.w	800471a <_dtoa_r+0x8da>
 80048fe:	4615      	mov	r5, r2
 8004900:	e7f7      	b.n	80048f2 <_dtoa_r+0xab2>
 8004902:	4593      	cmp	fp, r2
 8004904:	d105      	bne.n	8004912 <_dtoa_r+0xad2>
 8004906:	2331      	movs	r3, #49	; 0x31
 8004908:	f10a 0a01 	add.w	sl, sl, #1
 800490c:	f88b 3000 	strb.w	r3, [fp]
 8004910:	e703      	b.n	800471a <_dtoa_r+0x8da>
 8004912:	4615      	mov	r5, r2
 8004914:	e7a1      	b.n	800485a <_dtoa_r+0xa1a>
 8004916:	f8df b064 	ldr.w	fp, [pc, #100]	; 800497c <_dtoa_r+0xb3c>
 800491a:	f7ff bac9 	b.w	8003eb0 <_dtoa_r+0x70>
 800491e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004920:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8004980 <_dtoa_r+0xb40>
 8004924:	2b00      	cmp	r3, #0
 8004926:	f43f aac3 	beq.w	8003eb0 <_dtoa_r+0x70>
 800492a:	f10b 0308 	add.w	r3, fp, #8
 800492e:	f7ff babd 	b.w	8003eac <_dtoa_r+0x6c>
 8004932:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004934:	2b01      	cmp	r3, #1
 8004936:	f77f ae3b 	ble.w	80045b0 <_dtoa_r+0x770>
 800493a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800493c:	9308      	str	r3, [sp, #32]
 800493e:	e64f      	b.n	80045e0 <_dtoa_r+0x7a0>
 8004940:	9b04      	ldr	r3, [sp, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	dc03      	bgt.n	800494e <_dtoa_r+0xb0e>
 8004946:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004948:	2b02      	cmp	r3, #2
 800494a:	f73f aed1 	bgt.w	80046f0 <_dtoa_r+0x8b0>
 800494e:	465d      	mov	r5, fp
 8004950:	4631      	mov	r1, r6
 8004952:	9806      	ldr	r0, [sp, #24]
 8004954:	f7ff f9e6 	bl	8003d24 <quorem>
 8004958:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800495c:	f805 8b01 	strb.w	r8, [r5], #1
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	eba5 030b 	sub.w	r3, r5, fp
 8004966:	429a      	cmp	r2, r3
 8004968:	ddb2      	ble.n	80048d0 <_dtoa_r+0xa90>
 800496a:	2300      	movs	r3, #0
 800496c:	220a      	movs	r2, #10
 800496e:	9906      	ldr	r1, [sp, #24]
 8004970:	4620      	mov	r0, r4
 8004972:	f000 fbc5 	bl	8005100 <__multadd>
 8004976:	9006      	str	r0, [sp, #24]
 8004978:	e7ea      	b.n	8004950 <_dtoa_r+0xb10>
 800497a:	bf00      	nop
 800497c:	08005d9e 	.word	0x08005d9e
 8004980:	08005dc0 	.word	0x08005dc0

08004984 <__libc_fini_array>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4d07      	ldr	r5, [pc, #28]	; (80049a4 <__libc_fini_array+0x20>)
 8004988:	4c07      	ldr	r4, [pc, #28]	; (80049a8 <__libc_fini_array+0x24>)
 800498a:	1b64      	subs	r4, r4, r5
 800498c:	10a4      	asrs	r4, r4, #2
 800498e:	b91c      	cbnz	r4, 8004998 <__libc_fini_array+0x14>
 8004990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004994:	f001 b982 	b.w	8005c9c <_fini>
 8004998:	3c01      	subs	r4, #1
 800499a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800499e:	4798      	blx	r3
 80049a0:	e7f5      	b.n	800498e <__libc_fini_array+0xa>
 80049a2:	bf00      	nop
 80049a4:	08005fe8 	.word	0x08005fe8
 80049a8:	08005fec 	.word	0x08005fec

080049ac <_malloc_trim_r>:
 80049ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b0:	4605      	mov	r5, r0
 80049b2:	2008      	movs	r0, #8
 80049b4:	460c      	mov	r4, r1
 80049b6:	f000 fef6 	bl	80057a6 <sysconf>
 80049ba:	4680      	mov	r8, r0
 80049bc:	4f22      	ldr	r7, [pc, #136]	; (8004a48 <_malloc_trim_r+0x9c>)
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 fb64 	bl	800508c <__malloc_lock>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685e      	ldr	r6, [r3, #4]
 80049c8:	f026 0603 	bic.w	r6, r6, #3
 80049cc:	1b34      	subs	r4, r6, r4
 80049ce:	3c11      	subs	r4, #17
 80049d0:	4444      	add	r4, r8
 80049d2:	fbb4 f4f8 	udiv	r4, r4, r8
 80049d6:	3c01      	subs	r4, #1
 80049d8:	fb08 f404 	mul.w	r4, r8, r4
 80049dc:	45a0      	cmp	r8, r4
 80049de:	dd05      	ble.n	80049ec <_malloc_trim_r+0x40>
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 fb59 	bl	8005098 <__malloc_unlock>
 80049e6:	2000      	movs	r0, #0
 80049e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ec:	2100      	movs	r1, #0
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 fe3c 	bl	800566c <_sbrk_r>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4433      	add	r3, r6
 80049f8:	4298      	cmp	r0, r3
 80049fa:	d1f1      	bne.n	80049e0 <_malloc_trim_r+0x34>
 80049fc:	4261      	negs	r1, r4
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 fe34 	bl	800566c <_sbrk_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d110      	bne.n	8004a2a <_malloc_trim_r+0x7e>
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 fe2e 	bl	800566c <_sbrk_r>
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	1a83      	subs	r3, r0, r2
 8004a14:	2b0f      	cmp	r3, #15
 8004a16:	dde3      	ble.n	80049e0 <_malloc_trim_r+0x34>
 8004a18:	490c      	ldr	r1, [pc, #48]	; (8004a4c <_malloc_trim_r+0xa0>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6809      	ldr	r1, [r1, #0]
 8004a20:	6053      	str	r3, [r2, #4]
 8004a22:	1a40      	subs	r0, r0, r1
 8004a24:	490a      	ldr	r1, [pc, #40]	; (8004a50 <_malloc_trim_r+0xa4>)
 8004a26:	6008      	str	r0, [r1, #0]
 8004a28:	e7da      	b.n	80049e0 <_malloc_trim_r+0x34>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <_malloc_trim_r+0xa4>)
 8004a2e:	1b36      	subs	r6, r6, r4
 8004a30:	f046 0601 	orr.w	r6, r6, #1
 8004a34:	605e      	str	r6, [r3, #4]
 8004a36:	6813      	ldr	r3, [r2, #0]
 8004a38:	4628      	mov	r0, r5
 8004a3a:	1b1c      	subs	r4, r3, r4
 8004a3c:	6014      	str	r4, [r2, #0]
 8004a3e:	f000 fb2b 	bl	8005098 <__malloc_unlock>
 8004a42:	2001      	movs	r0, #1
 8004a44:	e7d0      	b.n	80049e8 <_malloc_trim_r+0x3c>
 8004a46:	bf00      	nop
 8004a48:	20000444 	.word	0x20000444
 8004a4c:	2000084c 	.word	0x2000084c
 8004a50:	20000b40 	.word	0x20000b40

08004a54 <_free_r>:
 8004a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4688      	mov	r8, r1
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	f000 80ab 	beq.w	8004bb8 <_free_r+0x164>
 8004a62:	f000 fb13 	bl	800508c <__malloc_lock>
 8004a66:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004a6a:	4d54      	ldr	r5, [pc, #336]	; (8004bbc <_free_r+0x168>)
 8004a6c:	f022 0001 	bic.w	r0, r2, #1
 8004a70:	f1a8 0308 	sub.w	r3, r8, #8
 8004a74:	181f      	adds	r7, r3, r0
 8004a76:	68a9      	ldr	r1, [r5, #8]
 8004a78:	687e      	ldr	r6, [r7, #4]
 8004a7a:	42b9      	cmp	r1, r7
 8004a7c:	f026 0603 	bic.w	r6, r6, #3
 8004a80:	f002 0201 	and.w	r2, r2, #1
 8004a84:	d11b      	bne.n	8004abe <_free_r+0x6a>
 8004a86:	4430      	add	r0, r6
 8004a88:	b93a      	cbnz	r2, 8004a9a <_free_r+0x46>
 8004a8a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	4410      	add	r0, r2
 8004a92:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004a96:	60ca      	str	r2, [r1, #12]
 8004a98:	6091      	str	r1, [r2, #8]
 8004a9a:	f040 0201 	orr.w	r2, r0, #1
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	60ab      	str	r3, [r5, #8]
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <_free_r+0x16c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4283      	cmp	r3, r0
 8004aa8:	d804      	bhi.n	8004ab4 <_free_r+0x60>
 8004aaa:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <_free_r+0x170>)
 8004aac:	4620      	mov	r0, r4
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	f7ff ff7c 	bl	80049ac <_malloc_trim_r>
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	f000 baed 	b.w	8005098 <__malloc_unlock>
 8004abe:	607e      	str	r6, [r7, #4]
 8004ac0:	2a00      	cmp	r2, #0
 8004ac2:	d139      	bne.n	8004b38 <_free_r+0xe4>
 8004ac4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004ac8:	f105 0c08 	add.w	ip, r5, #8
 8004acc:	1a5b      	subs	r3, r3, r1
 8004ace:	4408      	add	r0, r1
 8004ad0:	6899      	ldr	r1, [r3, #8]
 8004ad2:	4561      	cmp	r1, ip
 8004ad4:	d032      	beq.n	8004b3c <_free_r+0xe8>
 8004ad6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004ada:	f8c1 c00c 	str.w	ip, [r1, #12]
 8004ade:	f8cc 1008 	str.w	r1, [ip, #8]
 8004ae2:	19b9      	adds	r1, r7, r6
 8004ae4:	6849      	ldr	r1, [r1, #4]
 8004ae6:	07c9      	lsls	r1, r1, #31
 8004ae8:	d40a      	bmi.n	8004b00 <_free_r+0xac>
 8004aea:	4430      	add	r0, r6
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	bb3a      	cbnz	r2, 8004b40 <_free_r+0xec>
 8004af0:	4e35      	ldr	r6, [pc, #212]	; (8004bc8 <_free_r+0x174>)
 8004af2:	42b1      	cmp	r1, r6
 8004af4:	d124      	bne.n	8004b40 <_free_r+0xec>
 8004af6:	2201      	movs	r2, #1
 8004af8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8004afc:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8004b00:	f040 0101 	orr.w	r1, r0, #1
 8004b04:	6059      	str	r1, [r3, #4]
 8004b06:	5018      	str	r0, [r3, r0]
 8004b08:	2a00      	cmp	r2, #0
 8004b0a:	d1d3      	bne.n	8004ab4 <_free_r+0x60>
 8004b0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b10:	d21a      	bcs.n	8004b48 <_free_r+0xf4>
 8004b12:	2201      	movs	r2, #1
 8004b14:	08c0      	lsrs	r0, r0, #3
 8004b16:	1081      	asrs	r1, r0, #2
 8004b18:	408a      	lsls	r2, r1
 8004b1a:	6869      	ldr	r1, [r5, #4]
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	606a      	str	r2, [r5, #4]
 8004b22:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004b26:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004b2a:	3a08      	subs	r2, #8
 8004b2c:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004b30:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004b34:	60cb      	str	r3, [r1, #12]
 8004b36:	e7bd      	b.n	8004ab4 <_free_r+0x60>
 8004b38:	2200      	movs	r2, #0
 8004b3a:	e7d2      	b.n	8004ae2 <_free_r+0x8e>
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	e7d0      	b.n	8004ae2 <_free_r+0x8e>
 8004b40:	68fe      	ldr	r6, [r7, #12]
 8004b42:	60ce      	str	r6, [r1, #12]
 8004b44:	60b1      	str	r1, [r6, #8]
 8004b46:	e7db      	b.n	8004b00 <_free_r+0xac>
 8004b48:	0a42      	lsrs	r2, r0, #9
 8004b4a:	2a04      	cmp	r2, #4
 8004b4c:	d813      	bhi.n	8004b76 <_free_r+0x122>
 8004b4e:	0982      	lsrs	r2, r0, #6
 8004b50:	3238      	adds	r2, #56	; 0x38
 8004b52:	1c51      	adds	r1, r2, #1
 8004b54:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004b58:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004b5c:	428e      	cmp	r6, r1
 8004b5e:	d124      	bne.n	8004baa <_free_r+0x156>
 8004b60:	2001      	movs	r0, #1
 8004b62:	1092      	asrs	r2, r2, #2
 8004b64:	fa00 f202 	lsl.w	r2, r0, r2
 8004b68:	6868      	ldr	r0, [r5, #4]
 8004b6a:	4302      	orrs	r2, r0
 8004b6c:	606a      	str	r2, [r5, #4]
 8004b6e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8004b72:	60b3      	str	r3, [r6, #8]
 8004b74:	e7de      	b.n	8004b34 <_free_r+0xe0>
 8004b76:	2a14      	cmp	r2, #20
 8004b78:	d801      	bhi.n	8004b7e <_free_r+0x12a>
 8004b7a:	325b      	adds	r2, #91	; 0x5b
 8004b7c:	e7e9      	b.n	8004b52 <_free_r+0xfe>
 8004b7e:	2a54      	cmp	r2, #84	; 0x54
 8004b80:	d802      	bhi.n	8004b88 <_free_r+0x134>
 8004b82:	0b02      	lsrs	r2, r0, #12
 8004b84:	326e      	adds	r2, #110	; 0x6e
 8004b86:	e7e4      	b.n	8004b52 <_free_r+0xfe>
 8004b88:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004b8c:	d802      	bhi.n	8004b94 <_free_r+0x140>
 8004b8e:	0bc2      	lsrs	r2, r0, #15
 8004b90:	3277      	adds	r2, #119	; 0x77
 8004b92:	e7de      	b.n	8004b52 <_free_r+0xfe>
 8004b94:	f240 5154 	movw	r1, #1364	; 0x554
 8004b98:	428a      	cmp	r2, r1
 8004b9a:	bf9a      	itte	ls
 8004b9c:	0c82      	lsrls	r2, r0, #18
 8004b9e:	327c      	addls	r2, #124	; 0x7c
 8004ba0:	227e      	movhi	r2, #126	; 0x7e
 8004ba2:	e7d6      	b.n	8004b52 <_free_r+0xfe>
 8004ba4:	6889      	ldr	r1, [r1, #8]
 8004ba6:	428e      	cmp	r6, r1
 8004ba8:	d004      	beq.n	8004bb4 <_free_r+0x160>
 8004baa:	684a      	ldr	r2, [r1, #4]
 8004bac:	f022 0203 	bic.w	r2, r2, #3
 8004bb0:	4282      	cmp	r2, r0
 8004bb2:	d8f7      	bhi.n	8004ba4 <_free_r+0x150>
 8004bb4:	68ce      	ldr	r6, [r1, #12]
 8004bb6:	e7da      	b.n	8004b6e <_free_r+0x11a>
 8004bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bbc:	20000444 	.word	0x20000444
 8004bc0:	20000850 	.word	0x20000850
 8004bc4:	20000b70 	.word	0x20000b70
 8004bc8:	2000044c 	.word	0x2000044c

08004bcc <_localeconv_r>:
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <_localeconv_r+0x14>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <_localeconv_r+0x18>)
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	bf08      	it	eq
 8004bd8:	4618      	moveq	r0, r3
 8004bda:	30f0      	adds	r0, #240	; 0xf0
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000010 	.word	0x20000010
 8004be4:	20000854 	.word	0x20000854

08004be8 <__retarget_lock_acquire_recursive>:
 8004be8:	4770      	bx	lr

08004bea <__retarget_lock_release_recursive>:
 8004bea:	4770      	bx	lr

08004bec <_malloc_r>:
 8004bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	f101 050b 	add.w	r5, r1, #11
 8004bf4:	2d16      	cmp	r5, #22
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	d906      	bls.n	8004c08 <_malloc_r+0x1c>
 8004bfa:	f035 0507 	bics.w	r5, r5, #7
 8004bfe:	d504      	bpl.n	8004c0a <_malloc_r+0x1e>
 8004c00:	230c      	movs	r3, #12
 8004c02:	6033      	str	r3, [r6, #0]
 8004c04:	2400      	movs	r4, #0
 8004c06:	e1a8      	b.n	8004f5a <_malloc_r+0x36e>
 8004c08:	2510      	movs	r5, #16
 8004c0a:	428d      	cmp	r5, r1
 8004c0c:	d3f8      	bcc.n	8004c00 <_malloc_r+0x14>
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f000 fa3c 	bl	800508c <__malloc_lock>
 8004c14:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004c18:	4fc0      	ldr	r7, [pc, #768]	; (8004f1c <_malloc_r+0x330>)
 8004c1a:	d238      	bcs.n	8004c8e <_malloc_r+0xa2>
 8004c1c:	f105 0208 	add.w	r2, r5, #8
 8004c20:	443a      	add	r2, r7
 8004c22:	6854      	ldr	r4, [r2, #4]
 8004c24:	f1a2 0108 	sub.w	r1, r2, #8
 8004c28:	428c      	cmp	r4, r1
 8004c2a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8004c2e:	d102      	bne.n	8004c36 <_malloc_r+0x4a>
 8004c30:	68d4      	ldr	r4, [r2, #12]
 8004c32:	42a2      	cmp	r2, r4
 8004c34:	d010      	beq.n	8004c58 <_malloc_r+0x6c>
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004c3c:	f023 0303 	bic.w	r3, r3, #3
 8004c40:	60ca      	str	r2, [r1, #12]
 8004c42:	4423      	add	r3, r4
 8004c44:	6091      	str	r1, [r2, #8]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 fa22 	bl	8005098 <__malloc_unlock>
 8004c54:	3408      	adds	r4, #8
 8004c56:	e180      	b.n	8004f5a <_malloc_r+0x36e>
 8004c58:	3302      	adds	r3, #2
 8004c5a:	4ab1      	ldr	r2, [pc, #708]	; (8004f20 <_malloc_r+0x334>)
 8004c5c:	693c      	ldr	r4, [r7, #16]
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4294      	cmp	r4, r2
 8004c62:	d075      	beq.n	8004d50 <_malloc_r+0x164>
 8004c64:	6860      	ldr	r0, [r4, #4]
 8004c66:	f020 0c03 	bic.w	ip, r0, #3
 8004c6a:	ebac 0005 	sub.w	r0, ip, r5
 8004c6e:	280f      	cmp	r0, #15
 8004c70:	dd48      	ble.n	8004d04 <_malloc_r+0x118>
 8004c72:	1963      	adds	r3, r4, r5
 8004c74:	f045 0501 	orr.w	r5, r5, #1
 8004c78:	6065      	str	r5, [r4, #4]
 8004c7a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8004c7e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8004c82:	f040 0201 	orr.w	r2, r0, #1
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	f844 000c 	str.w	r0, [r4, ip]
 8004c8c:	e7df      	b.n	8004c4e <_malloc_r+0x62>
 8004c8e:	0a6b      	lsrs	r3, r5, #9
 8004c90:	d02a      	beq.n	8004ce8 <_malloc_r+0xfc>
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d812      	bhi.n	8004cbc <_malloc_r+0xd0>
 8004c96:	09ab      	lsrs	r3, r5, #6
 8004c98:	3338      	adds	r3, #56	; 0x38
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004ca0:	6854      	ldr	r4, [r2, #4]
 8004ca2:	f1a2 0c08 	sub.w	ip, r2, #8
 8004ca6:	4564      	cmp	r4, ip
 8004ca8:	d006      	beq.n	8004cb8 <_malloc_r+0xcc>
 8004caa:	6862      	ldr	r2, [r4, #4]
 8004cac:	f022 0203 	bic.w	r2, r2, #3
 8004cb0:	1b50      	subs	r0, r2, r5
 8004cb2:	280f      	cmp	r0, #15
 8004cb4:	dd1c      	ble.n	8004cf0 <_malloc_r+0x104>
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	3301      	adds	r3, #1
 8004cba:	e7ce      	b.n	8004c5a <_malloc_r+0x6e>
 8004cbc:	2b14      	cmp	r3, #20
 8004cbe:	d801      	bhi.n	8004cc4 <_malloc_r+0xd8>
 8004cc0:	335b      	adds	r3, #91	; 0x5b
 8004cc2:	e7ea      	b.n	8004c9a <_malloc_r+0xae>
 8004cc4:	2b54      	cmp	r3, #84	; 0x54
 8004cc6:	d802      	bhi.n	8004cce <_malloc_r+0xe2>
 8004cc8:	0b2b      	lsrs	r3, r5, #12
 8004cca:	336e      	adds	r3, #110	; 0x6e
 8004ccc:	e7e5      	b.n	8004c9a <_malloc_r+0xae>
 8004cce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004cd2:	d802      	bhi.n	8004cda <_malloc_r+0xee>
 8004cd4:	0beb      	lsrs	r3, r5, #15
 8004cd6:	3377      	adds	r3, #119	; 0x77
 8004cd8:	e7df      	b.n	8004c9a <_malloc_r+0xae>
 8004cda:	f240 5254 	movw	r2, #1364	; 0x554
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d804      	bhi.n	8004cec <_malloc_r+0x100>
 8004ce2:	0cab      	lsrs	r3, r5, #18
 8004ce4:	337c      	adds	r3, #124	; 0x7c
 8004ce6:	e7d8      	b.n	8004c9a <_malloc_r+0xae>
 8004ce8:	233f      	movs	r3, #63	; 0x3f
 8004cea:	e7d6      	b.n	8004c9a <_malloc_r+0xae>
 8004cec:	237e      	movs	r3, #126	; 0x7e
 8004cee:	e7d4      	b.n	8004c9a <_malloc_r+0xae>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	68e1      	ldr	r1, [r4, #12]
 8004cf4:	db04      	blt.n	8004d00 <_malloc_r+0x114>
 8004cf6:	68a3      	ldr	r3, [r4, #8]
 8004cf8:	60d9      	str	r1, [r3, #12]
 8004cfa:	608b      	str	r3, [r1, #8]
 8004cfc:	18a3      	adds	r3, r4, r2
 8004cfe:	e7a2      	b.n	8004c46 <_malloc_r+0x5a>
 8004d00:	460c      	mov	r4, r1
 8004d02:	e7d0      	b.n	8004ca6 <_malloc_r+0xba>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8004d0a:	db07      	blt.n	8004d1c <_malloc_r+0x130>
 8004d0c:	44a4      	add	ip, r4
 8004d0e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	f8cc 3004 	str.w	r3, [ip, #4]
 8004d1a:	e798      	b.n	8004c4e <_malloc_r+0x62>
 8004d1c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f080 8099 	bcs.w	8004e58 <_malloc_r+0x26c>
 8004d26:	2201      	movs	r2, #1
 8004d28:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004d2c:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8004d30:	fa02 f20e 	lsl.w	r2, r2, lr
 8004d34:	4310      	orrs	r0, r2
 8004d36:	f10c 0c01 	add.w	ip, ip, #1
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8004d40:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8004d44:	3a08      	subs	r2, #8
 8004d46:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8004d4a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8004d4e:	60c4      	str	r4, [r0, #12]
 8004d50:	2001      	movs	r0, #1
 8004d52:	109a      	asrs	r2, r3, #2
 8004d54:	fa00 f202 	lsl.w	r2, r0, r2
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4290      	cmp	r0, r2
 8004d5c:	d326      	bcc.n	8004dac <_malloc_r+0x1c0>
 8004d5e:	4210      	tst	r0, r2
 8004d60:	d106      	bne.n	8004d70 <_malloc_r+0x184>
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	0052      	lsls	r2, r2, #1
 8004d68:	4210      	tst	r0, r2
 8004d6a:	f103 0304 	add.w	r3, r3, #4
 8004d6e:	d0fa      	beq.n	8004d66 <_malloc_r+0x17a>
 8004d70:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8004d74:	46e1      	mov	r9, ip
 8004d76:	4698      	mov	r8, r3
 8004d78:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004d7c:	454c      	cmp	r4, r9
 8004d7e:	f040 80af 	bne.w	8004ee0 <_malloc_r+0x2f4>
 8004d82:	f108 0801 	add.w	r8, r8, #1
 8004d86:	f018 0f03 	tst.w	r8, #3
 8004d8a:	f109 0908 	add.w	r9, r9, #8
 8004d8e:	d1f3      	bne.n	8004d78 <_malloc_r+0x18c>
 8004d90:	0798      	lsls	r0, r3, #30
 8004d92:	f040 80e8 	bne.w	8004f66 <_malloc_r+0x37a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	ea23 0302 	bic.w	r3, r3, r2
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	0052      	lsls	r2, r2, #1
 8004da2:	4290      	cmp	r0, r2
 8004da4:	d302      	bcc.n	8004dac <_malloc_r+0x1c0>
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	f040 80eb 	bne.w	8004f82 <_malloc_r+0x396>
 8004dac:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8004db0:	f8da 4004 	ldr.w	r4, [sl, #4]
 8004db4:	f024 0203 	bic.w	r2, r4, #3
 8004db8:	42aa      	cmp	r2, r5
 8004dba:	d303      	bcc.n	8004dc4 <_malloc_r+0x1d8>
 8004dbc:	1b53      	subs	r3, r2, r5
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	f300 813f 	bgt.w	8005042 <_malloc_r+0x456>
 8004dc4:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <_malloc_r+0x338>)
 8004dc6:	2008      	movs	r0, #8
 8004dc8:	681c      	ldr	r4, [r3, #0]
 8004dca:	9200      	str	r2, [sp, #0]
 8004dcc:	f000 fceb 	bl	80057a6 <sysconf>
 8004dd0:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <_malloc_r+0x33c>)
 8004dd2:	3410      	adds	r4, #16
 8004dd4:	6819      	ldr	r1, [r3, #0]
 8004dd6:	442c      	add	r4, r5
 8004dd8:	3101      	adds	r1, #1
 8004dda:	bf1f      	itttt	ne
 8004ddc:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 8004de0:	1824      	addne	r4, r4, r0
 8004de2:	4241      	negne	r1, r0
 8004de4:	400c      	andne	r4, r1
 8004de6:	9a00      	ldr	r2, [sp, #0]
 8004de8:	4680      	mov	r8, r0
 8004dea:	4621      	mov	r1, r4
 8004dec:	4630      	mov	r0, r6
 8004dee:	e9cd 2300 	strd	r2, r3, [sp]
 8004df2:	f000 fc3b 	bl	800566c <_sbrk_r>
 8004df6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004dfa:	4683      	mov	fp, r0
 8004dfc:	f000 80fa 	beq.w	8004ff4 <_malloc_r+0x408>
 8004e00:	9a00      	ldr	r2, [sp, #0]
 8004e02:	9b01      	ldr	r3, [sp, #4]
 8004e04:	eb0a 0102 	add.w	r1, sl, r2
 8004e08:	4281      	cmp	r1, r0
 8004e0a:	d902      	bls.n	8004e12 <_malloc_r+0x226>
 8004e0c:	45ba      	cmp	sl, r7
 8004e0e:	f040 80f1 	bne.w	8004ff4 <_malloc_r+0x408>
 8004e12:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8004f34 <_malloc_r+0x348>
 8004e16:	4559      	cmp	r1, fp
 8004e18:	f8d9 0000 	ldr.w	r0, [r9]
 8004e1c:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8004e20:	eb00 0e04 	add.w	lr, r0, r4
 8004e24:	f8c9 e000 	str.w	lr, [r9]
 8004e28:	f040 80ad 	bne.w	8004f86 <_malloc_r+0x39a>
 8004e2c:	ea11 0f0c 	tst.w	r1, ip
 8004e30:	f040 80a9 	bne.w	8004f86 <_malloc_r+0x39a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4414      	add	r4, r2
 8004e38:	f044 0401 	orr.w	r4, r4, #1
 8004e3c:	605c      	str	r4, [r3, #4]
 8004e3e:	4a3b      	ldr	r2, [pc, #236]	; (8004f2c <_malloc_r+0x340>)
 8004e40:	f8d9 3000 	ldr.w	r3, [r9]
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	428b      	cmp	r3, r1
 8004e48:	bf88      	it	hi
 8004e4a:	6013      	strhi	r3, [r2, #0]
 8004e4c:	4a38      	ldr	r2, [pc, #224]	; (8004f30 <_malloc_r+0x344>)
 8004e4e:	6811      	ldr	r1, [r2, #0]
 8004e50:	428b      	cmp	r3, r1
 8004e52:	bf88      	it	hi
 8004e54:	6013      	strhi	r3, [r2, #0]
 8004e56:	e0cd      	b.n	8004ff4 <_malloc_r+0x408>
 8004e58:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8004e5c:	2a04      	cmp	r2, #4
 8004e5e:	d818      	bhi.n	8004e92 <_malloc_r+0x2a6>
 8004e60:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8004e64:	3238      	adds	r2, #56	; 0x38
 8004e66:	f102 0e01 	add.w	lr, r2, #1
 8004e6a:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8004e6e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8004e72:	45f0      	cmp	r8, lr
 8004e74:	d12b      	bne.n	8004ece <_malloc_r+0x2e2>
 8004e76:	f04f 0c01 	mov.w	ip, #1
 8004e7a:	1092      	asrs	r2, r2, #2
 8004e7c:	fa0c f202 	lsl.w	r2, ip, r2
 8004e80:	4310      	orrs	r0, r2
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8004e88:	f8c8 4008 	str.w	r4, [r8, #8]
 8004e8c:	f8ce 400c 	str.w	r4, [lr, #12]
 8004e90:	e75e      	b.n	8004d50 <_malloc_r+0x164>
 8004e92:	2a14      	cmp	r2, #20
 8004e94:	d801      	bhi.n	8004e9a <_malloc_r+0x2ae>
 8004e96:	325b      	adds	r2, #91	; 0x5b
 8004e98:	e7e5      	b.n	8004e66 <_malloc_r+0x27a>
 8004e9a:	2a54      	cmp	r2, #84	; 0x54
 8004e9c:	d803      	bhi.n	8004ea6 <_malloc_r+0x2ba>
 8004e9e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8004ea2:	326e      	adds	r2, #110	; 0x6e
 8004ea4:	e7df      	b.n	8004e66 <_malloc_r+0x27a>
 8004ea6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004eaa:	d803      	bhi.n	8004eb4 <_malloc_r+0x2c8>
 8004eac:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8004eb0:	3277      	adds	r2, #119	; 0x77
 8004eb2:	e7d8      	b.n	8004e66 <_malloc_r+0x27a>
 8004eb4:	f240 5e54 	movw	lr, #1364	; 0x554
 8004eb8:	4572      	cmp	r2, lr
 8004eba:	bf9a      	itte	ls
 8004ebc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8004ec0:	327c      	addls	r2, #124	; 0x7c
 8004ec2:	227e      	movhi	r2, #126	; 0x7e
 8004ec4:	e7cf      	b.n	8004e66 <_malloc_r+0x27a>
 8004ec6:	f8de e008 	ldr.w	lr, [lr, #8]
 8004eca:	45f0      	cmp	r8, lr
 8004ecc:	d005      	beq.n	8004eda <_malloc_r+0x2ee>
 8004ece:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004ed2:	f022 0203 	bic.w	r2, r2, #3
 8004ed6:	4562      	cmp	r2, ip
 8004ed8:	d8f5      	bhi.n	8004ec6 <_malloc_r+0x2da>
 8004eda:	f8de 800c 	ldr.w	r8, [lr, #12]
 8004ede:	e7d1      	b.n	8004e84 <_malloc_r+0x298>
 8004ee0:	6860      	ldr	r0, [r4, #4]
 8004ee2:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8004ee6:	f020 0003 	bic.w	r0, r0, #3
 8004eea:	eba0 0a05 	sub.w	sl, r0, r5
 8004eee:	f1ba 0f0f 	cmp.w	sl, #15
 8004ef2:	dd21      	ble.n	8004f38 <_malloc_r+0x34c>
 8004ef4:	68a2      	ldr	r2, [r4, #8]
 8004ef6:	1963      	adds	r3, r4, r5
 8004ef8:	f045 0501 	orr.w	r5, r5, #1
 8004efc:	6065      	str	r5, [r4, #4]
 8004efe:	f8c2 e00c 	str.w	lr, [r2, #12]
 8004f02:	f8ce 2008 	str.w	r2, [lr, #8]
 8004f06:	f04a 0201 	orr.w	r2, sl, #1
 8004f0a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8004f0e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8004f12:	605a      	str	r2, [r3, #4]
 8004f14:	f844 a000 	str.w	sl, [r4, r0]
 8004f18:	e699      	b.n	8004c4e <_malloc_r+0x62>
 8004f1a:	bf00      	nop
 8004f1c:	20000444 	.word	0x20000444
 8004f20:	2000044c 	.word	0x2000044c
 8004f24:	20000b70 	.word	0x20000b70
 8004f28:	2000084c 	.word	0x2000084c
 8004f2c:	20000b68 	.word	0x20000b68
 8004f30:	20000b6c 	.word	0x20000b6c
 8004f34:	20000b40 	.word	0x20000b40
 8004f38:	f1ba 0f00 	cmp.w	sl, #0
 8004f3c:	db11      	blt.n	8004f62 <_malloc_r+0x376>
 8004f3e:	4420      	add	r0, r4
 8004f40:	6843      	ldr	r3, [r0, #4]
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6043      	str	r3, [r0, #4]
 8004f48:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004f52:	f8ce 3008 	str.w	r3, [lr, #8]
 8004f56:	f000 f89f 	bl	8005098 <__malloc_unlock>
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	b003      	add	sp, #12
 8004f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f62:	4674      	mov	r4, lr
 8004f64:	e70a      	b.n	8004d7c <_malloc_r+0x190>
 8004f66:	f1ac 0008 	sub.w	r0, ip, #8
 8004f6a:	f8dc c000 	ldr.w	ip, [ip]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4584      	cmp	ip, r0
 8004f72:	f43f af0d 	beq.w	8004d90 <_malloc_r+0x1a4>
 8004f76:	e712      	b.n	8004d9e <_malloc_r+0x1b2>
 8004f78:	3304      	adds	r3, #4
 8004f7a:	0052      	lsls	r2, r2, #1
 8004f7c:	4210      	tst	r0, r2
 8004f7e:	d0fb      	beq.n	8004f78 <_malloc_r+0x38c>
 8004f80:	e6f6      	b.n	8004d70 <_malloc_r+0x184>
 8004f82:	4643      	mov	r3, r8
 8004f84:	e7fa      	b.n	8004f7c <_malloc_r+0x390>
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	9200      	str	r2, [sp, #0]
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	bf1b      	ittet	ne
 8004f8e:	ebab 0101 	subne.w	r1, fp, r1
 8004f92:	4471      	addne	r1, lr
 8004f94:	f8c3 b000 	streq.w	fp, [r3]
 8004f98:	f8c9 1000 	strne.w	r1, [r9]
 8004f9c:	f01b 0307 	ands.w	r3, fp, #7
 8004fa0:	bf1c      	itt	ne
 8004fa2:	f1c3 0308 	rsbne	r3, r3, #8
 8004fa6:	449b      	addne	fp, r3
 8004fa8:	445c      	add	r4, fp
 8004faa:	4498      	add	r8, r3
 8004fac:	ea04 030c 	and.w	r3, r4, ip
 8004fb0:	eba8 0803 	sub.w	r8, r8, r3
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 fb58 	bl	800566c <_sbrk_r>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	bf04      	itt	eq
 8004fc0:	4658      	moveq	r0, fp
 8004fc2:	f04f 0800 	moveq.w	r8, #0
 8004fc6:	f8d9 3000 	ldr.w	r3, [r9]
 8004fca:	eba0 000b 	sub.w	r0, r0, fp
 8004fce:	4440      	add	r0, r8
 8004fd0:	4443      	add	r3, r8
 8004fd2:	f040 0001 	orr.w	r0, r0, #1
 8004fd6:	45ba      	cmp	sl, r7
 8004fd8:	f8c7 b008 	str.w	fp, [r7, #8]
 8004fdc:	9a00      	ldr	r2, [sp, #0]
 8004fde:	f8c9 3000 	str.w	r3, [r9]
 8004fe2:	f8cb 0004 	str.w	r0, [fp, #4]
 8004fe6:	f43f af2a 	beq.w	8004e3e <_malloc_r+0x252>
 8004fea:	2a0f      	cmp	r2, #15
 8004fec:	d810      	bhi.n	8005010 <_malloc_r+0x424>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f8cb 3004 	str.w	r3, [fp, #4]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	f022 0203 	bic.w	r2, r2, #3
 8004ffc:	42aa      	cmp	r2, r5
 8004ffe:	eba2 0305 	sub.w	r3, r2, r5
 8005002:	d301      	bcc.n	8005008 <_malloc_r+0x41c>
 8005004:	2b0f      	cmp	r3, #15
 8005006:	dc1c      	bgt.n	8005042 <_malloc_r+0x456>
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f845 	bl	8005098 <__malloc_unlock>
 800500e:	e5f9      	b.n	8004c04 <_malloc_r+0x18>
 8005010:	f1a2 040c 	sub.w	r4, r2, #12
 8005014:	2205      	movs	r2, #5
 8005016:	f8da 3004 	ldr.w	r3, [sl, #4]
 800501a:	f024 0407 	bic.w	r4, r4, #7
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	4323      	orrs	r3, r4
 8005024:	f8ca 3004 	str.w	r3, [sl, #4]
 8005028:	2c0f      	cmp	r4, #15
 800502a:	eb0a 0304 	add.w	r3, sl, r4
 800502e:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8005032:	f67f af04 	bls.w	8004e3e <_malloc_r+0x252>
 8005036:	f10a 0108 	add.w	r1, sl, #8
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff fd0a 	bl	8004a54 <_free_r>
 8005040:	e6fd      	b.n	8004e3e <_malloc_r+0x252>
 8005042:	68bc      	ldr	r4, [r7, #8]
 8005044:	f045 0201 	orr.w	r2, r5, #1
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	4425      	add	r5, r4
 800504e:	6062      	str	r2, [r4, #4]
 8005050:	60bd      	str	r5, [r7, #8]
 8005052:	606b      	str	r3, [r5, #4]
 8005054:	e5fb      	b.n	8004c4e <_malloc_r+0x62>
 8005056:	bf00      	nop

08005058 <memchr>:
 8005058:	b510      	push	{r4, lr}
 800505a:	b2c9      	uxtb	r1, r1
 800505c:	4402      	add	r2, r0
 800505e:	4290      	cmp	r0, r2
 8005060:	4603      	mov	r3, r0
 8005062:	d101      	bne.n	8005068 <memchr+0x10>
 8005064:	2300      	movs	r3, #0
 8005066:	e003      	b.n	8005070 <memchr+0x18>
 8005068:	781c      	ldrb	r4, [r3, #0]
 800506a:	3001      	adds	r0, #1
 800506c:	428c      	cmp	r4, r1
 800506e:	d1f6      	bne.n	800505e <memchr+0x6>
 8005070:	4618      	mov	r0, r3
 8005072:	bd10      	pop	{r4, pc}

08005074 <memcpy>:
 8005074:	b510      	push	{r4, lr}
 8005076:	1e43      	subs	r3, r0, #1
 8005078:	440a      	add	r2, r1
 800507a:	4291      	cmp	r1, r2
 800507c:	d100      	bne.n	8005080 <memcpy+0xc>
 800507e:	bd10      	pop	{r4, pc}
 8005080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005088:	e7f7      	b.n	800507a <memcpy+0x6>
	...

0800508c <__malloc_lock>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__malloc_lock+0x8>)
 800508e:	f7ff bdab 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	20000c44 	.word	0x20000c44

08005098 <__malloc_unlock>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__malloc_unlock+0x8>)
 800509a:	f7ff bda6 	b.w	8004bea <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	20000c44 	.word	0x20000c44

080050a4 <_Balloc>:
 80050a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80050a6:	b570      	push	{r4, r5, r6, lr}
 80050a8:	4605      	mov	r5, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	b17b      	cbz	r3, 80050ce <_Balloc+0x2a>
 80050ae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80050b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80050b4:	b9a0      	cbnz	r0, 80050e0 <_Balloc+0x3c>
 80050b6:	2101      	movs	r1, #1
 80050b8:	fa01 f604 	lsl.w	r6, r1, r4
 80050bc:	1d72      	adds	r2, r6, #5
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 fbd3 	bl	800586c <_calloc_r>
 80050c6:	b148      	cbz	r0, 80050dc <_Balloc+0x38>
 80050c8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80050cc:	e00b      	b.n	80050e6 <_Balloc+0x42>
 80050ce:	2221      	movs	r2, #33	; 0x21
 80050d0:	2104      	movs	r1, #4
 80050d2:	f000 fbcb 	bl	800586c <_calloc_r>
 80050d6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80050d8:	2800      	cmp	r0, #0
 80050da:	d1e8      	bne.n	80050ae <_Balloc+0xa>
 80050dc:	2000      	movs	r0, #0
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	6802      	ldr	r2, [r0, #0]
 80050e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80050e6:	2300      	movs	r3, #0
 80050e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050ec:	e7f7      	b.n	80050de <_Balloc+0x3a>

080050ee <_Bfree>:
 80050ee:	b131      	cbz	r1, 80050fe <_Bfree+0x10>
 80050f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80050f2:	684a      	ldr	r2, [r1, #4]
 80050f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80050f8:	6008      	str	r0, [r1, #0]
 80050fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80050fe:	4770      	bx	lr

08005100 <__multadd>:
 8005100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005104:	461f      	mov	r7, r3
 8005106:	4606      	mov	r6, r0
 8005108:	460c      	mov	r4, r1
 800510a:	2300      	movs	r3, #0
 800510c:	690d      	ldr	r5, [r1, #16]
 800510e:	f101 0c14 	add.w	ip, r1, #20
 8005112:	f8dc 0000 	ldr.w	r0, [ip]
 8005116:	3301      	adds	r3, #1
 8005118:	b281      	uxth	r1, r0
 800511a:	fb02 7101 	mla	r1, r2, r1, r7
 800511e:	0c00      	lsrs	r0, r0, #16
 8005120:	0c0f      	lsrs	r7, r1, #16
 8005122:	fb02 7000 	mla	r0, r2, r0, r7
 8005126:	b289      	uxth	r1, r1
 8005128:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800512c:	429d      	cmp	r5, r3
 800512e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005132:	f84c 1b04 	str.w	r1, [ip], #4
 8005136:	dcec      	bgt.n	8005112 <__multadd+0x12>
 8005138:	b1d7      	cbz	r7, 8005170 <__multadd+0x70>
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	42ab      	cmp	r3, r5
 800513e:	dc12      	bgt.n	8005166 <__multadd+0x66>
 8005140:	6861      	ldr	r1, [r4, #4]
 8005142:	4630      	mov	r0, r6
 8005144:	3101      	adds	r1, #1
 8005146:	f7ff ffad 	bl	80050a4 <_Balloc>
 800514a:	4680      	mov	r8, r0
 800514c:	6922      	ldr	r2, [r4, #16]
 800514e:	f104 010c 	add.w	r1, r4, #12
 8005152:	3202      	adds	r2, #2
 8005154:	0092      	lsls	r2, r2, #2
 8005156:	300c      	adds	r0, #12
 8005158:	f7ff ff8c 	bl	8005074 <memcpy>
 800515c:	4621      	mov	r1, r4
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff ffc5 	bl	80050ee <_Bfree>
 8005164:	4644      	mov	r4, r8
 8005166:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800516a:	3501      	adds	r5, #1
 800516c:	615f      	str	r7, [r3, #20]
 800516e:	6125      	str	r5, [r4, #16]
 8005170:	4620      	mov	r0, r4
 8005172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005176 <__hi0bits>:
 8005176:	0c02      	lsrs	r2, r0, #16
 8005178:	0412      	lsls	r2, r2, #16
 800517a:	4603      	mov	r3, r0
 800517c:	b9b2      	cbnz	r2, 80051ac <__hi0bits+0x36>
 800517e:	0403      	lsls	r3, r0, #16
 8005180:	2010      	movs	r0, #16
 8005182:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005186:	bf04      	itt	eq
 8005188:	021b      	lsleq	r3, r3, #8
 800518a:	3008      	addeq	r0, #8
 800518c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005190:	bf04      	itt	eq
 8005192:	011b      	lsleq	r3, r3, #4
 8005194:	3004      	addeq	r0, #4
 8005196:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800519a:	bf04      	itt	eq
 800519c:	009b      	lsleq	r3, r3, #2
 800519e:	3002      	addeq	r0, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db06      	blt.n	80051b2 <__hi0bits+0x3c>
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	d503      	bpl.n	80051b0 <__hi0bits+0x3a>
 80051a8:	3001      	adds	r0, #1
 80051aa:	4770      	bx	lr
 80051ac:	2000      	movs	r0, #0
 80051ae:	e7e8      	b.n	8005182 <__hi0bits+0xc>
 80051b0:	2020      	movs	r0, #32
 80051b2:	4770      	bx	lr

080051b4 <__lo0bits>:
 80051b4:	6803      	ldr	r3, [r0, #0]
 80051b6:	4601      	mov	r1, r0
 80051b8:	f013 0207 	ands.w	r2, r3, #7
 80051bc:	d00b      	beq.n	80051d6 <__lo0bits+0x22>
 80051be:	07da      	lsls	r2, r3, #31
 80051c0:	d423      	bmi.n	800520a <__lo0bits+0x56>
 80051c2:	0798      	lsls	r0, r3, #30
 80051c4:	bf49      	itett	mi
 80051c6:	085b      	lsrmi	r3, r3, #1
 80051c8:	089b      	lsrpl	r3, r3, #2
 80051ca:	2001      	movmi	r0, #1
 80051cc:	600b      	strmi	r3, [r1, #0]
 80051ce:	bf5c      	itt	pl
 80051d0:	600b      	strpl	r3, [r1, #0]
 80051d2:	2002      	movpl	r0, #2
 80051d4:	4770      	bx	lr
 80051d6:	b298      	uxth	r0, r3
 80051d8:	b9a8      	cbnz	r0, 8005206 <__lo0bits+0x52>
 80051da:	2010      	movs	r0, #16
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80051e2:	bf04      	itt	eq
 80051e4:	0a1b      	lsreq	r3, r3, #8
 80051e6:	3008      	addeq	r0, #8
 80051e8:	071a      	lsls	r2, r3, #28
 80051ea:	bf04      	itt	eq
 80051ec:	091b      	lsreq	r3, r3, #4
 80051ee:	3004      	addeq	r0, #4
 80051f0:	079a      	lsls	r2, r3, #30
 80051f2:	bf04      	itt	eq
 80051f4:	089b      	lsreq	r3, r3, #2
 80051f6:	3002      	addeq	r0, #2
 80051f8:	07da      	lsls	r2, r3, #31
 80051fa:	d402      	bmi.n	8005202 <__lo0bits+0x4e>
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	d006      	beq.n	800520e <__lo0bits+0x5a>
 8005200:	3001      	adds	r0, #1
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	4770      	bx	lr
 8005206:	4610      	mov	r0, r2
 8005208:	e7e9      	b.n	80051de <__lo0bits+0x2a>
 800520a:	2000      	movs	r0, #0
 800520c:	4770      	bx	lr
 800520e:	2020      	movs	r0, #32
 8005210:	4770      	bx	lr

08005212 <__i2b>:
 8005212:	b510      	push	{r4, lr}
 8005214:	460c      	mov	r4, r1
 8005216:	2101      	movs	r1, #1
 8005218:	f7ff ff44 	bl	80050a4 <_Balloc>
 800521c:	2201      	movs	r2, #1
 800521e:	6144      	str	r4, [r0, #20]
 8005220:	6102      	str	r2, [r0, #16]
 8005222:	bd10      	pop	{r4, pc}

08005224 <__multiply>:
 8005224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	4614      	mov	r4, r2
 800522a:	690a      	ldr	r2, [r1, #16]
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	4688      	mov	r8, r1
 8005230:	429a      	cmp	r2, r3
 8005232:	bfbe      	ittt	lt
 8005234:	460b      	movlt	r3, r1
 8005236:	46a0      	movlt	r8, r4
 8005238:	461c      	movlt	r4, r3
 800523a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800523e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005246:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800524a:	eb07 0609 	add.w	r6, r7, r9
 800524e:	42b3      	cmp	r3, r6
 8005250:	bfb8      	it	lt
 8005252:	3101      	addlt	r1, #1
 8005254:	f7ff ff26 	bl	80050a4 <_Balloc>
 8005258:	f100 0514 	add.w	r5, r0, #20
 800525c:	462b      	mov	r3, r5
 800525e:	2200      	movs	r2, #0
 8005260:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005264:	4573      	cmp	r3, lr
 8005266:	d316      	bcc.n	8005296 <__multiply+0x72>
 8005268:	f104 0214 	add.w	r2, r4, #20
 800526c:	f108 0114 	add.w	r1, r8, #20
 8005270:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005274:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	9b00      	ldr	r3, [sp, #0]
 800527c:	9201      	str	r2, [sp, #4]
 800527e:	4293      	cmp	r3, r2
 8005280:	d80c      	bhi.n	800529c <__multiply+0x78>
 8005282:	2e00      	cmp	r6, #0
 8005284:	dd03      	ble.n	800528e <__multiply+0x6a>
 8005286:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800528a:	2b00      	cmp	r3, #0
 800528c:	d05d      	beq.n	800534a <__multiply+0x126>
 800528e:	6106      	str	r6, [r0, #16]
 8005290:	b003      	add	sp, #12
 8005292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005296:	f843 2b04 	str.w	r2, [r3], #4
 800529a:	e7e3      	b.n	8005264 <__multiply+0x40>
 800529c:	f8b2 b000 	ldrh.w	fp, [r2]
 80052a0:	f1bb 0f00 	cmp.w	fp, #0
 80052a4:	d023      	beq.n	80052ee <__multiply+0xca>
 80052a6:	4689      	mov	r9, r1
 80052a8:	46ac      	mov	ip, r5
 80052aa:	f04f 0800 	mov.w	r8, #0
 80052ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80052b2:	f8dc a000 	ldr.w	sl, [ip]
 80052b6:	b2a3      	uxth	r3, r4
 80052b8:	fa1f fa8a 	uxth.w	sl, sl
 80052bc:	fb0b a303 	mla	r3, fp, r3, sl
 80052c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052c4:	f8dc 4000 	ldr.w	r4, [ip]
 80052c8:	4443      	add	r3, r8
 80052ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80052ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80052d2:	46e2      	mov	sl, ip
 80052d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80052d8:	b29b      	uxth	r3, r3
 80052da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80052de:	454f      	cmp	r7, r9
 80052e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80052e4:	f84a 3b04 	str.w	r3, [sl], #4
 80052e8:	d82b      	bhi.n	8005342 <__multiply+0x11e>
 80052ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80052ee:	9b01      	ldr	r3, [sp, #4]
 80052f0:	3204      	adds	r2, #4
 80052f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80052f6:	f1ba 0f00 	cmp.w	sl, #0
 80052fa:	d020      	beq.n	800533e <__multiply+0x11a>
 80052fc:	4689      	mov	r9, r1
 80052fe:	46a8      	mov	r8, r5
 8005300:	f04f 0b00 	mov.w	fp, #0
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	f8b9 c000 	ldrh.w	ip, [r9]
 800530a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800530e:	b29b      	uxth	r3, r3
 8005310:	fb0a 440c 	mla	r4, sl, ip, r4
 8005314:	46c4      	mov	ip, r8
 8005316:	445c      	add	r4, fp
 8005318:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800531c:	f84c 3b04 	str.w	r3, [ip], #4
 8005320:	f859 3b04 	ldr.w	r3, [r9], #4
 8005324:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	fb0a b303 	mla	r3, sl, r3, fp
 800532e:	454f      	cmp	r7, r9
 8005330:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005334:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005338:	d805      	bhi.n	8005346 <__multiply+0x122>
 800533a:	f8c8 3004 	str.w	r3, [r8, #4]
 800533e:	3504      	adds	r5, #4
 8005340:	e79b      	b.n	800527a <__multiply+0x56>
 8005342:	46d4      	mov	ip, sl
 8005344:	e7b3      	b.n	80052ae <__multiply+0x8a>
 8005346:	46e0      	mov	r8, ip
 8005348:	e7dd      	b.n	8005306 <__multiply+0xe2>
 800534a:	3e01      	subs	r6, #1
 800534c:	e799      	b.n	8005282 <__multiply+0x5e>
	...

08005350 <__pow5mult>:
 8005350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005354:	4615      	mov	r5, r2
 8005356:	f012 0203 	ands.w	r2, r2, #3
 800535a:	4606      	mov	r6, r0
 800535c:	460f      	mov	r7, r1
 800535e:	d007      	beq.n	8005370 <__pow5mult+0x20>
 8005360:	4c1a      	ldr	r4, [pc, #104]	; (80053cc <__pow5mult+0x7c>)
 8005362:	3a01      	subs	r2, #1
 8005364:	2300      	movs	r3, #0
 8005366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800536a:	f7ff fec9 	bl	8005100 <__multadd>
 800536e:	4607      	mov	r7, r0
 8005370:	10ad      	asrs	r5, r5, #2
 8005372:	d027      	beq.n	80053c4 <__pow5mult+0x74>
 8005374:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8005376:	b944      	cbnz	r4, 800538a <__pow5mult+0x3a>
 8005378:	f240 2171 	movw	r1, #625	; 0x271
 800537c:	4630      	mov	r0, r6
 800537e:	f7ff ff48 	bl	8005212 <__i2b>
 8005382:	2300      	movs	r3, #0
 8005384:	4604      	mov	r4, r0
 8005386:	64b0      	str	r0, [r6, #72]	; 0x48
 8005388:	6003      	str	r3, [r0, #0]
 800538a:	f04f 0800 	mov.w	r8, #0
 800538e:	07eb      	lsls	r3, r5, #31
 8005390:	d50a      	bpl.n	80053a8 <__pow5mult+0x58>
 8005392:	4639      	mov	r1, r7
 8005394:	4622      	mov	r2, r4
 8005396:	4630      	mov	r0, r6
 8005398:	f7ff ff44 	bl	8005224 <__multiply>
 800539c:	4681      	mov	r9, r0
 800539e:	4639      	mov	r1, r7
 80053a0:	4630      	mov	r0, r6
 80053a2:	f7ff fea4 	bl	80050ee <_Bfree>
 80053a6:	464f      	mov	r7, r9
 80053a8:	106d      	asrs	r5, r5, #1
 80053aa:	d00b      	beq.n	80053c4 <__pow5mult+0x74>
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	b938      	cbnz	r0, 80053c0 <__pow5mult+0x70>
 80053b0:	4622      	mov	r2, r4
 80053b2:	4621      	mov	r1, r4
 80053b4:	4630      	mov	r0, r6
 80053b6:	f7ff ff35 	bl	8005224 <__multiply>
 80053ba:	6020      	str	r0, [r4, #0]
 80053bc:	f8c0 8000 	str.w	r8, [r0]
 80053c0:	4604      	mov	r4, r0
 80053c2:	e7e4      	b.n	800538e <__pow5mult+0x3e>
 80053c4:	4638      	mov	r0, r7
 80053c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ca:	bf00      	nop
 80053cc:	08005ec0 	.word	0x08005ec0

080053d0 <__lshift>:
 80053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	460c      	mov	r4, r1
 80053d6:	4607      	mov	r7, r0
 80053d8:	4616      	mov	r6, r2
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053e0:	eb0a 0903 	add.w	r9, sl, r3
 80053e4:	6849      	ldr	r1, [r1, #4]
 80053e6:	68a3      	ldr	r3, [r4, #8]
 80053e8:	f109 0501 	add.w	r5, r9, #1
 80053ec:	42ab      	cmp	r3, r5
 80053ee:	db32      	blt.n	8005456 <__lshift+0x86>
 80053f0:	4638      	mov	r0, r7
 80053f2:	f7ff fe57 	bl	80050a4 <_Balloc>
 80053f6:	2300      	movs	r3, #0
 80053f8:	4680      	mov	r8, r0
 80053fa:	461a      	mov	r2, r3
 80053fc:	f100 0114 	add.w	r1, r0, #20
 8005400:	4553      	cmp	r3, sl
 8005402:	db2b      	blt.n	800545c <__lshift+0x8c>
 8005404:	6920      	ldr	r0, [r4, #16]
 8005406:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800540a:	f104 0314 	add.w	r3, r4, #20
 800540e:	f016 021f 	ands.w	r2, r6, #31
 8005412:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005416:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800541a:	d025      	beq.n	8005468 <__lshift+0x98>
 800541c:	2000      	movs	r0, #0
 800541e:	f1c2 0e20 	rsb	lr, r2, #32
 8005422:	468a      	mov	sl, r1
 8005424:	681e      	ldr	r6, [r3, #0]
 8005426:	4096      	lsls	r6, r2
 8005428:	4330      	orrs	r0, r6
 800542a:	f84a 0b04 	str.w	r0, [sl], #4
 800542e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005432:	459c      	cmp	ip, r3
 8005434:	fa20 f00e 	lsr.w	r0, r0, lr
 8005438:	d814      	bhi.n	8005464 <__lshift+0x94>
 800543a:	6048      	str	r0, [r1, #4]
 800543c:	b108      	cbz	r0, 8005442 <__lshift+0x72>
 800543e:	f109 0502 	add.w	r5, r9, #2
 8005442:	3d01      	subs	r5, #1
 8005444:	4638      	mov	r0, r7
 8005446:	f8c8 5010 	str.w	r5, [r8, #16]
 800544a:	4621      	mov	r1, r4
 800544c:	f7ff fe4f 	bl	80050ee <_Bfree>
 8005450:	4640      	mov	r0, r8
 8005452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005456:	3101      	adds	r1, #1
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	e7c7      	b.n	80053ec <__lshift+0x1c>
 800545c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005460:	3301      	adds	r3, #1
 8005462:	e7cd      	b.n	8005400 <__lshift+0x30>
 8005464:	4651      	mov	r1, sl
 8005466:	e7dc      	b.n	8005422 <__lshift+0x52>
 8005468:	3904      	subs	r1, #4
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	459c      	cmp	ip, r3
 8005470:	f841 2f04 	str.w	r2, [r1, #4]!
 8005474:	d8f9      	bhi.n	800546a <__lshift+0x9a>
 8005476:	e7e4      	b.n	8005442 <__lshift+0x72>

08005478 <__mcmp>:
 8005478:	6903      	ldr	r3, [r0, #16]
 800547a:	690a      	ldr	r2, [r1, #16]
 800547c:	b530      	push	{r4, r5, lr}
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	d10c      	bne.n	800549c <__mcmp+0x24>
 8005482:	0092      	lsls	r2, r2, #2
 8005484:	3014      	adds	r0, #20
 8005486:	3114      	adds	r1, #20
 8005488:	1884      	adds	r4, r0, r2
 800548a:	4411      	add	r1, r2
 800548c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005494:	4295      	cmp	r5, r2
 8005496:	d003      	beq.n	80054a0 <__mcmp+0x28>
 8005498:	d305      	bcc.n	80054a6 <__mcmp+0x2e>
 800549a:	2301      	movs	r3, #1
 800549c:	4618      	mov	r0, r3
 800549e:	bd30      	pop	{r4, r5, pc}
 80054a0:	42a0      	cmp	r0, r4
 80054a2:	d3f3      	bcc.n	800548c <__mcmp+0x14>
 80054a4:	e7fa      	b.n	800549c <__mcmp+0x24>
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054aa:	e7f7      	b.n	800549c <__mcmp+0x24>

080054ac <__mdiff>:
 80054ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b0:	460d      	mov	r5, r1
 80054b2:	4607      	mov	r7, r0
 80054b4:	4611      	mov	r1, r2
 80054b6:	4628      	mov	r0, r5
 80054b8:	4614      	mov	r4, r2
 80054ba:	f7ff ffdd 	bl	8005478 <__mcmp>
 80054be:	1e06      	subs	r6, r0, #0
 80054c0:	d108      	bne.n	80054d4 <__mdiff+0x28>
 80054c2:	4631      	mov	r1, r6
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff fded 	bl	80050a4 <_Balloc>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	bfa4      	itt	ge
 80054d6:	4623      	movge	r3, r4
 80054d8:	462c      	movge	r4, r5
 80054da:	4638      	mov	r0, r7
 80054dc:	6861      	ldr	r1, [r4, #4]
 80054de:	bfa6      	itte	ge
 80054e0:	461d      	movge	r5, r3
 80054e2:	2600      	movge	r6, #0
 80054e4:	2601      	movlt	r6, #1
 80054e6:	f7ff fddd 	bl	80050a4 <_Balloc>
 80054ea:	f04f 0e00 	mov.w	lr, #0
 80054ee:	60c6      	str	r6, [r0, #12]
 80054f0:	692b      	ldr	r3, [r5, #16]
 80054f2:	6926      	ldr	r6, [r4, #16]
 80054f4:	f104 0214 	add.w	r2, r4, #20
 80054f8:	f105 0914 	add.w	r9, r5, #20
 80054fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005500:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005504:	f100 0114 	add.w	r1, r0, #20
 8005508:	f852 ab04 	ldr.w	sl, [r2], #4
 800550c:	f859 5b04 	ldr.w	r5, [r9], #4
 8005510:	fa1f f38a 	uxth.w	r3, sl
 8005514:	4473      	add	r3, lr
 8005516:	b2ac      	uxth	r4, r5
 8005518:	1b1b      	subs	r3, r3, r4
 800551a:	0c2c      	lsrs	r4, r5, #16
 800551c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005520:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005524:	b29b      	uxth	r3, r3
 8005526:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800552a:	45c8      	cmp	r8, r9
 800552c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005530:	4694      	mov	ip, r2
 8005532:	f841 4b04 	str.w	r4, [r1], #4
 8005536:	d8e7      	bhi.n	8005508 <__mdiff+0x5c>
 8005538:	45bc      	cmp	ip, r7
 800553a:	d304      	bcc.n	8005546 <__mdiff+0x9a>
 800553c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005540:	b183      	cbz	r3, 8005564 <__mdiff+0xb8>
 8005542:	6106      	str	r6, [r0, #16]
 8005544:	e7c4      	b.n	80054d0 <__mdiff+0x24>
 8005546:	f85c 4b04 	ldr.w	r4, [ip], #4
 800554a:	b2a2      	uxth	r2, r4
 800554c:	4472      	add	r2, lr
 800554e:	1413      	asrs	r3, r2, #16
 8005550:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005554:	b292      	uxth	r2, r2
 8005556:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800555a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800555e:	f841 2b04 	str.w	r2, [r1], #4
 8005562:	e7e9      	b.n	8005538 <__mdiff+0x8c>
 8005564:	3e01      	subs	r6, #1
 8005566:	e7e9      	b.n	800553c <__mdiff+0x90>

08005568 <__d2b>:
 8005568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800556c:	461c      	mov	r4, r3
 800556e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005572:	2101      	movs	r1, #1
 8005574:	4690      	mov	r8, r2
 8005576:	f7ff fd95 	bl	80050a4 <_Balloc>
 800557a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800557e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005582:	4607      	mov	r7, r0
 8005584:	bb34      	cbnz	r4, 80055d4 <__d2b+0x6c>
 8005586:	9201      	str	r2, [sp, #4]
 8005588:	f1b8 0200 	subs.w	r2, r8, #0
 800558c:	d027      	beq.n	80055de <__d2b+0x76>
 800558e:	a802      	add	r0, sp, #8
 8005590:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005594:	f7ff fe0e 	bl	80051b4 <__lo0bits>
 8005598:	9900      	ldr	r1, [sp, #0]
 800559a:	b1f0      	cbz	r0, 80055da <__d2b+0x72>
 800559c:	9a01      	ldr	r2, [sp, #4]
 800559e:	f1c0 0320 	rsb	r3, r0, #32
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	430b      	orrs	r3, r1
 80055a8:	40c2      	lsrs	r2, r0
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf14      	ite	ne
 80055b4:	2102      	movne	r1, #2
 80055b6:	2101      	moveq	r1, #1
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	6139      	str	r1, [r7, #16]
 80055bc:	b1c4      	cbz	r4, 80055f0 <__d2b+0x88>
 80055be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80055c2:	4404      	add	r4, r0
 80055c4:	6034      	str	r4, [r6, #0]
 80055c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055ca:	6028      	str	r0, [r5, #0]
 80055cc:	4638      	mov	r0, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055d8:	e7d5      	b.n	8005586 <__d2b+0x1e>
 80055da:	6179      	str	r1, [r7, #20]
 80055dc:	e7e7      	b.n	80055ae <__d2b+0x46>
 80055de:	a801      	add	r0, sp, #4
 80055e0:	f7ff fde8 	bl	80051b4 <__lo0bits>
 80055e4:	2101      	movs	r1, #1
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	6139      	str	r1, [r7, #16]
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	3020      	adds	r0, #32
 80055ee:	e7e5      	b.n	80055bc <__d2b+0x54>
 80055f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055f4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80055f8:	6030      	str	r0, [r6, #0]
 80055fa:	6918      	ldr	r0, [r3, #16]
 80055fc:	f7ff fdbb 	bl	8005176 <__hi0bits>
 8005600:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005604:	e7e1      	b.n	80055ca <__d2b+0x62>
	...

08005608 <frexp>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	4616      	mov	r6, r2
 800560c:	2700      	movs	r7, #0
 800560e:	6037      	str	r7, [r6, #0]
 8005610:	4f14      	ldr	r7, [pc, #80]	; (8005664 <frexp+0x5c>)
 8005612:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005616:	42bb      	cmp	r3, r7
 8005618:	4604      	mov	r4, r0
 800561a:	460d      	mov	r5, r1
 800561c:	460a      	mov	r2, r1
 800561e:	dc1e      	bgt.n	800565e <frexp+0x56>
 8005620:	4607      	mov	r7, r0
 8005622:	431f      	orrs	r7, r3
 8005624:	d01b      	beq.n	800565e <frexp+0x56>
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562a:	da0a      	bge.n	8005642 <frexp+0x3a>
 800562c:	2200      	movs	r2, #0
 800562e:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <frexp+0x60>)
 8005630:	f7fa ff52 	bl	80004d8 <__aeabi_dmul>
 8005634:	460a      	mov	r2, r1
 8005636:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800563a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800563e:	4604      	mov	r4, r0
 8005640:	6031      	str	r1, [r6, #0]
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	151b      	asrs	r3, r3, #20
 8005646:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800564a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800564e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8005652:	440b      	add	r3, r1
 8005654:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8005658:	6033      	str	r3, [r6, #0]
 800565a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800565e:	4620      	mov	r0, r4
 8005660:	4629      	mov	r1, r5
 8005662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005664:	7fefffff 	.word	0x7fefffff
 8005668:	43500000 	.word	0x43500000

0800566c <_sbrk_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	2300      	movs	r3, #0
 8005670:	4c05      	ldr	r4, [pc, #20]	; (8005688 <_sbrk_r+0x1c>)
 8005672:	4605      	mov	r5, r0
 8005674:	4608      	mov	r0, r1
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	f7fc fffc 	bl	8002674 <_sbrk>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_sbrk_r+0x1a>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	b103      	cbz	r3, 8005686 <_sbrk_r+0x1a>
 8005684:	602b      	str	r3, [r5, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	20000c4c 	.word	0x20000c4c

0800568c <strncpy>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	3901      	subs	r1, #1
 8005692:	b902      	cbnz	r2, 8005696 <strncpy+0xa>
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	4623      	mov	r3, r4
 8005698:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800569c:	1e56      	subs	r6, r2, #1
 800569e:	f803 5b01 	strb.w	r5, [r3], #1
 80056a2:	b92d      	cbnz	r5, 80056b0 <strncpy+0x24>
 80056a4:	4414      	add	r4, r2
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	d0f4      	beq.n	8005694 <strncpy+0x8>
 80056aa:	f803 5b01 	strb.w	r5, [r3], #1
 80056ae:	e7fa      	b.n	80056a6 <strncpy+0x1a>
 80056b0:	461c      	mov	r4, r3
 80056b2:	4632      	mov	r2, r6
 80056b4:	e7ed      	b.n	8005692 <strncpy+0x6>

080056b6 <__ssprint_r>:
 80056b6:	6893      	ldr	r3, [r2, #8]
 80056b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	4681      	mov	r9, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	4616      	mov	r6, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d05e      	beq.n	8005784 <__ssprint_r+0xce>
 80056c6:	f04f 0b00 	mov.w	fp, #0
 80056ca:	465f      	mov	r7, fp
 80056cc:	f8d2 a000 	ldr.w	sl, [r2]
 80056d0:	b357      	cbz	r7, 8005728 <__ssprint_r+0x72>
 80056d2:	68a3      	ldr	r3, [r4, #8]
 80056d4:	429f      	cmp	r7, r3
 80056d6:	d340      	bcc.n	800575a <__ssprint_r+0xa4>
 80056d8:	89a2      	ldrh	r2, [r4, #12]
 80056da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056de:	d03c      	beq.n	800575a <__ssprint_r+0xa4>
 80056e0:	2302      	movs	r3, #2
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	6921      	ldr	r1, [r4, #16]
 80056e6:	eba5 0801 	sub.w	r8, r5, r1
 80056ea:	6965      	ldr	r5, [r4, #20]
 80056ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80056f4:	f108 0301 	add.w	r3, r8, #1
 80056f8:	443b      	add	r3, r7
 80056fa:	429d      	cmp	r5, r3
 80056fc:	bf38      	it	cc
 80056fe:	461d      	movcc	r5, r3
 8005700:	0553      	lsls	r3, r2, #21
 8005702:	d544      	bpl.n	800578e <__ssprint_r+0xd8>
 8005704:	4629      	mov	r1, r5
 8005706:	4648      	mov	r0, r9
 8005708:	f7ff fa70 	bl	8004bec <_malloc_r>
 800570c:	b988      	cbnz	r0, 8005732 <__ssprint_r+0x7c>
 800570e:	230c      	movs	r3, #12
 8005710:	f8c9 3000 	str.w	r3, [r9]
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800571a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	2300      	movs	r3, #0
 8005722:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8005726:	e02f      	b.n	8005788 <__ssprint_r+0xd2>
 8005728:	e9da b700 	ldrd	fp, r7, [sl]
 800572c:	f10a 0a08 	add.w	sl, sl, #8
 8005730:	e7ce      	b.n	80056d0 <__ssprint_r+0x1a>
 8005732:	4642      	mov	r2, r8
 8005734:	6921      	ldr	r1, [r4, #16]
 8005736:	9001      	str	r0, [sp, #4]
 8005738:	f7ff fc9c 	bl	8005074 <memcpy>
 800573c:	89a2      	ldrh	r2, [r4, #12]
 800573e:	9b01      	ldr	r3, [sp, #4]
 8005740:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005744:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005748:	81a2      	strh	r2, [r4, #12]
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	4443      	add	r3, r8
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	463b      	mov	r3, r7
 8005752:	6165      	str	r5, [r4, #20]
 8005754:	eba5 0508 	sub.w	r5, r5, r8
 8005758:	60a5      	str	r5, [r4, #8]
 800575a:	42bb      	cmp	r3, r7
 800575c:	bf28      	it	cs
 800575e:	463b      	movcs	r3, r7
 8005760:	4659      	mov	r1, fp
 8005762:	461a      	mov	r2, r3
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	f000 f8bf 	bl	80058ea <memmove>
 800576c:	68a2      	ldr	r2, [r4, #8]
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	1ad2      	subs	r2, r2, r3
 8005772:	60a2      	str	r2, [r4, #8]
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	4413      	add	r3, r2
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	68b3      	ldr	r3, [r6, #8]
 800577c:	1bdf      	subs	r7, r3, r7
 800577e:	60b7      	str	r7, [r6, #8]
 8005780:	2f00      	cmp	r7, #0
 8005782:	d1d1      	bne.n	8005728 <__ssprint_r+0x72>
 8005784:	2000      	movs	r0, #0
 8005786:	6070      	str	r0, [r6, #4]
 8005788:	b003      	add	sp, #12
 800578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578e:	462a      	mov	r2, r5
 8005790:	4648      	mov	r0, r9
 8005792:	f000 f8c3 	bl	800591c <_realloc_r>
 8005796:	4603      	mov	r3, r0
 8005798:	2800      	cmp	r0, #0
 800579a:	d1d6      	bne.n	800574a <__ssprint_r+0x94>
 800579c:	6921      	ldr	r1, [r4, #16]
 800579e:	4648      	mov	r0, r9
 80057a0:	f7ff f958 	bl	8004a54 <_free_r>
 80057a4:	e7b3      	b.n	800570e <__ssprint_r+0x58>

080057a6 <sysconf>:
 80057a6:	2808      	cmp	r0, #8
 80057a8:	b508      	push	{r3, lr}
 80057aa:	d006      	beq.n	80057ba <sysconf+0x14>
 80057ac:	f7fd f84a 	bl	8002844 <__errno>
 80057b0:	2316      	movs	r3, #22
 80057b2:	6003      	str	r3, [r0, #0]
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b8:	bd08      	pop	{r3, pc}
 80057ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80057be:	e7fb      	b.n	80057b8 <sysconf+0x12>

080057c0 <__register_exitproc>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4c26      	ldr	r4, [pc, #152]	; (8005860 <__register_exitproc+0xa0>)
 80057c6:	4606      	mov	r6, r0
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	4698      	mov	r8, r3
 80057cc:	460f      	mov	r7, r1
 80057ce:	4691      	mov	r9, r2
 80057d0:	f7ff fa0a 	bl	8004be8 <__retarget_lock_acquire_recursive>
 80057d4:	4b23      	ldr	r3, [pc, #140]	; (8005864 <__register_exitproc+0xa4>)
 80057d6:	681d      	ldr	r5, [r3, #0]
 80057d8:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80057dc:	b918      	cbnz	r0, 80057e6 <__register_exitproc+0x26>
 80057de:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 80057e2:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80057e6:	6843      	ldr	r3, [r0, #4]
 80057e8:	2b1f      	cmp	r3, #31
 80057ea:	dd19      	ble.n	8005820 <__register_exitproc+0x60>
 80057ec:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <__register_exitproc+0xa8>)
 80057ee:	b933      	cbnz	r3, 80057fe <__register_exitproc+0x3e>
 80057f0:	6820      	ldr	r0, [r4, #0]
 80057f2:	f7ff f9fa 	bl	8004bea <__retarget_lock_release_recursive>
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005802:	f3af 8000 	nop.w
 8005806:	2800      	cmp	r0, #0
 8005808:	d0f2      	beq.n	80057f0 <__register_exitproc+0x30>
 800580a:	2200      	movs	r2, #0
 800580c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8005810:	6042      	str	r2, [r0, #4]
 8005812:	6003      	str	r3, [r0, #0]
 8005814:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8005818:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800581c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8005820:	6843      	ldr	r3, [r0, #4]
 8005822:	b19e      	cbz	r6, 800584c <__register_exitproc+0x8c>
 8005824:	2201      	movs	r2, #1
 8005826:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800582a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800582e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8005832:	409a      	lsls	r2, r3
 8005834:	4311      	orrs	r1, r2
 8005836:	2e02      	cmp	r6, #2
 8005838:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800583c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8005840:	bf02      	ittt	eq
 8005842:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8005846:	430a      	orreq	r2, r1
 8005848:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	3302      	adds	r3, #2
 8005850:	6042      	str	r2, [r0, #4]
 8005852:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8005856:	6820      	ldr	r0, [r4, #0]
 8005858:	f7ff f9c7 	bl	8004bea <__retarget_lock_release_recursive>
 800585c:	2000      	movs	r0, #0
 800585e:	e7cc      	b.n	80057fa <__register_exitproc+0x3a>
 8005860:	20000440 	.word	0x20000440
 8005864:	08005d68 	.word	0x08005d68
 8005868:	00000000 	.word	0x00000000

0800586c <_calloc_r>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4351      	muls	r1, r2
 8005870:	f7ff f9bc 	bl	8004bec <_malloc_r>
 8005874:	4604      	mov	r4, r0
 8005876:	b198      	cbz	r0, 80058a0 <_calloc_r+0x34>
 8005878:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800587c:	f022 0203 	bic.w	r2, r2, #3
 8005880:	3a04      	subs	r2, #4
 8005882:	2a24      	cmp	r2, #36	; 0x24
 8005884:	d81b      	bhi.n	80058be <_calloc_r+0x52>
 8005886:	2a13      	cmp	r2, #19
 8005888:	d917      	bls.n	80058ba <_calloc_r+0x4e>
 800588a:	2100      	movs	r1, #0
 800588c:	2a1b      	cmp	r2, #27
 800588e:	e9c0 1100 	strd	r1, r1, [r0]
 8005892:	d807      	bhi.n	80058a4 <_calloc_r+0x38>
 8005894:	f100 0308 	add.w	r3, r0, #8
 8005898:	2200      	movs	r2, #0
 800589a:	e9c3 2200 	strd	r2, r2, [r3]
 800589e:	609a      	str	r2, [r3, #8]
 80058a0:	4620      	mov	r0, r4
 80058a2:	bd10      	pop	{r4, pc}
 80058a4:	2a24      	cmp	r2, #36	; 0x24
 80058a6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80058aa:	bf11      	iteee	ne
 80058ac:	f100 0310 	addne.w	r3, r0, #16
 80058b0:	6101      	streq	r1, [r0, #16]
 80058b2:	f100 0318 	addeq.w	r3, r0, #24
 80058b6:	6141      	streq	r1, [r0, #20]
 80058b8:	e7ee      	b.n	8005898 <_calloc_r+0x2c>
 80058ba:	4603      	mov	r3, r0
 80058bc:	e7ec      	b.n	8005898 <_calloc_r+0x2c>
 80058be:	2100      	movs	r1, #0
 80058c0:	f7fc ffea 	bl	8002898 <memset>
 80058c4:	e7ec      	b.n	80058a0 <_calloc_r+0x34>

080058c6 <__ascii_mbtowc>:
 80058c6:	b082      	sub	sp, #8
 80058c8:	b901      	cbnz	r1, 80058cc <__ascii_mbtowc+0x6>
 80058ca:	a901      	add	r1, sp, #4
 80058cc:	b142      	cbz	r2, 80058e0 <__ascii_mbtowc+0x1a>
 80058ce:	b14b      	cbz	r3, 80058e4 <__ascii_mbtowc+0x1e>
 80058d0:	7813      	ldrb	r3, [r2, #0]
 80058d2:	600b      	str	r3, [r1, #0]
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	1c10      	adds	r0, r2, #0
 80058d8:	bf18      	it	ne
 80058da:	2001      	movne	r0, #1
 80058dc:	b002      	add	sp, #8
 80058de:	4770      	bx	lr
 80058e0:	4610      	mov	r0, r2
 80058e2:	e7fb      	b.n	80058dc <__ascii_mbtowc+0x16>
 80058e4:	f06f 0001 	mvn.w	r0, #1
 80058e8:	e7f8      	b.n	80058dc <__ascii_mbtowc+0x16>

080058ea <memmove>:
 80058ea:	4288      	cmp	r0, r1
 80058ec:	b510      	push	{r4, lr}
 80058ee:	eb01 0302 	add.w	r3, r1, r2
 80058f2:	d807      	bhi.n	8005904 <memmove+0x1a>
 80058f4:	1e42      	subs	r2, r0, #1
 80058f6:	4299      	cmp	r1, r3
 80058f8:	d00a      	beq.n	8005910 <memmove+0x26>
 80058fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005902:	e7f8      	b.n	80058f6 <memmove+0xc>
 8005904:	4283      	cmp	r3, r0
 8005906:	d9f5      	bls.n	80058f4 <memmove+0xa>
 8005908:	1881      	adds	r1, r0, r2
 800590a:	1ad2      	subs	r2, r2, r3
 800590c:	42d3      	cmn	r3, r2
 800590e:	d100      	bne.n	8005912 <memmove+0x28>
 8005910:	bd10      	pop	{r4, pc}
 8005912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005916:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800591a:	e7f7      	b.n	800590c <memmove+0x22>

0800591c <_realloc_r>:
 800591c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	4682      	mov	sl, r0
 8005922:	460c      	mov	r4, r1
 8005924:	b929      	cbnz	r1, 8005932 <_realloc_r+0x16>
 8005926:	4611      	mov	r1, r2
 8005928:	b003      	add	sp, #12
 800592a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592e:	f7ff b95d 	b.w	8004bec <_malloc_r>
 8005932:	9201      	str	r2, [sp, #4]
 8005934:	f7ff fbaa 	bl	800508c <__malloc_lock>
 8005938:	9a01      	ldr	r2, [sp, #4]
 800593a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800593e:	f102 080b 	add.w	r8, r2, #11
 8005942:	f1b8 0f16 	cmp.w	r8, #22
 8005946:	f1a4 0908 	sub.w	r9, r4, #8
 800594a:	f025 0603 	bic.w	r6, r5, #3
 800594e:	d90b      	bls.n	8005968 <_realloc_r+0x4c>
 8005950:	f038 0807 	bics.w	r8, r8, #7
 8005954:	d50a      	bpl.n	800596c <_realloc_r+0x50>
 8005956:	230c      	movs	r3, #12
 8005958:	f04f 0b00 	mov.w	fp, #0
 800595c:	f8ca 3000 	str.w	r3, [sl]
 8005960:	4658      	mov	r0, fp
 8005962:	b003      	add	sp, #12
 8005964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005968:	f04f 0810 	mov.w	r8, #16
 800596c:	4590      	cmp	r8, r2
 800596e:	d3f2      	bcc.n	8005956 <_realloc_r+0x3a>
 8005970:	45b0      	cmp	r8, r6
 8005972:	f340 8175 	ble.w	8005c60 <_realloc_r+0x344>
 8005976:	49ab      	ldr	r1, [pc, #684]	; (8005c24 <_realloc_r+0x308>)
 8005978:	eb09 0306 	add.w	r3, r9, r6
 800597c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005980:	6858      	ldr	r0, [r3, #4]
 8005982:	459c      	cmp	ip, r3
 8005984:	9101      	str	r1, [sp, #4]
 8005986:	d005      	beq.n	8005994 <_realloc_r+0x78>
 8005988:	f020 0101 	bic.w	r1, r0, #1
 800598c:	4419      	add	r1, r3
 800598e:	6849      	ldr	r1, [r1, #4]
 8005990:	07cf      	lsls	r7, r1, #31
 8005992:	d447      	bmi.n	8005a24 <_realloc_r+0x108>
 8005994:	f020 0003 	bic.w	r0, r0, #3
 8005998:	459c      	cmp	ip, r3
 800599a:	eb06 0700 	add.w	r7, r6, r0
 800599e:	d119      	bne.n	80059d4 <_realloc_r+0xb8>
 80059a0:	f108 0110 	add.w	r1, r8, #16
 80059a4:	42b9      	cmp	r1, r7
 80059a6:	dc3f      	bgt.n	8005a28 <_realloc_r+0x10c>
 80059a8:	9a01      	ldr	r2, [sp, #4]
 80059aa:	eba7 0708 	sub.w	r7, r7, r8
 80059ae:	eb09 0308 	add.w	r3, r9, r8
 80059b2:	f047 0701 	orr.w	r7, r7, #1
 80059b6:	6093      	str	r3, [r2, #8]
 80059b8:	605f      	str	r7, [r3, #4]
 80059ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80059be:	4650      	mov	r0, sl
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	ea43 0308 	orr.w	r3, r3, r8
 80059c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80059cc:	f7ff fb64 	bl	8005098 <__malloc_unlock>
 80059d0:	46a3      	mov	fp, r4
 80059d2:	e7c5      	b.n	8005960 <_realloc_r+0x44>
 80059d4:	45b8      	cmp	r8, r7
 80059d6:	dc27      	bgt.n	8005a28 <_realloc_r+0x10c>
 80059d8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	6093      	str	r3, [r2, #8]
 80059e0:	eba7 0008 	sub.w	r0, r7, r8
 80059e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80059e8:	280f      	cmp	r0, #15
 80059ea:	f002 0201 	and.w	r2, r2, #1
 80059ee:	eb09 0307 	add.w	r3, r9, r7
 80059f2:	f240 8137 	bls.w	8005c64 <_realloc_r+0x348>
 80059f6:	eb09 0108 	add.w	r1, r9, r8
 80059fa:	ea48 0202 	orr.w	r2, r8, r2
 80059fe:	f040 0001 	orr.w	r0, r0, #1
 8005a02:	f8c9 2004 	str.w	r2, [r9, #4]
 8005a06:	6048      	str	r0, [r1, #4]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	3108      	adds	r1, #8
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	4650      	mov	r0, sl
 8005a14:	f7ff f81e 	bl	8004a54 <_free_r>
 8005a18:	4650      	mov	r0, sl
 8005a1a:	f7ff fb3d 	bl	8005098 <__malloc_unlock>
 8005a1e:	f109 0b08 	add.w	fp, r9, #8
 8005a22:	e79d      	b.n	8005960 <_realloc_r+0x44>
 8005a24:	2000      	movs	r0, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	07e9      	lsls	r1, r5, #31
 8005a2a:	f100 80c9 	bmi.w	8005bc0 <_realloc_r+0x2a4>
 8005a2e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005a32:	eba9 0505 	sub.w	r5, r9, r5
 8005a36:	6869      	ldr	r1, [r5, #4]
 8005a38:	f021 0103 	bic.w	r1, r1, #3
 8005a3c:	eb01 0b06 	add.w	fp, r1, r6
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8088 	beq.w	8005b56 <_realloc_r+0x23a>
 8005a46:	459c      	cmp	ip, r3
 8005a48:	eb00 070b 	add.w	r7, r0, fp
 8005a4c:	d14a      	bne.n	8005ae4 <_realloc_r+0x1c8>
 8005a4e:	f108 0310 	add.w	r3, r8, #16
 8005a52:	42bb      	cmp	r3, r7
 8005a54:	dc7f      	bgt.n	8005b56 <_realloc_r+0x23a>
 8005a56:	46ab      	mov	fp, r5
 8005a58:	68eb      	ldr	r3, [r5, #12]
 8005a5a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8005a5e:	60d3      	str	r3, [r2, #12]
 8005a60:	609a      	str	r2, [r3, #8]
 8005a62:	1f32      	subs	r2, r6, #4
 8005a64:	2a24      	cmp	r2, #36	; 0x24
 8005a66:	d838      	bhi.n	8005ada <_realloc_r+0x1be>
 8005a68:	2a13      	cmp	r2, #19
 8005a6a:	d934      	bls.n	8005ad6 <_realloc_r+0x1ba>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	2a1b      	cmp	r2, #27
 8005a70:	60ab      	str	r3, [r5, #8]
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	60eb      	str	r3, [r5, #12]
 8005a76:	d81b      	bhi.n	8005ab0 <_realloc_r+0x194>
 8005a78:	3408      	adds	r4, #8
 8005a7a:	f105 0310 	add.w	r3, r5, #16
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	68a2      	ldr	r2, [r4, #8]
 8005a88:	609a      	str	r2, [r3, #8]
 8005a8a:	9a01      	ldr	r2, [sp, #4]
 8005a8c:	eba7 0708 	sub.w	r7, r7, r8
 8005a90:	eb05 0308 	add.w	r3, r5, r8
 8005a94:	f047 0701 	orr.w	r7, r7, #1
 8005a98:	6093      	str	r3, [r2, #8]
 8005a9a:	605f      	str	r7, [r3, #4]
 8005a9c:	686b      	ldr	r3, [r5, #4]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	ea43 0308 	orr.w	r3, r3, r8
 8005aa6:	606b      	str	r3, [r5, #4]
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	f7ff faf5 	bl	8005098 <__malloc_unlock>
 8005aae:	e757      	b.n	8005960 <_realloc_r+0x44>
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	2a24      	cmp	r2, #36	; 0x24
 8005ab4:	612b      	str	r3, [r5, #16]
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	bf18      	it	ne
 8005aba:	3410      	addne	r4, #16
 8005abc:	616b      	str	r3, [r5, #20]
 8005abe:	bf09      	itett	eq
 8005ac0:	6923      	ldreq	r3, [r4, #16]
 8005ac2:	f105 0318 	addne.w	r3, r5, #24
 8005ac6:	61ab      	streq	r3, [r5, #24]
 8005ac8:	6962      	ldreq	r2, [r4, #20]
 8005aca:	bf02      	ittt	eq
 8005acc:	f105 0320 	addeq.w	r3, r5, #32
 8005ad0:	61ea      	streq	r2, [r5, #28]
 8005ad2:	3418      	addeq	r4, #24
 8005ad4:	e7d3      	b.n	8005a7e <_realloc_r+0x162>
 8005ad6:	465b      	mov	r3, fp
 8005ad8:	e7d1      	b.n	8005a7e <_realloc_r+0x162>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4658      	mov	r0, fp
 8005ade:	f7ff ff04 	bl	80058ea <memmove>
 8005ae2:	e7d2      	b.n	8005a8a <_realloc_r+0x16e>
 8005ae4:	45b8      	cmp	r8, r7
 8005ae6:	dc36      	bgt.n	8005b56 <_realloc_r+0x23a>
 8005ae8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8005aec:	4628      	mov	r0, r5
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	6093      	str	r3, [r2, #8]
 8005af2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005af6:	68eb      	ldr	r3, [r5, #12]
 8005af8:	60d3      	str	r3, [r2, #12]
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	1f32      	subs	r2, r6, #4
 8005afe:	2a24      	cmp	r2, #36	; 0x24
 8005b00:	d825      	bhi.n	8005b4e <_realloc_r+0x232>
 8005b02:	2a13      	cmp	r2, #19
 8005b04:	d908      	bls.n	8005b18 <_realloc_r+0x1fc>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	2a1b      	cmp	r2, #27
 8005b0a:	60ab      	str	r3, [r5, #8]
 8005b0c:	6863      	ldr	r3, [r4, #4]
 8005b0e:	60eb      	str	r3, [r5, #12]
 8005b10:	d80a      	bhi.n	8005b28 <_realloc_r+0x20c>
 8005b12:	3408      	adds	r4, #8
 8005b14:	f105 0010 	add.w	r0, r5, #16
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	6003      	str	r3, [r0, #0]
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	6043      	str	r3, [r0, #4]
 8005b20:	68a3      	ldr	r3, [r4, #8]
 8005b22:	6083      	str	r3, [r0, #8]
 8005b24:	46a9      	mov	r9, r5
 8005b26:	e75b      	b.n	80059e0 <_realloc_r+0xc4>
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	2a24      	cmp	r2, #36	; 0x24
 8005b2c:	612b      	str	r3, [r5, #16]
 8005b2e:	68e3      	ldr	r3, [r4, #12]
 8005b30:	bf18      	it	ne
 8005b32:	f105 0018 	addne.w	r0, r5, #24
 8005b36:	616b      	str	r3, [r5, #20]
 8005b38:	bf09      	itett	eq
 8005b3a:	6923      	ldreq	r3, [r4, #16]
 8005b3c:	3410      	addne	r4, #16
 8005b3e:	61ab      	streq	r3, [r5, #24]
 8005b40:	6963      	ldreq	r3, [r4, #20]
 8005b42:	bf02      	ittt	eq
 8005b44:	f105 0020 	addeq.w	r0, r5, #32
 8005b48:	61eb      	streq	r3, [r5, #28]
 8005b4a:	3418      	addeq	r4, #24
 8005b4c:	e7e4      	b.n	8005b18 <_realloc_r+0x1fc>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	f7ff fecb 	bl	80058ea <memmove>
 8005b54:	e7e6      	b.n	8005b24 <_realloc_r+0x208>
 8005b56:	45d8      	cmp	r8, fp
 8005b58:	dc32      	bgt.n	8005bc0 <_realloc_r+0x2a4>
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	68eb      	ldr	r3, [r5, #12]
 8005b5e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005b62:	60d3      	str	r3, [r2, #12]
 8005b64:	609a      	str	r2, [r3, #8]
 8005b66:	1f32      	subs	r2, r6, #4
 8005b68:	2a24      	cmp	r2, #36	; 0x24
 8005b6a:	d825      	bhi.n	8005bb8 <_realloc_r+0x29c>
 8005b6c:	2a13      	cmp	r2, #19
 8005b6e:	d908      	bls.n	8005b82 <_realloc_r+0x266>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	2a1b      	cmp	r2, #27
 8005b74:	60ab      	str	r3, [r5, #8]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	60eb      	str	r3, [r5, #12]
 8005b7a:	d80a      	bhi.n	8005b92 <_realloc_r+0x276>
 8005b7c:	3408      	adds	r4, #8
 8005b7e:	f105 0010 	add.w	r0, r5, #16
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	6003      	str	r3, [r0, #0]
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	6043      	str	r3, [r0, #4]
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	6083      	str	r3, [r0, #8]
 8005b8e:	465f      	mov	r7, fp
 8005b90:	e7c8      	b.n	8005b24 <_realloc_r+0x208>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	2a24      	cmp	r2, #36	; 0x24
 8005b96:	612b      	str	r3, [r5, #16]
 8005b98:	68e3      	ldr	r3, [r4, #12]
 8005b9a:	bf18      	it	ne
 8005b9c:	f105 0018 	addne.w	r0, r5, #24
 8005ba0:	616b      	str	r3, [r5, #20]
 8005ba2:	bf09      	itett	eq
 8005ba4:	6923      	ldreq	r3, [r4, #16]
 8005ba6:	3410      	addne	r4, #16
 8005ba8:	61ab      	streq	r3, [r5, #24]
 8005baa:	6963      	ldreq	r3, [r4, #20]
 8005bac:	bf02      	ittt	eq
 8005bae:	f105 0020 	addeq.w	r0, r5, #32
 8005bb2:	61eb      	streq	r3, [r5, #28]
 8005bb4:	3418      	addeq	r4, #24
 8005bb6:	e7e4      	b.n	8005b82 <_realloc_r+0x266>
 8005bb8:	4621      	mov	r1, r4
 8005bba:	f7ff fe96 	bl	80058ea <memmove>
 8005bbe:	e7e6      	b.n	8005b8e <_realloc_r+0x272>
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	f7ff f812 	bl	8004bec <_malloc_r>
 8005bc8:	4683      	mov	fp, r0
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f43f af6c 	beq.w	8005aa8 <_realloc_r+0x18c>
 8005bd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005bd4:	f1a0 0208 	sub.w	r2, r0, #8
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	444b      	add	r3, r9
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d105      	bne.n	8005bee <_realloc_r+0x2d2>
 8005be2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005be6:	f027 0703 	bic.w	r7, r7, #3
 8005bea:	4437      	add	r7, r6
 8005bec:	e6f8      	b.n	80059e0 <_realloc_r+0xc4>
 8005bee:	1f32      	subs	r2, r6, #4
 8005bf0:	2a24      	cmp	r2, #36	; 0x24
 8005bf2:	d831      	bhi.n	8005c58 <_realloc_r+0x33c>
 8005bf4:	2a13      	cmp	r2, #19
 8005bf6:	d92c      	bls.n	8005c52 <_realloc_r+0x336>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	2a1b      	cmp	r2, #27
 8005bfc:	6003      	str	r3, [r0, #0]
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	6043      	str	r3, [r0, #4]
 8005c02:	d811      	bhi.n	8005c28 <_realloc_r+0x30c>
 8005c04:	f104 0208 	add.w	r2, r4, #8
 8005c08:	f100 0308 	add.w	r3, r0, #8
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	6019      	str	r1, [r3, #0]
 8005c10:	6851      	ldr	r1, [r2, #4]
 8005c12:	6059      	str	r1, [r3, #4]
 8005c14:	6892      	ldr	r2, [r2, #8]
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	f7fe ff1a 	bl	8004a54 <_free_r>
 8005c20:	e742      	b.n	8005aa8 <_realloc_r+0x18c>
 8005c22:	bf00      	nop
 8005c24:	20000444 	.word	0x20000444
 8005c28:	68a3      	ldr	r3, [r4, #8]
 8005c2a:	2a24      	cmp	r2, #36	; 0x24
 8005c2c:	6083      	str	r3, [r0, #8]
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	bf18      	it	ne
 8005c32:	f104 0210 	addne.w	r2, r4, #16
 8005c36:	60c3      	str	r3, [r0, #12]
 8005c38:	bf09      	itett	eq
 8005c3a:	6923      	ldreq	r3, [r4, #16]
 8005c3c:	f100 0310 	addne.w	r3, r0, #16
 8005c40:	6103      	streq	r3, [r0, #16]
 8005c42:	6961      	ldreq	r1, [r4, #20]
 8005c44:	bf02      	ittt	eq
 8005c46:	f104 0218 	addeq.w	r2, r4, #24
 8005c4a:	f100 0318 	addeq.w	r3, r0, #24
 8005c4e:	6141      	streq	r1, [r0, #20]
 8005c50:	e7dc      	b.n	8005c0c <_realloc_r+0x2f0>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4622      	mov	r2, r4
 8005c56:	e7d9      	b.n	8005c0c <_realloc_r+0x2f0>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f7ff fe46 	bl	80058ea <memmove>
 8005c5e:	e7db      	b.n	8005c18 <_realloc_r+0x2fc>
 8005c60:	4637      	mov	r7, r6
 8005c62:	e6bd      	b.n	80059e0 <_realloc_r+0xc4>
 8005c64:	4317      	orrs	r7, r2
 8005c66:	f8c9 7004 	str.w	r7, [r9, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	e6d1      	b.n	8005a18 <_realloc_r+0xfc>

08005c74 <__ascii_wctomb>:
 8005c74:	b149      	cbz	r1, 8005c8a <__ascii_wctomb+0x16>
 8005c76:	2aff      	cmp	r2, #255	; 0xff
 8005c78:	bf8b      	itete	hi
 8005c7a:	238a      	movhi	r3, #138	; 0x8a
 8005c7c:	700a      	strbls	r2, [r1, #0]
 8005c7e:	6003      	strhi	r3, [r0, #0]
 8005c80:	2001      	movls	r0, #1
 8005c82:	bf88      	it	hi
 8005c84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005c88:	4770      	bx	lr
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4770      	bx	lr
	...

08005c90 <_init>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr

08005c9c <_fini>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr
