
STM32_Nextion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080057c8  080057c8  000157c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08005b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  2000067c  0800617c  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008e4  0800617c  000208e4  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000111d6  00000000  00000000  000206a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ae5  00000000  00000000  0003187b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003a68  00000000  00000000  00034360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000760  00000000  00000000  00037dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ae0  00000000  00000000  00038528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b53  00000000  00000000  00039008  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002763  00000000  00000000  0003db5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000402be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ec4  00000000  00000000  0004033c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000067c 	.word	0x2000067c
 800012c:	00000000 	.word	0x00000000
 8000130:	080057ac 	.word	0x080057ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000680 	.word	0x20000680
 800014c:	080057ac 	.word	0x080057ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_uldivmod>:
 8000a80:	b953      	cbnz	r3, 8000a98 <__aeabi_uldivmod+0x18>
 8000a82:	b94a      	cbnz	r2, 8000a98 <__aeabi_uldivmod+0x18>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	bf08      	it	eq
 8000a88:	2800      	cmpeq	r0, #0
 8000a8a:	bf1c      	itt	ne
 8000a8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a94:	f000 b97a 	b.w	8000d8c <__aeabi_idiv0>
 8000a98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa0:	f000 f806 	bl	8000ab0 <__udivmoddi4>
 8000aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <__udivmoddi4>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	4604      	mov	r4, r0
 8000aba:	9d08      	ldr	r5, [sp, #32]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__udivmoddi4+0xb2>
 8000ac0:	428a      	cmp	r2, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	d96c      	bls.n	8000ba0 <__udivmoddi4+0xf0>
 8000ac6:	fab2 fe82 	clz	lr, r2
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d00b      	beq.n	8000ae8 <__udivmoddi4+0x38>
 8000ad0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ad8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000adc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000ae4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ae8:	0c3a      	lsrs	r2, r7, #16
 8000aea:	fbbc f9f2 	udiv	r9, ip, r2
 8000aee:	b2bb      	uxth	r3, r7
 8000af0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000af4:	fb09 fa03 	mul.w	sl, r9, r3
 8000af8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000afc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000b00:	45b2      	cmp	sl, r6
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x6a>
 8000b04:	19f6      	adds	r6, r6, r7
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8000b0a:	f080 8125 	bcs.w	8000d58 <__udivmoddi4+0x2a8>
 8000b0e:	45b2      	cmp	sl, r6
 8000b10:	f240 8122 	bls.w	8000d58 <__udivmoddi4+0x2a8>
 8000b14:	f1a9 0902 	sub.w	r9, r9, #2
 8000b18:	443e      	add	r6, r7
 8000b1a:	eba6 060a 	sub.w	r6, r6, sl
 8000b1e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000b22:	fb02 6610 	mls	r6, r2, r0, r6
 8000b26:	fb00 f303 	mul.w	r3, r0, r3
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x98>
 8000b34:	19e4      	adds	r4, r4, r7
 8000b36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b3a:	f080 810b 	bcs.w	8000d54 <__udivmoddi4+0x2a4>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	f240 8108 	bls.w	8000d54 <__udivmoddi4+0x2a4>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	1ae4      	subs	r4, r4, r3
 8000b4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d062      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5a:	602c      	str	r4, [r5, #0]
 8000b5c:	606b      	str	r3, [r5, #4]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0xc6>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d055      	beq.n	8000c16 <__udivmoddi4+0x166>
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000b70:	4608      	mov	r0, r1
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	f040 808f 	bne.w	8000c9e <__udivmoddi4+0x1ee>
 8000b80:	42b3      	cmp	r3, r6
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xda>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80fc 	bhi.w	8000d82 <__udivmoddi4+0x2d2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	46b4      	mov	ip, r6
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d040      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	b912      	cbnz	r2, 8000ba8 <__udivmoddi4+0xf8>
 8000ba2:	2701      	movs	r7, #1
 8000ba4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ba8:	fab7 fe87 	clz	lr, r7
 8000bac:	f1be 0f00 	cmp.w	lr, #0
 8000bb0:	d135      	bne.n	8000c1e <__udivmoddi4+0x16e>
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	1bf6      	subs	r6, r6, r7
 8000bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000bba:	fa1f f887 	uxth.w	r8, r7
 8000bbe:	fbb6 f2fc 	udiv	r2, r6, ip
 8000bc2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000bc6:	fb08 f002 	mul.w	r0, r8, r2
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d907      	bls.n	8000be4 <__udivmoddi4+0x134>
 8000bd4:	19f6      	adds	r6, r6, r7
 8000bd6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x132>
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	f200 80d2 	bhi.w	8000d86 <__udivmoddi4+0x2d6>
 8000be2:	461a      	mov	r2, r3
 8000be4:	1a36      	subs	r6, r6, r0
 8000be6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000bea:	fb0c 6610 	mls	r6, ip, r0, r6
 8000bee:	fb08 f800 	mul.w	r8, r8, r0
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	d907      	bls.n	8000c0c <__udivmoddi4+0x15c>
 8000bfc:	19e4      	adds	r4, r4, r7
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x15a>
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	f200 80b9 	bhi.w	8000d7c <__udivmoddi4+0x2cc>
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	eba4 0408 	sub.w	r4, r4, r8
 8000c10:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c14:	e79c      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c22:	f1ce 0320 	rsb	r3, lr, #32
 8000c26:	fa26 f203 	lsr.w	r2, r6, r3
 8000c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c2e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000c32:	fa1f f887 	uxth.w	r8, r7
 8000c36:	fb0c 2211 	mls	r2, ip, r1, r2
 8000c3a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c3e:	fa20 f303 	lsr.w	r3, r0, r3
 8000c42:	fb01 f908 	mul.w	r9, r1, r8
 8000c46:	4333      	orrs	r3, r6
 8000c48:	0c1e      	lsrs	r6, r3, #16
 8000c4a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c4e:	45b1      	cmp	r9, r6
 8000c50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x1ba>
 8000c56:	19f6      	adds	r6, r6, r7
 8000c58:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 808c 	bcs.w	8000d78 <__udivmoddi4+0x2c8>
 8000c60:	45b1      	cmp	r9, r6
 8000c62:	f240 8089 	bls.w	8000d78 <__udivmoddi4+0x2c8>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443e      	add	r6, r7
 8000c6a:	eba6 0609 	sub.w	r6, r6, r9
 8000c6e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000c72:	fb0c 6210 	mls	r2, ip, r0, r6
 8000c76:	fb00 f908 	mul.w	r9, r0, r8
 8000c7a:	b29e      	uxth	r6, r3
 8000c7c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c80:	45b1      	cmp	r9, r6
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1e4>
 8000c84:	19f6      	adds	r6, r6, r7
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	d271      	bcs.n	8000d70 <__udivmoddi4+0x2c0>
 8000c8c:	45b1      	cmp	r9, r6
 8000c8e:	d96f      	bls.n	8000d70 <__udivmoddi4+0x2c0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443e      	add	r6, r7
 8000c94:	eba6 0609 	sub.w	r6, r6, r9
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	e78f      	b.n	8000bbe <__udivmoddi4+0x10e>
 8000c9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ca2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	ea48 0303 	orr.w	r3, r8, r3
 8000cac:	fa26 f407 	lsr.w	r4, r6, r7
 8000cb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000cb4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb8:	fa1f fc83 	uxth.w	ip, r3
 8000cbc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cc0:	408e      	lsls	r6, r1
 8000cc2:	fa20 f807 	lsr.w	r8, r0, r7
 8000cc6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000cca:	ea48 0806 	orr.w	r8, r8, r6
 8000cce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000cd2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	fa02 f201 	lsl.w	r2, r2, r1
 8000cdc:	fa00 f601 	lsl.w	r6, r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x244>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce8:	d244      	bcs.n	8000d74 <__udivmoddi4+0x2c4>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d942      	bls.n	8000d74 <__udivmoddi4+0x2c4>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	441c      	add	r4, r3
 8000cf4:	eba4 040a 	sub.w	r4, r4, sl
 8000cf8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cfc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d00:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d04:	fa1f f888 	uxth.w	r8, r8
 8000d08:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x270>
 8000d10:	18e4      	adds	r4, r4, r3
 8000d12:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8000d16:	d229      	bcs.n	8000d6c <__udivmoddi4+0x2bc>
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d927      	bls.n	8000d6c <__udivmoddi4+0x2bc>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	441c      	add	r4, r3
 8000d20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d24:	fba0 8902 	umull	r8, r9, r0, r2
 8000d28:	eba4 0c0c 	sub.w	ip, r4, ip
 8000d2c:	45cc      	cmp	ip, r9
 8000d2e:	46c2      	mov	sl, r8
 8000d30:	46ce      	mov	lr, r9
 8000d32:	d315      	bcc.n	8000d60 <__udivmoddi4+0x2b0>
 8000d34:	d012      	beq.n	8000d5c <__udivmoddi4+0x2ac>
 8000d36:	b155      	cbz	r5, 8000d4e <__udivmoddi4+0x29e>
 8000d38:	ebb6 030a 	subs.w	r3, r6, sl
 8000d3c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000d40:	fa06 f707 	lsl.w	r7, r6, r7
 8000d44:	40cb      	lsrs	r3, r1
 8000d46:	431f      	orrs	r7, r3
 8000d48:	40ce      	lsrs	r6, r1
 8000d4a:	602f      	str	r7, [r5, #0]
 8000d4c:	606e      	str	r6, [r5, #4]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	4610      	mov	r0, r2
 8000d56:	e6f7      	b.n	8000b48 <__udivmoddi4+0x98>
 8000d58:	4689      	mov	r9, r1
 8000d5a:	e6de      	b.n	8000b1a <__udivmoddi4+0x6a>
 8000d5c:	4546      	cmp	r6, r8
 8000d5e:	d2ea      	bcs.n	8000d36 <__udivmoddi4+0x286>
 8000d60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d64:	eb69 0e03 	sbc.w	lr, r9, r3
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7e4      	b.n	8000d36 <__udivmoddi4+0x286>
 8000d6c:	4670      	mov	r0, lr
 8000d6e:	e7d7      	b.n	8000d20 <__udivmoddi4+0x270>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e78f      	b.n	8000c94 <__udivmoddi4+0x1e4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7bd      	b.n	8000cf4 <__udivmoddi4+0x244>
 8000d78:	4611      	mov	r1, r2
 8000d7a:	e776      	b.n	8000c6a <__udivmoddi4+0x1ba>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	e744      	b.n	8000c0c <__udivmoddi4+0x15c>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e706      	b.n	8000b94 <__udivmoddi4+0xe4>
 8000d86:	3a02      	subs	r2, #2
 8000d88:	443e      	add	r6, r7
 8000d8a:	e72b      	b.n	8000be4 <__udivmoddi4+0x134>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <HAL_InitTick+0x3c>)
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_InitTick+0x40>)
 8000d9a:	7809      	ldrb	r1, [r1, #0]
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000da2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	fbb2 f0f3 	udiv	r0, r2, r3
 8000da8:	f000 f8a0 	bl	8000eec <HAL_SYSTICK_Config>
 8000dac:	b908      	cbnz	r0, 8000db2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	2d0f      	cmp	r5, #15
 8000db0:	d901      	bls.n	8000db6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	4602      	mov	r2, r0
 8000dba:	4629      	mov	r1, r5
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc0:	f000 f852 	bl	8000e68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_InitTick+0x44>)
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	601d      	str	r5, [r3, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x20>)
{
 8000dda:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dde:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de6:	f000 f82d 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff ffd0 	bl	8000d90 <HAL_InitTick>
  HAL_MspInit();
 8000df0:	f001 fc8a 	bl	8002708 <HAL_MspInit>
}
 8000df4:	2000      	movs	r0, #0
 8000df6:	bd08      	pop	{r3, pc}
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x10>)
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_IncTick+0x14>)
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	440b      	add	r3, r1
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000838 	.word	0x20000838
 8000e10:	20000000 	.word	0x20000000

08000e14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e14:	4b01      	ldr	r3, [pc, #4]	; (8000e1c <HAL_GetTick+0x8>)
 8000e16:	6818      	ldr	r0, [r3, #0]
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000838 	.word	0x20000838

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff fff6 	bl	8000e14 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e28:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e2a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000e2c:	d002      	beq.n	8000e34 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_Delay+0x20>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	1b40      	subs	r0, r0, r5
 8000e3a:	4284      	cmp	r4, r0
 8000e3c:	d8fa      	bhi.n	8000e34 <HAL_Delay+0x14>
  {
  }
}
 8000e3e:	bd38      	pop	{r3, r4, r5, pc}
 8000e40:	20000000 	.word	0x20000000

08000e44 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e44:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e4a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	400b      	ands	r3, r1
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e5c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e5e:	60d3      	str	r3, [r2, #12]
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b470      	push	{r4, r5, r6}
 8000e6c:	68dc      	ldr	r4, [r3, #12]
 8000e6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e72:	f1c4 0607 	rsb	r6, r4, #7
 8000e76:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e78:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	bf28      	it	cs
 8000e7e:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e80:	2b06      	cmp	r3, #6
 8000e82:	d917      	bls.n	8000eb4 <HAL_NVIC_SetPriority+0x4c>
 8000e84:	2501      	movs	r5, #1
 8000e86:	3c03      	subs	r4, #3
 8000e88:	40a5      	lsls	r5, r4
 8000e8a:	3d01      	subs	r5, #1
 8000e8c:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8e:	2301      	movs	r3, #1
 8000e90:	40b3      	lsls	r3, r6
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4019      	ands	r1, r3
 8000e96:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000e98:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000e9e:	db0c      	blt.n	8000eba <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	0109      	lsls	r1, r1, #4
 8000ea2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ea6:	b2c9      	uxtb	r1, r1
 8000ea8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000eac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eb0:	bc70      	pop	{r4, r5, r6}
 8000eb2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4614      	mov	r4, r2
 8000eb8:	e7e9      	b.n	8000e8e <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_NVIC_SetPriority+0x68>)
 8000ebc:	f000 000f 	and.w	r0, r0, #15
 8000ec0:	0109      	lsls	r1, r1, #4
 8000ec2:	b2c9      	uxtb	r1, r1
 8000ec4:	4403      	add	r3, r0
 8000ec6:	7619      	strb	r1, [r3, #24]
 8000ec8:	bc70      	pop	{r4, r5, r6}
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	e000ecfc 	.word	0xe000ecfc

08000ed4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f000 011f 	and.w	r1, r0, #31
 8000eda:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_NVIC_EnableIRQ+0x14>)
 8000edc:	0940      	lsrs	r0, r0, #5
 8000ede:	408b      	lsls	r3, r1
 8000ee0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	3801      	subs	r0, #1
 8000eee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ef2:	d20d      	bcs.n	8000f10 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef4:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	4c06      	ldr	r4, [pc, #24]	; (8000f18 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f00:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f06:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000f08:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0c:	6019      	str	r1, [r3, #0]
 8000f0e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f10:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000f12:	4770      	bx	lr
 8000f14:	e000e010 	.word	0xe000e010
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f1c:	b350      	cbz	r0, 8000f74 <HAL_DMA_Init+0x58>
 8000f1e:	4602      	mov	r2, r0
{
 8000f20:	b4f0      	push	{r4, r5, r6, r7}

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f22:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f24:	2601      	movs	r6, #1
  tmp |=  hdma->Init.Direction        |
 8000f26:	6887      	ldr	r7, [r0, #8]
 8000f28:	6843      	ldr	r3, [r0, #4]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f2a:	6805      	ldr	r5, [r0, #0]
 8000f2c:	4912      	ldr	r1, [pc, #72]	; (8000f78 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2e:	68c0      	ldr	r0, [r0, #12]
  tmp |=  hdma->Init.Direction        |
 8000f30:	433b      	orrs	r3, r7
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f32:	4f12      	ldr	r7, [pc, #72]	; (8000f7c <HAL_DMA_Init+0x60>)
 8000f34:	4429      	add	r1, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f36:	4303      	orrs	r3, r0
 8000f38:	6910      	ldr	r0, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f3a:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3e:	6957      	ldr	r7, [r2, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f40:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f42:	433b      	orrs	r3, r7
 8000f44:	6997      	ldr	r7, [r2, #24]
  tmp = hdma->Instance->CCR;
 8000f46:	6828      	ldr	r0, [r5, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f48:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f4a:	69d7      	ldr	r7, [r2, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f4c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f50:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f52:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  hdma->DmaBaseAddress = DMA1;
 8000f56:	4f0a      	ldr	r7, [pc, #40]	; (8000f80 <HAL_DMA_Init+0x64>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f58:	0909      	lsrs	r1, r1, #4
  tmp |=  hdma->Init.Direction        |
 8000f5a:	4303      	orrs	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f5c:	0089      	lsls	r1, r1, #2
  hdma->DmaBaseAddress = DMA1;
 8000f5e:	63d7      	str	r7, [r2, #60]	; 0x3c
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8000f60:	4620      	mov	r0, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f62:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->Instance->CCR = tmp;
 8000f64:	602b      	str	r3, [r5, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f66:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000f68:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8000f6c:	f882 6021 	strb.w	r6, [r2, #33]	; 0x21
}
 8000f70:	bcf0      	pop	{r4, r5, r6, r7}
 8000f72:	4770      	bx	lr
    return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
 8000f76:	4770      	bx	lr
 8000f78:	bffdfff8 	.word	0xbffdfff8
 8000f7c:	cccccccd 	.word	0xcccccccd
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f86:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000f8a:	2c01      	cmp	r4, #1
 8000f8c:	d00c      	beq.n	8000fa8 <HAL_DMA_Start_IT+0x24>
 8000f8e:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f90:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000f94:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f98:	42ac      	cmp	r4, r5
 8000f9a:	d008      	beq.n	8000fae <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f9c:	2200      	movs	r2, #0

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f9e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8000fa0:	f880 2020 	strb.w	r2, [r0, #32]
  }    
  return status;
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8000fa8:	2302      	movs	r3, #2
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fae:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 8000fb4:	6805      	ldr	r5, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000fb8:	682e      	ldr	r6, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fba:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8000fbc:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8000fc0:	40bc      	lsls	r4, r7
    __HAL_DMA_DISABLE(hdma);
 8000fc2:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fc6:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc8:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fce:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 8000fd2:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8000fd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd6:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fd8:	bf0b      	itete	eq
 8000fda:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000fdc:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000fde:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000fe0:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000fe2:	b14b      	cbz	r3, 8000ff8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	f043 030e 	orr.w	r3, r3, #14
 8000fea:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8000fec:	682a      	ldr	r2, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
 8000ff4:	602a      	str	r2, [r5, #0]
 8000ff6:	e7d5      	b.n	8000fa4 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	f023 0304 	bic.w	r3, r3, #4
 8000ffe:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	f043 030a 	orr.w	r3, r3, #10
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	e7f0      	b.n	8000fec <HAL_DMA_Start_IT+0x68>
 800100a:	bf00      	nop

0800100c <HAL_DMA_Abort_IT>:
{  
 800100c:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800100e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001012:	2b02      	cmp	r3, #2
 8001014:	d004      	beq.n	8001020 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001016:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8001018:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	6382      	str	r2, [r0, #56]	; 0x38
}
 800101c:	4620      	mov	r0, r4
 800101e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001020:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001024:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001026:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	f022 020e 	bic.w	r2, r2, #14
 800102c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001036:	d021      	beq.n	800107c <HAL_DMA_Abort_IT+0x70>
 8001038:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_DMA_Abort_IT+0x90>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d01c      	beq.n	8001078 <HAL_DMA_Abort_IT+0x6c>
 800103e:	3214      	adds	r2, #20
 8001040:	4293      	cmp	r3, r2
 8001042:	d01f      	beq.n	8001084 <HAL_DMA_Abort_IT+0x78>
 8001044:	3214      	adds	r2, #20
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_DMA_Abort_IT+0x7e>
 800104a:	3214      	adds	r2, #20
 800104c:	4293      	cmp	r3, r2
 800104e:	d01f      	beq.n	8001090 <HAL_DMA_Abort_IT+0x84>
 8001050:	3214      	adds	r2, #20
 8001052:	4293      	cmp	r3, r2
 8001054:	bf0c      	ite	eq
 8001056:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800105a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 800105e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001060:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001062:	4d0f      	ldr	r5, [pc, #60]	; (80010a0 <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 8001064:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001066:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001068:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800106c:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001070:	b132      	cbz	r2, 8001080 <HAL_DMA_Abort_IT+0x74>
      hdma->XferAbortCallback(hdma);
 8001072:	4790      	blx	r2
}
 8001074:	4620      	mov	r0, r4
 8001076:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001078:	2310      	movs	r3, #16
 800107a:	e7f0      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 800107c:	2301      	movs	r3, #1
 800107e:	e7ee      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001080:	4614      	mov	r4, r2
 8001082:	e7cb      	b.n	800101c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001088:	e7e9      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	e7e6      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	e7e3      	b.n	800105e <HAL_DMA_Abort_IT+0x52>
 8001096:	bf00      	nop
 8001098:	40020008 	.word	0x40020008
 800109c:	4002001c 	.word	0x4002001c
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010a4:	2204      	movs	r2, #4
{
 80010a6:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010a8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010aa:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ac:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80010ae:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80010b4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010b6:	d01f      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x54>
 80010b8:	076f      	lsls	r7, r5, #29
 80010ba:	d51d      	bpl.n	80010f8 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	0692      	lsls	r2, r2, #26
 80010c0:	d403      	bmi.n	80010ca <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f022 0204 	bic.w	r2, r2, #4
 80010c8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010ca:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_DMA_IRQHandler+0x124>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05d      	beq.n	800118c <HAL_DMA_IRQHandler+0xe8>
 80010d0:	3214      	adds	r2, #20
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d062      	beq.n	800119c <HAL_DMA_IRQHandler+0xf8>
 80010d6:	3214      	adds	r2, #20
 80010d8:	4293      	cmp	r3, r2
 80010da:	d069      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x10c>
 80010dc:	3214      	adds	r2, #20
 80010de:	4293      	cmp	r3, r2
 80010e0:	d06c      	beq.n	80011bc <HAL_DMA_IRQHandler+0x118>
 80010e2:	3214      	adds	r2, #20
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d05b      	beq.n	80011a0 <HAL_DMA_IRQHandler+0xfc>
 80010e8:	3214      	adds	r2, #20
 80010ea:	4293      	cmp	r3, r2
 80010ec:	bf0c      	ite	eq
 80010ee:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80010f2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80010f6:	e04a      	b.n	800118e <HAL_DMA_IRQHandler+0xea>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010f8:	2202      	movs	r2, #2
 80010fa:	408a      	lsls	r2, r1
 80010fc:	4222      	tst	r2, r4
 80010fe:	d022      	beq.n	8001146 <HAL_DMA_IRQHandler+0xa2>
 8001100:	07af      	lsls	r7, r5, #30
 8001102:	d520      	bpl.n	8001146 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	0691      	lsls	r1, r2, #26
 8001108:	d406      	bmi.n	8001118 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 800110a:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f022 020a 	bic.w	r2, r2, #10
 8001112:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001114:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001118:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <HAL_DMA_IRQHandler+0x124>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02c      	beq.n	8001178 <HAL_DMA_IRQHandler+0xd4>
 800111e:	3214      	adds	r2, #20
 8001120:	4293      	cmp	r3, r2
 8001122:	d043      	beq.n	80011ac <HAL_DMA_IRQHandler+0x108>
 8001124:	3214      	adds	r2, #20
 8001126:	4293      	cmp	r3, r2
 8001128:	d045      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x112>
 800112a:	3214      	adds	r2, #20
 800112c:	4293      	cmp	r3, r2
 800112e:	d048      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x11e>
 8001130:	3214      	adds	r2, #20
 8001132:	4293      	cmp	r3, r2
 8001134:	d037      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x102>
 8001136:	3214      	adds	r2, #20
 8001138:	4293      	cmp	r3, r2
 800113a:	bf0c      	ite	eq
 800113c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001140:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001144:	e019      	b.n	800117a <HAL_DMA_IRQHandler+0xd6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001146:	2208      	movs	r2, #8
 8001148:	408a      	lsls	r2, r1
 800114a:	4222      	tst	r2, r4
 800114c:	d01c      	beq.n	8001188 <HAL_DMA_IRQHandler+0xe4>
 800114e:	072a      	lsls	r2, r5, #28
 8001150:	d51a      	bpl.n	8001188 <HAL_DMA_IRQHandler+0xe4>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001152:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8001154:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001156:	681c      	ldr	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8001158:	6b05      	ldr	r5, [r0, #48]	; 0x30
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115a:	f024 040e 	bic.w	r4, r4, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800115e:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001164:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001166:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001168:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800116c:	f880 7020 	strb.w	r7, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001170:	b155      	cbz	r5, 8001188 <HAL_DMA_IRQHandler+0xe4>
      hdma->XferErrorCallback(hdma);
 8001172:	462b      	mov	r3, r5
}
 8001174:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001176:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001178:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800117a:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800117c:	4c13      	ldr	r4, [pc, #76]	; (80011cc <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 800117e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001180:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001182:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001186:	b93a      	cbnz	r2, 8001198 <HAL_DMA_IRQHandler+0xf4>
}
 8001188:	bcf0      	pop	{r4, r5, r6, r7}
 800118a:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800118c:	2304      	movs	r3, #4
 800118e:	490f      	ldr	r1, [pc, #60]	; (80011cc <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8001190:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001192:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001194:	2a00      	cmp	r2, #0
 8001196:	d0f7      	beq.n	8001188 <HAL_DMA_IRQHandler+0xe4>
}
 8001198:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferCpltCallback(hdma);
 800119a:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800119c:	2340      	movs	r3, #64	; 0x40
 800119e:	e7f6      	b.n	800118e <HAL_DMA_IRQHandler+0xea>
 80011a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011a4:	e7f3      	b.n	800118e <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011aa:	e7e6      	b.n	800117a <HAL_DMA_IRQHandler+0xd6>
 80011ac:	2320      	movs	r3, #32
 80011ae:	e7e4      	b.n	800117a <HAL_DMA_IRQHandler+0xd6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	e7eb      	b.n	800118e <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ba:	e7de      	b.n	800117a <HAL_DMA_IRQHandler+0xd6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011c0:	e7e5      	b.n	800118e <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	e7d8      	b.n	800117a <HAL_DMA_IRQHandler+0xd6>
 80011c8:	40020008 	.word	0x40020008
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80011d4:	f04f 0800 	mov.w	r8, #0
{
 80011d8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011da:	4643      	mov	r3, r8
{
 80011dc:	f06f 061f 	mvn.w	r6, #31
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e0:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 80013c0 <HAL_GPIO_Init+0x1f0>
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e4:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80013c4 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e8:	4f6f      	ldr	r7, [pc, #444]	; (80013a8 <HAL_GPIO_Init+0x1d8>)
      switch (GPIO_Init->Mode)
 80011ea:	9000      	str	r0, [sp, #0]
 80011ec:	e005      	b.n	80011fa <HAL_GPIO_Init+0x2a>
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	3301      	adds	r3, #1
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	f106 0604 	add.w	r6, r6, #4
 80011f6:	f000 8089 	beq.w	800130c <HAL_GPIO_Init+0x13c>
    ioposition = (0x01U << position);
 80011fa:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fc:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80011fe:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001200:	4014      	ands	r4, r2
    if (iocurrent == ioposition)
 8001202:	42a2      	cmp	r2, r4
 8001204:	d1f3      	bne.n	80011ee <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001206:	684d      	ldr	r5, [r1, #4]
 8001208:	2d12      	cmp	r5, #18
 800120a:	f000 80a3 	beq.w	8001354 <HAL_GPIO_Init+0x184>
 800120e:	f200 808c 	bhi.w	800132a <HAL_GPIO_Init+0x15a>
 8001212:	2d02      	cmp	r5, #2
 8001214:	f000 80a5 	beq.w	8001362 <HAL_GPIO_Init+0x192>
 8001218:	f240 8081 	bls.w	800131e <HAL_GPIO_Init+0x14e>
 800121c:	2d03      	cmp	r5, #3
 800121e:	f000 809d 	beq.w	800135c <HAL_GPIO_Init+0x18c>
 8001222:	2d11      	cmp	r5, #17
 8001224:	d102      	bne.n	800122c <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001226:	68ca      	ldr	r2, [r1, #12]
 8001228:	f102 0804 	add.w	r8, r2, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122c:	2cff      	cmp	r4, #255	; 0xff
 800122e:	d870      	bhi.n	8001312 <HAL_GPIO_Init+0x142>
 8001230:	9a00      	ldr	r2, [sp, #0]
 8001232:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001236:	4691      	mov	r9, r2
 8001238:	6812      	ldr	r2, [r2, #0]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800123a:	250f      	movs	r5, #15
 800123c:	fa05 fb0a 	lsl.w	fp, r5, sl
 8001240:	ea22 020b 	bic.w	r2, r2, fp
 8001244:	fa08 fa0a 	lsl.w	sl, r8, sl
 8001248:	ea42 020a 	orr.w	r2, r2, sl
 800124c:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001250:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001254:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001258:	d0c9      	beq.n	80011ee <HAL_GPIO_Init+0x1e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800125a:	f8de 9018 	ldr.w	r9, [lr, #24]
 800125e:	f023 0203 	bic.w	r2, r3, #3
 8001262:	f049 0901 	orr.w	r9, r9, #1
 8001266:	f8ce 9018 	str.w	r9, [lr, #24]
 800126a:	f8de 9018 	ldr.w	r9, [lr, #24]
 800126e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001272:	f009 0901 	and.w	r9, r9, #1
 8001276:	f8cd 900c 	str.w	r9, [sp, #12]
 800127a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800127e:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001286:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800128a:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800128e:	fa05 f509 	lsl.w	r5, r5, r9
 8001292:	ea2b 0005 	bic.w	r0, fp, r5
 8001296:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001298:	9800      	ldr	r0, [sp, #0]
 800129a:	4560      	cmp	r0, ip
 800129c:	d077      	beq.n	800138e <HAL_GPIO_Init+0x1be>
 800129e:	4d43      	ldr	r5, [pc, #268]	; (80013ac <HAL_GPIO_Init+0x1dc>)
 80012a0:	42a8      	cmp	r0, r5
 80012a2:	d077      	beq.n	8001394 <HAL_GPIO_Init+0x1c4>
 80012a4:	4d42      	ldr	r5, [pc, #264]	; (80013b0 <HAL_GPIO_Init+0x1e0>)
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d079      	beq.n	800139e <HAL_GPIO_Init+0x1ce>
 80012aa:	4d42      	ldr	r5, [pc, #264]	; (80013b4 <HAL_GPIO_Init+0x1e4>)
 80012ac:	42a8      	cmp	r0, r5
 80012ae:	bf0c      	ite	eq
 80012b0:	f04f 0b03 	moveq.w	fp, #3
 80012b4:	f04f 0b04 	movne.w	fp, #4
 80012b8:	fa0b f909 	lsl.w	r9, fp, r9
 80012bc:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	ea40 0509 	orr.w	r5, r0, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80012c6:	6095      	str	r5, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80012c8:	683a      	ldr	r2, [r7, #0]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	f103 0301 	add.w	r3, r3, #1
          SET_BIT(EXTI->IMR, iocurrent);
 80012ce:	bf14      	ite	ne
 80012d0:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d2:	43a2      	biceq	r2, r4
 80012d4:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80012d6:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80012dc:	bf14      	ite	ne
 80012de:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e0:	43a2      	biceq	r2, r4
 80012e2:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e4:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80012ea:	bf14      	ite	ne
 80012ec:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ee:	43a2      	biceq	r2, r4
 80012f0:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f2:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f8:	bf14      	ite	ne
 80012fa:	4314      	orrne	r4, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fc:	ea22 0404 	biceq.w	r4, r2, r4
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001300:	2b10      	cmp	r3, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001302:	60fc      	str	r4, [r7, #12]
 8001304:	f106 0604 	add.w	r6, r6, #4
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001308:	f47f af77 	bne.w	80011fa <HAL_GPIO_Init+0x2a>
        }
      }
    }
  }
}
 800130c:	b005      	add	sp, #20
 800130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001312:	9800      	ldr	r0, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001314:	46b2      	mov	sl, r6
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001316:	6842      	ldr	r2, [r0, #4]
 8001318:	f100 0904 	add.w	r9, r0, #4
 800131c:	e78d      	b.n	800123a <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 800131e:	b1a5      	cbz	r5, 800134a <HAL_GPIO_Init+0x17a>
 8001320:	2d01      	cmp	r5, #1
 8001322:	d183      	bne.n	800122c <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001324:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 8001328:	e780      	b.n	800122c <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 800132a:	4823      	ldr	r0, [pc, #140]	; (80013b8 <HAL_GPIO_Init+0x1e8>)
 800132c:	4285      	cmp	r5, r0
 800132e:	d00c      	beq.n	800134a <HAL_GPIO_Init+0x17a>
 8001330:	d91b      	bls.n	800136a <HAL_GPIO_Init+0x19a>
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <HAL_GPIO_Init+0x1ec>)
 8001334:	4285      	cmp	r5, r0
 8001336:	d008      	beq.n	800134a <HAL_GPIO_Init+0x17a>
 8001338:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800133c:	4285      	cmp	r5, r0
 800133e:	d004      	beq.n	800134a <HAL_GPIO_Init+0x17a>
 8001340:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80013c8 <HAL_GPIO_Init+0x1f8>
 8001344:	454d      	cmp	r5, r9
 8001346:	f47f af71 	bne.w	800122c <HAL_GPIO_Init+0x5c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134a:	688d      	ldr	r5, [r1, #8]
 800134c:	b9bd      	cbnz	r5, 800137e <HAL_GPIO_Init+0x1ae>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134e:	f04f 0804 	mov.w	r8, #4
 8001352:	e76b      	b.n	800122c <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001354:	68ca      	ldr	r2, [r1, #12]
 8001356:	f102 080c 	add.w	r8, r2, #12
          break;
 800135a:	e767      	b.n	800122c <HAL_GPIO_Init+0x5c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800135c:	f04f 0800 	mov.w	r8, #0
 8001360:	e764      	b.n	800122c <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001362:	68ca      	ldr	r2, [r1, #12]
 8001364:	f102 0808 	add.w	r8, r2, #8
          break;
 8001368:	e760      	b.n	800122c <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 800136a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80013cc <HAL_GPIO_Init+0x1fc>
 800136e:	454d      	cmp	r5, r9
 8001370:	d0eb      	beq.n	800134a <HAL_GPIO_Init+0x17a>
 8001372:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001376:	454d      	cmp	r5, r9
 8001378:	f47f af58 	bne.w	800122c <HAL_GPIO_Init+0x5c>
 800137c:	e7e5      	b.n	800134a <HAL_GPIO_Init+0x17a>
            GPIOx->BSRR = ioposition;
 800137e:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8001382:	bf0c      	ite	eq
 8001384:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001386:	6142      	strne	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	f04f 0808 	mov.w	r8, #8
 800138c:	e74e      	b.n	800122c <HAL_GPIO_Init+0x5c>
 800138e:	f04f 0900 	mov.w	r9, #0
 8001392:	e793      	b.n	80012bc <HAL_GPIO_Init+0xec>
 8001394:	f04f 0b01 	mov.w	fp, #1
 8001398:	fa0b f909 	lsl.w	r9, fp, r9
 800139c:	e78e      	b.n	80012bc <HAL_GPIO_Init+0xec>
 800139e:	f04f 0b02 	mov.w	fp, #2
 80013a2:	fa0b f909 	lsl.w	r9, fp, r9
 80013a6:	e789      	b.n	80012bc <HAL_GPIO_Init+0xec>
 80013a8:	40010400 	.word	0x40010400
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40011400 	.word	0x40011400
 80013b8:	10210000 	.word	0x10210000
 80013bc:	10310000 	.word	0x10310000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	10220000 	.word	0x10220000
 80013cc:	10110000 	.word	0x10110000

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d4:	6803      	ldr	r3, [r0, #0]
{
 80013d6:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d8:	07dd      	lsls	r5, r3, #31
{
 80013da:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013dc:	d530      	bpl.n	8001440 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013de:	49ad      	ldr	r1, [pc, #692]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 80013e0:	684a      	ldr	r2, [r1, #4]
 80013e2:	f002 020c 	and.w	r2, r2, #12
 80013e6:	2a04      	cmp	r2, #4
 80013e8:	f000 80fa 	beq.w	80015e0 <HAL_RCC_OscConfig+0x210>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ec:	684a      	ldr	r2, [r1, #4]
 80013ee:	f002 020c 	and.w	r2, r2, #12
 80013f2:	2a08      	cmp	r2, #8
 80013f4:	f000 80f0 	beq.w	80015d8 <HAL_RCC_OscConfig+0x208>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	f000 8174 	beq.w	80016ea <HAL_RCC_OscConfig+0x31a>
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8104 	beq.w	8001610 <HAL_RCC_OscConfig+0x240>
 8001408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800140c:	f000 81a9 	beq.w	8001762 <HAL_RCC_OscConfig+0x392>
 8001410:	4ba0      	ldr	r3, [pc, #640]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001420:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fcf7 	bl	8000e14 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4d9b      	ldr	r5, [pc, #620]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001428:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	e005      	b.n	8001438 <HAL_RCC_OscConfig+0x68>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fcf2 	bl	8000e14 <HAL_GetTick>
 8001430:	1b80      	subs	r0, r0, r6
 8001432:	2864      	cmp	r0, #100	; 0x64
 8001434:	f200 8117 	bhi.w	8001666 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	039a      	lsls	r2, r3, #14
 800143c:	d5f6      	bpl.n	800142c <HAL_RCC_OscConfig+0x5c>
 800143e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001440:	079f      	lsls	r7, r3, #30
 8001442:	d528      	bpl.n	8001496 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001444:	4a93      	ldr	r2, [pc, #588]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 8001446:	6851      	ldr	r1, [r2, #4]
 8001448:	f011 0f0c 	tst.w	r1, #12
 800144c:	f000 80a9 	beq.w	80015a2 <HAL_RCC_OscConfig+0x1d2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001450:	6851      	ldr	r1, [r2, #4]
 8001452:	f001 010c 	and.w	r1, r1, #12
 8001456:	2908      	cmp	r1, #8
 8001458:	f000 809f 	beq.w	800159a <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145c:	6923      	ldr	r3, [r4, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8132 	beq.w	80016c8 <HAL_RCC_OscConfig+0x2f8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	2201      	movs	r2, #1
 8001466:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <HAL_RCC_OscConfig+0x2c8>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	4d8a      	ldr	r5, [pc, #552]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 800146a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800146c:	f7ff fcd2 	bl	8000e14 <HAL_GetTick>
 8001470:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	e005      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fcce 	bl	8000e14 <HAL_GetTick>
 8001478:	1b80      	subs	r0, r0, r6
 800147a:	2802      	cmp	r0, #2
 800147c:	f200 80f3 	bhi.w	8001666 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	0798      	lsls	r0, r3, #30
 8001484:	d5f6      	bpl.n	8001474 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	682b      	ldr	r3, [r5, #0]
 8001488:	6962      	ldr	r2, [r4, #20]
 800148a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800148e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001492:	602b      	str	r3, [r5, #0]
 8001494:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	071a      	lsls	r2, r3, #28
 8001498:	d45d      	bmi.n	8001556 <HAL_RCC_OscConfig+0x186>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149a:	075d      	lsls	r5, r3, #29
 800149c:	d53a      	bpl.n	8001514 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	00d0      	lsls	r0, r2, #3
 80014a4:	f100 80a6 	bmi.w	80015f4 <HAL_RCC_OscConfig+0x224>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80014a8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b0:	61da      	str	r2, [r3, #28]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	9b00      	ldr	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b77      	ldr	r3, [pc, #476]	; (800169c <HAL_RCC_OscConfig+0x2cc>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	05d1      	lsls	r1, r2, #23
 80014c2:	f140 80bf 	bpl.w	8001644 <HAL_RCC_OscConfig+0x274>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c6:	68e3      	ldr	r3, [r4, #12]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f000 8114 	beq.w	80016f6 <HAL_RCC_OscConfig+0x326>
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80cd 	beq.w	800166e <HAL_RCC_OscConfig+0x29e>
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	f000 814f 	beq.w	800177c <HAL_RCC_OscConfig+0x3ac>
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	621a      	str	r2, [r3, #32]
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	f022 0204 	bic.w	r2, r2, #4
 80014ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fc92 	bl	8000e14 <HAL_GetTick>

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	4e68      	ldr	r6, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 80014f2:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	e006      	b.n	8001508 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff fc8b 	bl	8000e14 <HAL_GetTick>
 80014fe:	eba0 0008 	sub.w	r0, r0, r8
 8001502:	42b8      	cmp	r0, r7
 8001504:	f200 80af 	bhi.w	8001666 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	6a33      	ldr	r3, [r6, #32]
 800150a:	079b      	lsls	r3, r3, #30
 800150c:	d5f5      	bpl.n	80014fa <HAL_RCC_OscConfig+0x12a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800150e:	2d00      	cmp	r5, #0
 8001510:	f040 80f7 	bne.w	8001702 <HAL_RCC_OscConfig+0x332>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001514:	69e3      	ldr	r3, [r4, #28]
 8001516:	b1d3      	cbz	r3, 800154e <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001518:	4d5e      	ldr	r5, [pc, #376]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 800151a:	686a      	ldr	r2, [r5, #4]
 800151c:	f002 020c 	and.w	r2, r2, #12
 8001520:	2a08      	cmp	r2, #8
 8001522:	d045      	beq.n	80015b0 <HAL_RCC_OscConfig+0x1e0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001524:	2b02      	cmp	r3, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x2d0>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	f000 80ef 	beq.w	800170e <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fc6f 	bl	8000e14 <HAL_GetTick>

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001538:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153a:	e005      	b.n	8001548 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fc6a 	bl	8000e14 <HAL_GetTick>
 8001540:	1b40      	subs	r0, r0, r5
 8001542:	2802      	cmp	r0, #2
 8001544:	f200 808f 	bhi.w	8001666 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	019b      	lsls	r3, r3, #6
 800154c:	d4f6      	bmi.n	800153c <HAL_RCC_OscConfig+0x16c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800154e:	2000      	movs	r0, #0
}
 8001550:	b002      	add	sp, #8
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d02d      	beq.n	80015b8 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_LSI_ENABLE();
 800155c:	2201      	movs	r2, #1
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001560:	4d4c      	ldr	r5, [pc, #304]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 8001562:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001564:	f7ff fc56 	bl	8000e14 <HAL_GetTick>
 8001568:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	e004      	b.n	8001576 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fc52 	bl	8000e14 <HAL_GetTick>
 8001570:	1b80      	subs	r0, r0, r6
 8001572:	2802      	cmp	r0, #2
 8001574:	d877      	bhi.n	8001666 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001578:	079b      	lsls	r3, r3, #30
 800157a:	d5f7      	bpl.n	800156c <HAL_RCC_OscConfig+0x19c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_OscConfig+0x2d8>)
 800157e:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_RCC_OscConfig+0x2dc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a5b      	lsrs	r3, r3, #9
 8001588:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800158a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800158c:	9b01      	ldr	r3, [sp, #4]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	9201      	str	r2, [sp, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f9      	bne.n	800158a <HAL_RCC_OscConfig+0x1ba>
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	e77f      	b.n	800149a <HAL_RCC_OscConfig+0xca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800159a:	6852      	ldr	r2, [r2, #4]
 800159c:	03d6      	lsls	r6, r2, #15
 800159e:	f53f af5d 	bmi.w	800145c <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4a3c      	ldr	r2, [pc, #240]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	0795      	lsls	r5, r2, #30
 80015a8:	d526      	bpl.n	80015f8 <HAL_RCC_OscConfig+0x228>
 80015aa:	6922      	ldr	r2, [r4, #16]
 80015ac:	2a01      	cmp	r2, #1
 80015ae:	d023      	beq.n	80015f8 <HAL_RCC_OscConfig+0x228>
        return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
}
 80015b2:	b002      	add	sp, #8
 80015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	4d36      	ldr	r5, [pc, #216]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 80015bc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015be:	f7ff fc29 	bl	8000e14 <HAL_GetTick>
 80015c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e004      	b.n	80015d0 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc25 	bl	8000e14 <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d84a      	bhi.n	8001666 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015d2:	079f      	lsls	r7, r3, #30
 80015d4:	d4f7      	bmi.n	80015c6 <HAL_RCC_OscConfig+0x1f6>
 80015d6:	e7de      	b.n	8001596 <HAL_RCC_OscConfig+0x1c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d8:	684a      	ldr	r2, [r1, #4]
 80015da:	03d0      	lsls	r0, r2, #15
 80015dc:	f57f af0c 	bpl.w	80013f8 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4a2c      	ldr	r2, [pc, #176]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	0391      	lsls	r1, r2, #14
 80015e6:	f57f af2b 	bpl.w	8001440 <HAL_RCC_OscConfig+0x70>
 80015ea:	6862      	ldr	r2, [r4, #4]
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	f47f af27 	bne.w	8001440 <HAL_RCC_OscConfig+0x70>
 80015f2:	e7dd      	b.n	80015b0 <HAL_RCC_OscConfig+0x1e0>
    FlagStatus       pwrclkchanged = RESET;
 80015f4:	2500      	movs	r5, #0
 80015f6:	e761      	b.n	80014bc <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4926      	ldr	r1, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x2c4>)
 80015fa:	6960      	ldr	r0, [r4, #20]
 80015fc:	680a      	ldr	r2, [r1, #0]
 80015fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001602:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001606:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	071a      	lsls	r2, r3, #28
 800160a:	f57f af46 	bpl.w	800149a <HAL_RCC_OscConfig+0xca>
 800160e:	e7a2      	b.n	8001556 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001614:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001618:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001628:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800162a:	f7ff fbf3 	bl	8000e14 <HAL_GetTick>
 800162e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001630:	e004      	b.n	800163c <HAL_RCC_OscConfig+0x26c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001632:	f7ff fbef 	bl	8000e14 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	2864      	cmp	r0, #100	; 0x64
 800163a:	d814      	bhi.n	8001666 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	039b      	lsls	r3, r3, #14
 8001640:	d4f7      	bmi.n	8001632 <HAL_RCC_OscConfig+0x262>
 8001642:	e6fc      	b.n	800143e <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001644:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800164c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800164e:	f7ff fbe1 	bl	8000e14 <HAL_GetTick>
 8001652:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	6833      	ldr	r3, [r6, #0]
 8001656:	05da      	lsls	r2, r3, #23
 8001658:	f53f af35 	bmi.w	80014c6 <HAL_RCC_OscConfig+0xf6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165c:	f7ff fbda 	bl	8000e14 <HAL_GetTick>
 8001660:	1bc0      	subs	r0, r0, r7
 8001662:	2864      	cmp	r0, #100	; 0x64
 8001664:	d9f6      	bls.n	8001654 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
}
 8001668:	b002      	add	sp, #8
 800166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001672:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001676:	6a1a      	ldr	r2, [r3, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	621a      	str	r2, [r3, #32]
 8001680:	6a1a      	ldr	r2, [r3, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800168c:	f7ff fbc2 	bl	8000e14 <HAL_GetTick>
 8001690:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	e012      	b.n	80016ba <HAL_RCC_OscConfig+0x2ea>
 8001694:	40021000 	.word	0x40021000
 8001698:	42420000 	.word	0x42420000
 800169c:	40007000 	.word	0x40007000
 80016a0:	42420060 	.word	0x42420060
 80016a4:	42420480 	.word	0x42420480
 80016a8:	20000008 	.word	0x20000008
 80016ac:	10624dd3 	.word	0x10624dd3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fbb0 	bl	8000e14 <HAL_GetTick>
 80016b4:	1bc0      	subs	r0, r0, r7
 80016b6:	4540      	cmp	r0, r8
 80016b8:	d8d5      	bhi.n	8001666 <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ba:	6a33      	ldr	r3, [r6, #32]
 80016bc:	0798      	lsls	r0, r3, #30
 80016be:	d4f7      	bmi.n	80016b0 <HAL_RCC_OscConfig+0x2e0>
    if(pwrclkchanged == SET)
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	f43f af27 	beq.w	8001514 <HAL_RCC_OscConfig+0x144>
 80016c6:	e01c      	b.n	8001702 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_DISABLE();
 80016c8:	4a34      	ldr	r2, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x3cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4d35      	ldr	r5, [pc, #212]	; (80017a0 <HAL_RCC_OscConfig+0x3d0>)
        __HAL_RCC_HSI_DISABLE();
 80016cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016ce:	f7ff fba1 	bl	8000e14 <HAL_GetTick>
 80016d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d4:	e004      	b.n	80016e0 <HAL_RCC_OscConfig+0x310>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb9d 	bl	8000e14 <HAL_GetTick>
 80016da:	1b80      	subs	r0, r0, r6
 80016dc:	2802      	cmp	r0, #2
 80016de:	d8c2      	bhi.n	8001666 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	0799      	lsls	r1, r3, #30
 80016e4:	d4f7      	bmi.n	80016d6 <HAL_RCC_OscConfig+0x306>
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	e6d5      	b.n	8001496 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ea:	4a2d      	ldr	r2, [pc, #180]	; (80017a0 <HAL_RCC_OscConfig+0x3d0>)
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e695      	b.n	8001422 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f6:	4a2a      	ldr	r2, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x3d0>)
 80016f8:	6a13      	ldr	r3, [r2, #32]
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e6f4      	b.n	80014ec <HAL_RCC_OscConfig+0x11c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x3d0>)
 8001704:	69d3      	ldr	r3, [r2, #28]
 8001706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170a:	61d3      	str	r3, [r2, #28]
 800170c:	e702      	b.n	8001514 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_PLL_DISABLE();
 800170e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001710:	f7ff fb80 	bl	8000e14 <HAL_GetTick>
 8001714:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e004      	b.n	8001722 <HAL_RCC_OscConfig+0x352>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fb7c 	bl	8000e14 <HAL_GetTick>
 800171c:	1b80      	subs	r0, r0, r6
 800171e:	2802      	cmp	r0, #2
 8001720:	d8a1      	bhi.n	8001666 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	0199      	lsls	r1, r3, #6
 8001726:	d4f7      	bmi.n	8001718 <HAL_RCC_OscConfig+0x348>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001728:	6a22      	ldr	r2, [r4, #32]
 800172a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800172e:	d02d      	beq.n	800178c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_PLL_ENABLE();
 8001730:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x3d0>)
 8001734:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	4302      	orrs	r2, r0
 800173a:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001744:	6005      	str	r5, [r0, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001746:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8001748:	f7ff fb64 	bl	8000e14 <HAL_GetTick>
 800174c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174e:	e004      	b.n	800175a <HAL_RCC_OscConfig+0x38a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff fb60 	bl	8000e14 <HAL_GetTick>
 8001754:	1b40      	subs	r0, r0, r5
 8001756:	2802      	cmp	r0, #2
 8001758:	d885      	bhi.n	8001666 <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	019a      	lsls	r2, r3, #6
 800175e:	d5f7      	bpl.n	8001750 <HAL_RCC_OscConfig+0x380>
 8001760:	e6f5      	b.n	800154e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001766:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e652      	b.n	8001422 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	f042 0204 	orr.w	r2, r2, #4
 8001780:	621a      	str	r2, [r3, #32]
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	621a      	str	r2, [r3, #32]
 800178a:	e6af      	b.n	80014ec <HAL_RCC_OscConfig+0x11c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178c:	686b      	ldr	r3, [r5, #4]
 800178e:	68a1      	ldr	r1, [r4, #8]
 8001790:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001794:	430b      	orrs	r3, r1
 8001796:	606b      	str	r3, [r5, #4]
 8001798:	e7ca      	b.n	8001730 <HAL_RCC_OscConfig+0x360>
 800179a:	bf00      	nop
 800179c:	42420000 	.word	0x42420000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	42420060 	.word	0x42420060

080017a8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017a8:	4a6c      	ldr	r2, [pc, #432]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	428b      	cmp	r3, r1
 80017b2:	d20b      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b4:	6813      	ldr	r3, [r2, #0]
 80017b6:	f023 0307 	bic.w	r3, r3, #7
 80017ba:	430b      	orrs	r3, r1
 80017bc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017be:	6813      	ldr	r3, [r2, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4299      	cmp	r1, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
}
 80017ca:	4770      	bx	lr
{
 80017cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	6803      	ldr	r3, [r0, #0]
{
 80017d2:	b086      	sub	sp, #24
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	079d      	lsls	r5, r3, #30
 80017d6:	d514      	bpl.n	8001802 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	075c      	lsls	r4, r3, #29
 80017da:	d504      	bpl.n	80017e6 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017dc:	4c60      	ldr	r4, [pc, #384]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	6862      	ldr	r2, [r4, #4]
 80017e0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017e4:	6062      	str	r2, [r4, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	071a      	lsls	r2, r3, #28
 80017e8:	d504      	bpl.n	80017f4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ea:	4c5d      	ldr	r4, [pc, #372]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	6862      	ldr	r2, [r4, #4]
 80017ee:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80017f2:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4c5a      	ldr	r4, [pc, #360]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	6885      	ldr	r5, [r0, #8]
 80017f8:	6862      	ldr	r2, [r4, #4]
 80017fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017fe:	432a      	orrs	r2, r5
 8001800:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	07db      	lsls	r3, r3, #31
 8001804:	4606      	mov	r6, r0
 8001806:	460c      	mov	r4, r1
 8001808:	d524      	bpl.n	8001854 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180c:	4b54      	ldr	r3, [pc, #336]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001810:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	f000 8092 	beq.w	800193a <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	2a02      	cmp	r2, #2
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	0798      	lsls	r0, r3, #30
 800181e:	d529      	bpl.n	8001874 <HAL_RCC_ClockConfig+0xcc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4d4f      	ldr	r5, [pc, #316]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001822:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	686b      	ldr	r3, [r5, #4]
 8001828:	f023 0303 	bic.w	r3, r3, #3
 800182c:	4313      	orrs	r3, r2
 800182e:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001830:	f7ff faf0 	bl	8000e14 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001834:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001836:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001838:	2b01      	cmp	r3, #1
 800183a:	d065      	beq.n	8001908 <HAL_RCC_ClockConfig+0x160>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183c:	2b02      	cmp	r3, #2
 800183e:	d105      	bne.n	800184c <HAL_RCC_ClockConfig+0xa4>
 8001840:	e06d      	b.n	800191e <HAL_RCC_ClockConfig+0x176>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff fae7 	bl	8000e14 <HAL_GetTick>
 8001846:	1bc0      	subs	r0, r0, r7
 8001848:	4540      	cmp	r0, r8
 800184a:	d872      	bhi.n	8001932 <HAL_RCC_ClockConfig+0x18a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800184c:	686b      	ldr	r3, [r5, #4]
 800184e:	f013 0f0c 	tst.w	r3, #12
 8001852:	d1f6      	bne.n	8001842 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001854:	4a41      	ldr	r2, [pc, #260]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	429c      	cmp	r4, r3
 800185e:	d20d      	bcs.n	800187c <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	f023 0307 	bic.w	r3, r3, #7
 8001866:	4323      	orrs	r3, r4
 8001868:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	429c      	cmp	r4, r3
 8001872:	d003      	beq.n	800187c <HAL_RCC_ClockConfig+0xd4>
      return HAL_ERROR;
 8001874:	2001      	movs	r0, #1
}
 8001876:	b006      	add	sp, #24
 8001878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	6833      	ldr	r3, [r6, #0]
 800187e:	0759      	lsls	r1, r3, #29
 8001880:	d506      	bpl.n	8001890 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001882:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	68f0      	ldr	r0, [r6, #12]
 8001886:	684a      	ldr	r2, [r1, #4]
 8001888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800188c:	4302      	orrs	r2, r0
 800188e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	071a      	lsls	r2, r3, #28
 8001892:	d507      	bpl.n	80018a4 <HAL_RCC_ClockConfig+0xfc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001894:	4a32      	ldr	r2, [pc, #200]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	6931      	ldr	r1, [r6, #16]
 8001898:	6853      	ldr	r3, [r2, #4]
 800189a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800189e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018a2:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018a4:	2601      	movs	r6, #1
 80018a6:	2502      	movs	r5, #2
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	af06      	add	r7, sp, #24
 80018ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ae:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80018b2:	4c2b      	ldr	r4, [pc, #172]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018b4:	f88d 6004 	strb.w	r6, [sp, #4]
 80018b8:	f88d 5005 	strb.w	r5, [sp, #5]
  tmpreg = RCC->CFGR;
 80018bc:	6862      	ldr	r2, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80018be:	f002 030c 	and.w	r3, r2, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d10a      	bne.n	80018dc <HAL_RCC_ClockConfig+0x134>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c6:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80018ca:	443b      	add	r3, r7
 80018cc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d0:	03d3      	lsls	r3, r2, #15
 80018d2:	d436      	bmi.n	8001942 <HAL_RCC_ClockConfig+0x19a>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80018d6:	fb03 f301 	mul.w	r3, r3, r1
 80018da:	e000      	b.n	80018de <HAL_RCC_ClockConfig+0x136>
      sysclockfreq = HSE_VALUE;
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018de:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	4823      	ldr	r0, [pc, #140]	; (8001970 <HAL_RCC_ClockConfig+0x1c8>)
 80018e2:	6852      	ldr	r2, [r2, #4]
 80018e4:	4923      	ldr	r1, [pc, #140]	; (8001974 <HAL_RCC_ClockConfig+0x1cc>)
 80018e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80018ea:	5c82      	ldrb	r2, [r0, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018ec:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	40d3      	lsrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018f2:	f7ff fa4d 	bl	8000d90 <HAL_InitTick>
  return HAL_OK;
 80018f6:	2000      	movs	r0, #0
}
 80018f8:	b006      	add	sp, #24
 80018fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f7ff fa89 	bl	8000e14 <HAL_GetTick>
 8001902:	1bc0      	subs	r0, r0, r7
 8001904:	4540      	cmp	r0, r8
 8001906:	d814      	bhi.n	8001932 <HAL_RCC_ClockConfig+0x18a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001908:	686b      	ldr	r3, [r5, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b04      	cmp	r3, #4
 8001910:	d1f5      	bne.n	80018fe <HAL_RCC_ClockConfig+0x156>
 8001912:	e79f      	b.n	8001854 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff fa7e 	bl	8000e14 <HAL_GetTick>
 8001918:	1bc0      	subs	r0, r0, r7
 800191a:	4540      	cmp	r0, r8
 800191c:	d809      	bhi.n	8001932 <HAL_RCC_ClockConfig+0x18a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191e:	686b      	ldr	r3, [r5, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d1f5      	bne.n	8001914 <HAL_RCC_ClockConfig+0x16c>
 8001928:	e794      	b.n	8001854 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	019d      	lsls	r5, r3, #6
 800192c:	f53f af78 	bmi.w	8001820 <HAL_RCC_ClockConfig+0x78>
 8001930:	e7a0      	b.n	8001874 <HAL_RCC_ClockConfig+0xcc>
          return HAL_TIMEOUT;
 8001932:	2003      	movs	r0, #3
}
 8001934:	b006      	add	sp, #24
 8001936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	039f      	lsls	r7, r3, #14
 800193c:	f53f af70 	bmi.w	8001820 <HAL_RCC_ClockConfig+0x78>
 8001940:	e798      	b.n	8001874 <HAL_RCC_ClockConfig+0xcc>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001942:	6862      	ldr	r2, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c4>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001946:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194a:	fb03 f301 	mul.w	r3, r3, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194e:	443a      	add	r2, r7
 8001950:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001954:	fbb3 f3f2 	udiv	r3, r3, r2
 8001958:	e7c1      	b.n	80018de <HAL_RCC_ClockConfig+0x136>
 800195a:	bf00      	nop
 800195c:	40022000 	.word	0x40022000
 8001960:	40021000 	.word	0x40021000
 8001964:	080057c8 	.word	0x080057c8
 8001968:	003d0900 	.word	0x003d0900
 800196c:	007a1200 	.word	0x007a1200
 8001970:	0800586c 	.word	0x0800586c
 8001974:	20000008 	.word	0x20000008

08001978 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_RCC_GetPCLK1Freq+0x14>)
 800197a:	4905      	ldr	r1, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x18>)
 800197c:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001980:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	6810      	ldr	r0, [r2, #0]
}    
 8001988:	40d8      	lsrs	r0, r3
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000
 8001990:	0800587c 	.word	0x0800587c
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x14>)
 800199a:	4905      	ldr	r1, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800199c:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	6810      	ldr	r0, [r2, #0]
} 
 80019a8:	40d8      	lsrs	r0, r3
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	0800587c 	.word	0x0800587c
 80019b4:	20000008 	.word	0x20000008

080019b8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019bc:	4682      	mov	sl, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019be:	6804      	ldr	r4, [r0, #0]
 80019c0:	68c1      	ldr	r1, [r0, #12]
 80019c2:	6922      	ldr	r2, [r4, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019c4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019ca:	430a      	orrs	r2, r1
 80019cc:	6122      	str	r2, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80019ce:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019d0:	6900      	ldr	r0, [r0, #16]
 80019d2:	f8da 1014 	ldr.w	r1, [sl, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80019d6:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019da:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80019dc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019e0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60e3      	str	r3, [r4, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e6:	6963      	ldr	r3, [r4, #20]
 80019e8:	f8da 1018 	ldr.w	r1, [sl, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80019ec:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <UART_SetConfig+0x17c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f2:	430b      	orrs	r3, r1
  if(huart->Instance == USART1)
 80019f4:	4294      	cmp	r4, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019f6:	6163      	str	r3, [r4, #20]
  if(huart->Instance == USART1)
 80019f8:	d059      	beq.n	8001aae <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019fa:	f7ff ffbd 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 80019fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a10:	4f49      	ldr	r7, [pc, #292]	; (8001b38 <UART_SetConfig+0x180>)
 8001a12:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a16:	fba7 2303 	umull	r2, r3, r7, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	011d      	lsls	r5, r3, #4
 8001a1e:	f7ff ffab 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8001a22:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a2a:	0093      	lsls	r3, r2, #2
 8001a2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a30:	fbb0 f6f3 	udiv	r6, r0, r3
 8001a34:	f7ff ffa0 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8001a38:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a40:	0093      	lsls	r3, r2, #2
 8001a42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4a:	fba7 2303 	umull	r2, r3, r7, r3
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	fb08 6313 	mls	r3, r8, r3, r6
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	3332      	adds	r3, #50	; 0x32
 8001a58:	fba7 2303 	umull	r2, r3, r7, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001a62:	f7ff ff89 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8001a66:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a72:	0093      	lsls	r3, r2, #2
 8001a74:	fbb0 f9f3 	udiv	r9, r0, r3
 8001a78:	f7ff ff7e 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8001a7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001a80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	fba7 2303 	umull	r2, r3, r7, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	fb08 9313 	mls	r3, r8, r3, r9
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	3332      	adds	r3, #50	; 0x32
 8001a9c:	fba7 2303 	umull	r2, r3, r7, r3
 8001aa0:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001aa4:	4333      	orrs	r3, r6
 8001aa6:	442b      	add	r3, r5
 8001aa8:	60a3      	str	r3, [r4, #8]
 8001aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001aae:	f7ff ff73 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001ab2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001ab6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac4:	4f1c      	ldr	r7, [pc, #112]	; (8001b38 <UART_SetConfig+0x180>)
 8001ac6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001aca:	fba7 2303 	umull	r2, r3, r7, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	011d      	lsls	r5, r3, #4
 8001ad2:	f7ff ff61 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001ad6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001ada:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ade:	0093      	lsls	r3, r2, #2
 8001ae0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ae4:	fbb0 f6f3 	udiv	r6, r0, r3
 8001ae8:	f7ff ff56 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001aec:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001af0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af4:	0093      	lsls	r3, r2, #2
 8001af6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	fba7 2303 	umull	r2, r3, r7, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	fb08 6313 	mls	r3, r8, r3, r6
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	3332      	adds	r3, #50	; 0x32
 8001b0c:	fba7 2303 	umull	r2, r3, r7, r3
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001b16:	f7ff ff3f 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001b1a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001b1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b22:	0093      	lsls	r3, r2, #2
 8001b24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b28:	fbb0 f9f3 	udiv	r9, r0, r3
 8001b2c:	f7ff ff34 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001b30:	e7a4      	b.n	8001a7c <UART_SetConfig+0xc4>
 8001b32:	bf00      	nop
 8001b34:	40013800 	.word	0x40013800
 8001b38:	51eb851f 	.word	0x51eb851f

08001b3c <HAL_UART_Init>:
  if(huart == NULL)
 8001b3c:	b360      	cbz	r0, 8001b98 <HAL_UART_Init+0x5c>
{
 8001b3e:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b40:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b44:	4604      	mov	r4, r0
 8001b46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b4a:	b303      	cbz	r3, 8001b8e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b4c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b4e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b54:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b56:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b5c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b5e:	f7ff ff2b 	bl	80019b8 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	2500      	movs	r5, #0
  huart->gState= HAL_UART_STATE_READY;
 8001b64:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b66:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8001b68:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b78:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b80:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b82:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b84:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b88:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b8c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b8e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b92:	f000 fe5d 	bl	8002850 <HAL_UART_MspInit>
 8001b96:	e7d9      	b.n	8001b4c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8001b98:	2001      	movs	r0, #1
 8001b9a:	4770      	bx	lr

08001b9c <HAL_UART_Transmit>:
{
 8001b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba0:	4605      	mov	r5, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001ba2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
{
 8001ba6:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 8001ba8:	2820      	cmp	r0, #32
 8001baa:	d003      	beq.n	8001bb4 <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 8001bac:	2002      	movs	r0, #2
}
 8001bae:	b002      	add	sp, #8
 8001bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bb4:	460f      	mov	r7, r1
    if((pData == NULL) || (Size == 0U))
 8001bb6:	b359      	cbz	r1, 8001c10 <HAL_UART_Transmit+0x74>
 8001bb8:	b352      	cbz	r2, 8001c10 <HAL_UART_Transmit+0x74>
 8001bba:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8001bbc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d0f3      	beq.n	8001bac <HAL_UART_Transmit+0x10>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc4:	2000      	movs	r0, #0
    __HAL_LOCK(huart);
 8001bc6:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bca:	63e8      	str	r0, [r5, #60]	; 0x3c
    __HAL_LOCK(huart);
 8001bcc:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bd0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 8001bd4:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8001bd6:	f7ff f91d 	bl	8000e14 <HAL_GetTick>
 8001bda:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001bdc:	9a01      	ldr	r2, [sp, #4]
 8001bde:	682c      	ldr	r4, [r5, #0]
 8001be0:	84aa      	strh	r2, [r5, #36]	; 0x24
    huart->TxXferCount = Size;
 8001be2:	84ea      	strh	r2, [r5, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001be4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d03a      	beq.n	8001c62 <HAL_UART_Transmit+0xc6>
      huart->TxXferCount--;
 8001bec:	8cea      	ldrh	r2, [r5, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bee:	68a9      	ldr	r1, [r5, #8]
      huart->TxXferCount--;
 8001bf0:	3a01      	subs	r2, #1
 8001bf2:	b292      	uxth	r2, r2
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bf4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8001bf8:	84ea      	strh	r2, [r5, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bfa:	d017      	beq.n	8001c2c <HAL_UART_Transmit+0x90>
 8001bfc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001c00:	d13d      	bne.n	8001c7e <HAL_UART_Transmit+0xe2>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	0610      	lsls	r0, r2, #24
 8001c06:	d5fc      	bpl.n	8001c02 <HAL_UART_Transmit+0x66>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c08:	783b      	ldrb	r3, [r7, #0]
 8001c0a:	3701      	adds	r7, #1
 8001c0c:	6063      	str	r3, [r4, #4]
 8001c0e:	e7e9      	b.n	8001be4 <HAL_UART_Transmit+0x48>
      return  HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
 8001c12:	e7cc      	b.n	8001bae <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	061b      	lsls	r3, r3, #24
 8001c18:	d40e      	bmi.n	8001c38 <HAL_UART_Transmit+0x9c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c1a:	f1b8 0f00 	cmp.w	r8, #0
 8001c1e:	d03a      	beq.n	8001c96 <HAL_UART_Transmit+0xfa>
 8001c20:	f7ff f8f8 	bl	8000e14 <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	4580      	cmp	r8, r0
 8001c28:	682c      	ldr	r4, [r5, #0]
 8001c2a:	d334      	bcc.n	8001c96 <HAL_UART_Transmit+0xfa>
 8001c2c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001c30:	d1f0      	bne.n	8001c14 <HAL_UART_Transmit+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	0612      	lsls	r2, r2, #24
 8001c36:	d5fc      	bpl.n	8001c32 <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c38:	883b      	ldrh	r3, [r7, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c3a:	692a      	ldr	r2, [r5, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c40:	6063      	str	r3, [r4, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d139      	bne.n	8001cba <HAL_UART_Transmit+0x11e>
          pData +=2U;
 8001c46:	3702      	adds	r7, #2
 8001c48:	e7cc      	b.n	8001be4 <HAL_UART_Transmit+0x48>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	065b      	lsls	r3, r3, #25
 8001c4e:	d40e      	bmi.n	8001c6e <HAL_UART_Transmit+0xd2>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c50:	f1b8 0f00 	cmp.w	r8, #0
 8001c54:	d01f      	beq.n	8001c96 <HAL_UART_Transmit+0xfa>
 8001c56:	f7ff f8dd 	bl	8000e14 <HAL_GetTick>
 8001c5a:	1b80      	subs	r0, r0, r6
 8001c5c:	4580      	cmp	r8, r0
 8001c5e:	682c      	ldr	r4, [r5, #0]
 8001c60:	d319      	bcc.n	8001c96 <HAL_UART_Transmit+0xfa>
 8001c62:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001c66:	d1f0      	bne.n	8001c4a <HAL_UART_Transmit+0xae>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	065a      	lsls	r2, r3, #25
 8001c6c:	d5fc      	bpl.n	8001c68 <HAL_UART_Transmit+0xcc>
    __HAL_UNLOCK(huart);
 8001c6e:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 8001c70:	2220      	movs	r2, #32
    return HAL_OK;
 8001c72:	4618      	mov	r0, r3
    __HAL_UNLOCK(huart);
 8001c74:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001c78:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    return HAL_OK;
 8001c7c:	e797      	b.n	8001bae <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	0619      	lsls	r1, r3, #24
 8001c82:	d4c1      	bmi.n	8001c08 <HAL_UART_Transmit+0x6c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c84:	f1b8 0f00 	cmp.w	r8, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_UART_Transmit+0xfa>
 8001c8a:	f7ff f8c3 	bl	8000e14 <HAL_GetTick>
 8001c8e:	1b80      	subs	r0, r0, r6
 8001c90:	4580      	cmp	r8, r0
 8001c92:	682c      	ldr	r4, [r5, #0]
 8001c94:	d2b2      	bcs.n	8001bfc <HAL_UART_Transmit+0x60>
        huart->gState  = HAL_UART_STATE_READY;
 8001c96:	2220      	movs	r2, #32
        __HAL_UNLOCK(huart);
 8001c98:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c9a:	68e3      	ldr	r3, [r4, #12]
      return HAL_TIMEOUT;
 8001c9c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ca2:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca4:	6963      	ldr	r3, [r4, #20]
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	6163      	str	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001cac:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8001cb0:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8001cb4:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
 8001cb8:	e779      	b.n	8001bae <HAL_UART_Transmit+0x12>
          pData +=1U;
 8001cba:	3701      	adds	r7, #1
 8001cbc:	e792      	b.n	8001be4 <HAL_UART_Transmit+0x48>
 8001cbe:	bf00      	nop

08001cc0 <HAL_UART_Receive_DMA>:
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001cc2:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 8001cc6:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001cc8:	2c20      	cmp	r4, #32
 8001cca:	d002      	beq.n	8001cd2 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8001ccc:	2002      	movs	r0, #2
}
 8001cce:	b003      	add	sp, #12
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL) || (Size == 0U))
 8001cd2:	2900      	cmp	r1, #0
 8001cd4:	d035      	beq.n	8001d42 <HAL_UART_Receive_DMA+0x82>
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d033      	beq.n	8001d42 <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 8001cda:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d0f4      	beq.n	8001ccc <HAL_UART_Receive_DMA+0xc>
 8001ce2:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 8001ce8:	2701      	movs	r7, #1
 8001cea:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cec:	2622      	movs	r6, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001cee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001cf0:	4915      	ldr	r1, [pc, #84]	; (8001d48 <HAL_UART_Receive_DMA+0x88>)
    huart->pRxBuffPtr = pData;
 8001cf2:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001cf4:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf6:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8001cf8:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cfc:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d00:	4f12      	ldr	r7, [pc, #72]	; (8001d4c <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001d02:	6281      	str	r1, [r0, #40]	; 0x28
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d04:	4e12      	ldr	r6, [pc, #72]	; (8001d50 <HAL_UART_Receive_DMA+0x90>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001d06:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8001d08:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d0a:	62c7      	str	r7, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d0c:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001d0e:	3104      	adds	r1, #4
 8001d10:	f7ff f938 	bl	8000f84 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	9501      	str	r5, [sp, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
    return HAL_OK;
 8001d1a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d1c:	9201      	str	r2, [sp, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8001d20:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d24:	9201      	str	r2, [sp, #4]
 8001d26:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d2e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3e:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001d40:	e7c5      	b.n	8001cce <HAL_UART_Receive_DMA+0xe>
      return HAL_ERROR;
 8001d42:	2001      	movs	r0, #1
 8001d44:	e7c3      	b.n	8001cce <HAL_UART_Receive_DMA+0xe>
 8001d46:	bf00      	nop
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001e21 	.word	0x08001e21
 8001d50:	08001e31 	.word	0x08001e31

08001d54 <HAL_UART_TxCpltCallback>:
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <HAL_UART_RxCpltCallback>:
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <UART_DMAReceiveCplt>:
{
 8001d5c:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d60:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f013 0320 	ands.w	r3, r3, #32
 8001d68:	d110      	bne.n	8001d8c <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 8001d6a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d6c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8001d6e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d70:	68d3      	ldr	r3, [r2, #12]
 8001d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d76:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d78:	6953      	ldr	r3, [r2, #20]
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d80:	6953      	ldr	r3, [r2, #20]
 8001d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d86:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001d88:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001d8c:	f7ff ffe4 	bl	8001d58 <HAL_UART_RxCpltCallback>
 8001d90:	bd08      	pop	{r3, pc}
 8001d92:	bf00      	nop

08001d94 <UART_Receive_IT.part.1>:
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d94:	6883      	ldr	r3, [r0, #8]
 8001d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9a:	d02c      	beq.n	8001df6 <UART_Receive_IT.part.1+0x62>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d9c:	6903      	ldr	r3, [r0, #16]
 8001d9e:	b173      	cbz	r3, 8001dbe <UART_Receive_IT.part.1+0x2a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001da0:	6803      	ldr	r3, [r0, #0]
 8001da2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	1c51      	adds	r1, r2, #1
 8001da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dac:	6281      	str	r1, [r0, #40]	; 0x28
 8001dae:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8001db0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001db8:	b143      	cbz	r3, 8001dcc <UART_Receive_IT.part.1+0x38>
}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	4770      	bx	lr
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dbe:	6802      	ldr	r2, [r0, #0]
 8001dc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dc2:	6852      	ldr	r2, [r2, #4]
 8001dc4:	1c59      	adds	r1, r3, #1
 8001dc6:	6281      	str	r1, [r0, #40]	; 0x28
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e7f1      	b.n	8001db0 <UART_Receive_IT.part.1+0x1c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001dcc:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8001dce:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001dd0:	6802      	ldr	r2, [r0, #0]
 8001dd2:	68d1      	ldr	r1, [r2, #12]
 8001dd4:	f021 0120 	bic.w	r1, r1, #32
 8001dd8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001dda:	68d1      	ldr	r1, [r2, #12]
 8001ddc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001de0:	60d1      	str	r1, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001de2:	6951      	ldr	r1, [r2, #20]
 8001de4:	f021 0101 	bic.w	r1, r1, #1
 8001de8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001dea:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001dee:	f7ff ffb3 	bl	8001d58 <HAL_UART_RxCpltCallback>
}
 8001df2:	2000      	movs	r0, #0
 8001df4:	bd10      	pop	{r4, pc}
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001df6:	6902      	ldr	r2, [r0, #16]
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001df8:	6a83      	ldr	r3, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001dfa:	b93a      	cbnz	r2, 8001e0c <UART_Receive_IT.part.1+0x78>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001dfc:	6802      	ldr	r2, [r0, #0]
 8001dfe:	6852      	ldr	r2, [r2, #4]
 8001e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e04:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8001e08:	6283      	str	r3, [r0, #40]	; 0x28
 8001e0a:	e7d1      	b.n	8001db0 <UART_Receive_IT.part.1+0x1c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e0c:	6802      	ldr	r2, [r0, #0]
 8001e0e:	6852      	ldr	r2, [r2, #4]
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001e16:	6283      	str	r3, [r0, #40]	; 0x28
 8001e18:	e7ca      	b.n	8001db0 <UART_Receive_IT.part.1+0x1c>
 8001e1a:	bf00      	nop

08001e1c <HAL_UART_RxHalfCpltCallback>:
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop

08001e20 <UART_DMARxHalfCplt>:
{
 8001e20:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8001e22:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001e24:	f7ff fffa 	bl	8001e1c <HAL_UART_RxHalfCpltCallback>
 8001e28:	bd08      	pop	{r3, pc}
 8001e2a:	bf00      	nop

08001e2c <HAL_UART_ErrorCallback>:
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <UART_DMAError>:
{
 8001e30:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e32:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	6950      	ldr	r0, [r2, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e38:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8001e3c:	2921      	cmp	r1, #33	; 0x21
 8001e3e:	d01c      	beq.n	8001e7a <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001e40:	6950      	ldr	r0, [r2, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e42:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8001e46:	2922      	cmp	r1, #34	; 0x22
 8001e48:	d007      	beq.n	8001e5a <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001e4c:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e4e:	f042 0210 	orr.w	r2, r2, #16
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001e54:	f7ff ffea 	bl	8001e2c <HAL_UART_ErrorCallback>
 8001e58:	bd08      	pop	{r3, pc}
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e5a:	0641      	lsls	r1, r0, #25
 8001e5c:	d5f5      	bpl.n	8001e4a <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8001e5e:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001e60:	2020      	movs	r0, #32
    huart->RxXferCount = 0U;
 8001e62:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e64:	68d1      	ldr	r1, [r2, #12]
 8001e66:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001e6a:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6c:	6951      	ldr	r1, [r2, #20]
 8001e6e:	f021 0101 	bic.w	r1, r1, #1
 8001e72:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001e74:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8001e78:	e7e7      	b.n	8001e4a <UART_DMAError+0x1a>
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e7a:	0600      	lsls	r0, r0, #24
 8001e7c:	d5e0      	bpl.n	8001e40 <UART_DMAError+0x10>
    huart->TxXferCount = 0U;
 8001e7e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8001e80:	2020      	movs	r0, #32
    huart->TxXferCount = 0U;
 8001e82:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e84:	68d1      	ldr	r1, [r2, #12]
 8001e86:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001e8a:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e8c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 8001e90:	e7d6      	b.n	8001e40 <UART_DMAError+0x10>
 8001e92:	bf00      	nop

08001e94 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e94:	6803      	ldr	r3, [r0, #0]
{
 8001e96:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e98:	681a      	ldr	r2, [r3, #0]
{
 8001e9a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001e9c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e9e:	68dd      	ldr	r5, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ea0:	6959      	ldr	r1, [r3, #20]
  if(errorflags == RESET)
 8001ea2:	d04a      	beq.n	8001f3a <HAL_UART_IRQHandler+0xa6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ea4:	f011 0101 	ands.w	r1, r1, #1
 8001ea8:	d053      	beq.n	8001f52 <HAL_UART_IRQHandler+0xbe>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001eaa:	07d6      	lsls	r6, r2, #31
 8001eac:	d505      	bpl.n	8001eba <HAL_UART_IRQHandler+0x26>
 8001eae:	05e8      	lsls	r0, r5, #23
 8001eb0:	d503      	bpl.n	8001eba <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001eb4:	f040 0001 	orr.w	r0, r0, #1
 8001eb8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eba:	0756      	lsls	r6, r2, #29
 8001ebc:	d57b      	bpl.n	8001fb6 <HAL_UART_IRQHandler+0x122>
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	f000 8085 	beq.w	8001fce <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ec4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec6:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ec8:	f041 0102 	orr.w	r1, r1, #2
 8001ecc:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ece:	d577      	bpl.n	8001fc0 <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ed0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ed2:	f041 0104 	orr.w	r1, r1, #4
 8001ed6:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ed8:	0711      	lsls	r1, r2, #28
 8001eda:	d473      	bmi.n	8001fc4 <HAL_UART_IRQHandler+0x130>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001edc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ede:	2900      	cmp	r1, #0
 8001ee0:	d02a      	beq.n	8001f38 <HAL_UART_IRQHandler+0xa4>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee2:	0691      	lsls	r1, r2, #26
 8001ee4:	d505      	bpl.n	8001ef2 <HAL_UART_IRQHandler+0x5e>
 8001ee6:	06aa      	lsls	r2, r5, #26
 8001ee8:	d503      	bpl.n	8001ef2 <HAL_UART_IRQHandler+0x5e>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001eea:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001eee:	2a22      	cmp	r2, #34	; 0x22
 8001ef0:	d07d      	beq.n	8001fee <HAL_UART_IRQHandler+0x15a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef2:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ef4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ef6:	070e      	lsls	r6, r1, #28
 8001ef8:	d402      	bmi.n	8001f00 <HAL_UART_IRQHandler+0x6c>
 8001efa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001efe:	d07b      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x164>
  huart->RxState = HAL_UART_STATE_READY;
 8001f00:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001f12:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	0655      	lsls	r5, r2, #25
 8001f1a:	d55f      	bpl.n	8001fdc <HAL_UART_IRQHandler+0x148>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f1c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001f1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f24:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001f26:	2900      	cmp	r1, #0
 8001f28:	d058      	beq.n	8001fdc <HAL_UART_IRQHandler+0x148>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <HAL_UART_IRQHandler+0x188>)
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f2c:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f2e:	634b      	str	r3, [r1, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f30:	f7ff f86c 	bl	800100c <HAL_DMA_Abort_IT>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d155      	bne.n	8001fe4 <HAL_UART_IRQHandler+0x150>
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f3a:	0696      	lsls	r6, r2, #26
 8001f3c:	d50c      	bpl.n	8001f58 <HAL_UART_IRQHandler+0xc4>
 8001f3e:	06a9      	lsls	r1, r5, #26
 8001f40:	d50a      	bpl.n	8001f58 <HAL_UART_IRQHandler+0xc4>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001f42:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001f46:	2b22      	cmp	r3, #34	; 0x22
 8001f48:	d1f6      	bne.n	8001f38 <HAL_UART_IRQHandler+0xa4>
}
 8001f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f4e:	f7ff bf21 	b.w	8001d94 <UART_Receive_IT.part.1>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f52:	f415 7f90 	tst.w	r5, #288	; 0x120
 8001f56:	d1a8      	bne.n	8001eaa <HAL_UART_IRQHandler+0x16>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f58:	0610      	lsls	r0, r2, #24
 8001f5a:	d40e      	bmi.n	8001f7a <HAL_UART_IRQHandler+0xe6>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f5c:	0656      	lsls	r6, r2, #25
 8001f5e:	d5eb      	bpl.n	8001f38 <HAL_UART_IRQHandler+0xa4>
 8001f60:	066d      	lsls	r5, r5, #25
 8001f62:	d5e9      	bpl.n	8001f38 <HAL_UART_IRQHandler+0xa4>
  huart->gState = HAL_UART_STATE_READY;
 8001f64:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f66:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001f68:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f70:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001f74:	f7ff feee 	bl	8001d54 <HAL_UART_TxCpltCallback>
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f7a:	0629      	lsls	r1, r5, #24
 8001f7c:	d5ee      	bpl.n	8001f5c <HAL_UART_IRQHandler+0xc8>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f7e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f82:	2a21      	cmp	r2, #33	; 0x21
 8001f84:	d1d8      	bne.n	8001f38 <HAL_UART_IRQHandler+0xa4>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f86:	68a2      	ldr	r2, [r4, #8]
 8001f88:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001f8c:	6a22      	ldr	r2, [r4, #32]
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f8e:	d038      	beq.n	8002002 <HAL_UART_IRQHandler+0x16e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f90:	1c51      	adds	r1, r2, #1
 8001f92:	6221      	str	r1, [r4, #32]
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0U)
 8001f98:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f9a:	3a01      	subs	r2, #1
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	d1c9      	bne.n	8001f38 <HAL_UART_IRQHandler+0xa4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001faa:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fb6:	0796      	lsls	r6, r2, #30
 8001fb8:	d50b      	bpl.n	8001fd2 <HAL_UART_IRQHandler+0x13e>
 8001fba:	2900      	cmp	r1, #0
 8001fbc:	d188      	bne.n	8001ed0 <HAL_UART_IRQHandler+0x3c>
 8001fbe:	e78d      	b.n	8001edc <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fc0:	0711      	lsls	r1, r2, #28
 8001fc2:	d58b      	bpl.n	8001edc <HAL_UART_IRQHandler+0x48>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001fc6:	f041 0108 	orr.w	r1, r1, #8
 8001fca:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001fcc:	e786      	b.n	8001edc <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fce:	0790      	lsls	r0, r2, #30
 8001fd0:	d484      	bmi.n	8001edc <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fd2:	0710      	lsls	r0, r2, #28
 8001fd4:	d582      	bpl.n	8001edc <HAL_UART_IRQHandler+0x48>
 8001fd6:	2900      	cmp	r1, #0
 8001fd8:	d080      	beq.n	8001edc <HAL_UART_IRQHandler+0x48>
 8001fda:	e7f3      	b.n	8001fc4 <HAL_UART_IRQHandler+0x130>
            HAL_UART_ErrorCallback(huart);
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7ff ff25 	bl	8001e2c <HAL_UART_ErrorCallback>
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fe4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fec:	4718      	bx	r3
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff fed0 	bl	8001d94 <UART_Receive_IT.part.1>
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	e77c      	b.n	8001ef2 <HAL_UART_IRQHandler+0x5e>
        HAL_UART_ErrorCallback(huart);
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff ff17 	bl	8001e2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002000:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002002:	8811      	ldrh	r1, [r2, #0]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002004:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002006:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800200a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800200c:	b910      	cbnz	r0, 8002014 <HAL_UART_IRQHandler+0x180>
        huart->pTxBuffPtr += 2U;
 800200e:	3202      	adds	r2, #2
 8002010:	6222      	str	r2, [r4, #32]
 8002012:	e7c1      	b.n	8001f98 <HAL_UART_IRQHandler+0x104>
        huart->pTxBuffPtr += 1U;
 8002014:	3201      	adds	r2, #1
 8002016:	6222      	str	r2, [r4, #32]
 8002018:	e7be      	b.n	8001f98 <HAL_UART_IRQHandler+0x104>
 800201a:	bf00      	nop
 800201c:	08002021 	.word	0x08002021

08002020 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0x00U;
 8002020:	2200      	movs	r2, #0
{
 8002022:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002024:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002026:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8002028:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 800202a:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800202c:	f7ff fefe 	bl	8001e2c <HAL_UART_ErrorCallback>
 8002030:	bd08      	pop	{r3, pc}
 8002032:	bf00      	nop

08002034 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_DMA_Init+0x30>)
{
 8002036:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002038:	6958      	ldr	r0, [r3, #20]
{
 800203a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203c:	f040 0001 	orr.w	r0, r0, #1
 8002040:	6158      	str	r0, [r3, #20]
 8002042:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002044:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002046:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800204a:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800204c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800204e:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002050:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002052:	f7fe ff09 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002056:	200f      	movs	r0, #15
 8002058:	f7fe ff3c 	bl	8000ed4 <HAL_NVIC_EnableIRQ>

}
 800205c:	b003      	add	sp, #12
 800205e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000

08002068 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_GPIO_Init+0x2c>)
{
 800206a:	b082      	sub	sp, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	f042 0220 	orr.w	r2, r2, #32
 8002072:	619a      	str	r2, [r3, #24]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	f002 0220 	and.w	r2, r2, #32
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	f042 0204 	orr.w	r2, r2, #4
 8002084:	619a      	str	r2, [r3, #24]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	9b01      	ldr	r3, [sp, #4]

}
 8002090:	b002      	add	sp, #8
 8002092:	4770      	bx	lr
 8002094:	40021000 	.word	0x40021000

08002098 <BTN_Setting_Released>:
    {
    Nextion_Set_Text("b0", "Pressed");
    }
void BTN_Setting_Released()
    {
    Nextion_Set_Text("b0", "Released");
 8002098:	4901      	ldr	r1, [pc, #4]	; (80020a0 <BTN_Setting_Released+0x8>)
 800209a:	4802      	ldr	r0, [pc, #8]	; (80020a4 <BTN_Setting_Released+0xc>)
 800209c:	f000 ba6e 	b.w	800257c <Nextion_Set_Text>
 80020a0:	080057d8 	.word	0x080057d8
 80020a4:	080057e4 	.word	0x080057e4

080020a8 <Page_1_Touched>:
void Page_1_Touched()
    {
    //Nextion_Hide_Object("b0",true);

    uint32_t timeout = 0xFFFF;
    Page_RCV_Flag = 0;
 80020a8:	2300      	movs	r3, #0
    {
 80020aa:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 80020ac:	4c0d      	ldr	r4, [pc, #52]	; (80020e4 <Page_1_Touched+0x3c>)
 80020ae:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 80020b0:	f000 fae4 	bl	800267c <Nextion_Get_Current_Page>
 80020b4:	7823      	ldrb	r3, [r4, #0]
 80020b6:	b92b      	cbnz	r3, 80020c4 <Page_1_Touched+0x1c>
	    Nextion_Set_BCK_Colour("b0", 63488);
	    }
	}

    Nextion_Backlight_Brightness(50, 0);
    }
 80020b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(50, 0);
 80020bc:	2100      	movs	r1, #0
 80020be:	2032      	movs	r0, #50	; 0x32
 80020c0:	f000 bab4 	b.w	800262c <Nextion_Backlight_Brightness>
	if (Current_Page == 1)
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <Page_1_Touched+0x40>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d1f5      	bne.n	80020b8 <Page_1_Touched+0x10>
	    Nextion_Set_BCK_Colour("b0", 63488);
 80020cc:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80020d0:	4806      	ldr	r0, [pc, #24]	; (80020ec <Page_1_Touched+0x44>)
 80020d2:	f000 fa75 	bl	80025c0 <Nextion_Set_BCK_Colour>
    }
 80020d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(50, 0);
 80020da:	2100      	movs	r1, #0
 80020dc:	2032      	movs	r0, #50	; 0x32
 80020de:	f000 baa5 	b.w	800262c <Nextion_Backlight_Brightness>
 80020e2:	bf00      	nop
 80020e4:	200006a0 	.word	0x200006a0
 80020e8:	20000698 	.word	0x20000698
 80020ec:	080057e4 	.word	0x080057e4

080020f0 <Page_1_Released>:

void Page_1_Released()
    {
    //Nextion_Hide_Object("b0",false);
    uint32_t timeout = 0xFFFF;
    Page_RCV_Flag = 0;
 80020f0:	2300      	movs	r3, #0
    {
 80020f2:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 80020f4:	4c0d      	ldr	r4, [pc, #52]	; (800212c <Page_1_Released+0x3c>)
 80020f6:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 80020f8:	f000 fac0 	bl	800267c <Nextion_Get_Current_Page>
 80020fc:	7823      	ldrb	r3, [r4, #0]
 80020fe:	b92b      	cbnz	r3, 800210c <Page_1_Released+0x1c>
	    Nextion_Set_BCK_Colour("b0", 48631);
	    }
	}

    Nextion_Backlight_Brightness(80, 0);
    }
 8002100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(80, 0);
 8002104:	2100      	movs	r1, #0
 8002106:	2050      	movs	r0, #80	; 0x50
 8002108:	f000 ba90 	b.w	800262c <Nextion_Backlight_Brightness>
	if (Current_Page == 1)
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <Page_1_Released+0x40>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d1f5      	bne.n	8002100 <Page_1_Released+0x10>
	    Nextion_Set_BCK_Colour("b0", 48631);
 8002114:	f64b 51f7 	movw	r1, #48631	; 0xbdf7
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <Page_1_Released+0x44>)
 800211a:	f000 fa51 	bl	80025c0 <Nextion_Set_BCK_Colour>
    }
 800211e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Nextion_Backlight_Brightness(80, 0);
 8002122:	2100      	movs	r1, #0
 8002124:	2050      	movs	r0, #80	; 0x50
 8002126:	f000 ba81 	b.w	800262c <Nextion_Backlight_Brightness>
 800212a:	bf00      	nop
 800212c:	200006a0 	.word	0x200006a0
 8002130:	20000698 	.word	0x20000698
 8002134:	080057e4 	.word	0x080057e4

08002138 <Page_0_Touched>:
    Page_RCV_Flag = 0;
 8002138:	2300      	movs	r3, #0
    {
 800213a:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 800213c:	4c08      	ldr	r4, [pc, #32]	; (8002160 <Page_0_Touched+0x28>)
 800213e:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 8002140:	f000 fa9c 	bl	800267c <Nextion_Get_Current_Page>
 8002144:	7823      	ldrb	r3, [r4, #0]
 8002146:	b903      	cbnz	r3, 800214a <Page_0_Touched+0x12>
 8002148:	bd10      	pop	{r4, pc}
	if (Current_Page == 0)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <Page_0_Touched+0x2c>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1fa      	bne.n	8002148 <Page_0_Touched+0x10>
    }
 8002152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    Nextion_Set_BCK_Colour("b0", 63488);
 8002156:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <Page_0_Touched+0x30>)
 800215c:	f000 ba30 	b.w	80025c0 <Nextion_Set_BCK_Colour>
 8002160:	200006a0 	.word	0x200006a0
 8002164:	20000698 	.word	0x20000698
 8002168:	080057e4 	.word	0x080057e4

0800216c <Page_0_Released>:
    Page_RCV_Flag = 0;
 800216c:	2300      	movs	r3, #0
    {
 800216e:	b510      	push	{r4, lr}
    Page_RCV_Flag = 0;
 8002170:	4c10      	ldr	r4, [pc, #64]	; (80021b4 <Page_0_Released+0x48>)
 8002172:	7023      	strb	r3, [r4, #0]
    Nextion_Get_Current_Page();
 8002174:	f000 fa82 	bl	800267c <Nextion_Get_Current_Page>
 8002178:	7823      	ldrb	r3, [r4, #0]
 800217a:	b933      	cbnz	r3, 800218a <Page_0_Released+0x1e>
    Page_0_Touch_Count++;
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <Page_0_Released+0x4c>)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	3301      	adds	r3, #1
    if (Page_0_Touch_Count == 10)
 8002182:	2b0a      	cmp	r3, #10
 8002184:	d00f      	beq.n	80021a6 <Page_0_Released+0x3a>
    Page_0_Touch_Count++;
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	bd10      	pop	{r4, pc}
	if (Current_Page == 0)
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <Page_0_Released+0x50>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f4      	bne.n	800217c <Page_0_Released+0x10>
	    Nextion_Set_BCK_Colour("b0", 48631);
 8002192:	f64b 51f7 	movw	r1, #48631	; 0xbdf7
 8002196:	480a      	ldr	r0, [pc, #40]	; (80021c0 <Page_0_Released+0x54>)
 8002198:	f000 fa12 	bl	80025c0 <Nextion_Set_BCK_Colour>
    Page_0_Touch_Count++;
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <Page_0_Released+0x4c>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	3301      	adds	r3, #1
    if (Page_0_Touch_Count == 10)
 80021a2:	2b0a      	cmp	r3, #10
 80021a4:	d1ef      	bne.n	8002186 <Page_0_Released+0x1a>
    }
 80021a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Page_0_Touch_Count = 0;
 80021aa:	2300      	movs	r3, #0
	Nextion_Send_Command("page 4");
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <Page_0_Released+0x58>)
	Page_0_Touch_Count = 0;
 80021ae:	6013      	str	r3, [r2, #0]
	Nextion_Send_Command("page 4");
 80021b0:	f000 b920 	b.w	80023f4 <Nextion_Send_Command>
 80021b4:	200006a0 	.word	0x200006a0
 80021b8:	2000069c 	.word	0x2000069c
 80021bc:	20000698 	.word	0x20000698
 80021c0:	080057e4 	.word	0x080057e4
 80021c4:	080057e8 	.word	0x080057e8

080021c8 <Nextion_RX_Page_ID_Callback>:

void Nextion_RX_Page_ID_Callback(uint8_t Page_ID)
    {
    Page_RCV_Flag = 0;
 80021c8:	2100      	movs	r1, #0
 80021ca:	4a02      	ldr	r2, [pc, #8]	; (80021d4 <Nextion_RX_Page_ID_Callback+0xc>)
    Current_Page = Page_ID;
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <Nextion_RX_Page_ID_Callback+0x10>)
    Page_RCV_Flag = 0;
 80021ce:	7011      	strb	r1, [r2, #0]
    Current_Page = Page_ID;
 80021d0:	7018      	strb	r0, [r3, #0]
 80021d2:	4770      	bx	lr
 80021d4:	200006a0 	.word	0x200006a0
 80021d8:	20000698 	.word	0x20000698

080021dc <Nextion_RX_String_Callback>:
    }

void Nextion_RX_String_Callback(const char* str)
    {
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <Nextion_RX_Number_Callback>:

    }

void Nextion_RX_Number_Callback(uint32_t Number)
    {
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <Nextion_CMD_Finished_Callback>:

    }

void Nextion_CMD_Finished_Callback()
    {
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 80021e8:	b530      	push	{r4, r5, lr}
 80021ea:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitTypeDef RCC_OscInitStruct =
 80021ec:	2228      	movs	r2, #40	; 0x28
 80021ee:	2100      	movs	r1, #0
 80021f0:	a806      	add	r0, sp, #24
 80021f2:	f000 fbdd 	bl	80029b0 <memset>
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f6:	2402      	movs	r4, #2
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80021f8:	2300      	movs	r3, #0
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021fa:	2101      	movs	r1, #1
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002200:	f44f 15e0 	mov.w	r5, #1835008	; 0x1c0000
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002204:	a806      	add	r0, sp, #24
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	9304      	str	r3, [sp, #16]
 800220e:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002210:	9106      	str	r1, [sp, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002212:	910a      	str	r1, [sp, #40]	; 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002214:	9207      	str	r2, [sp, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002216:	920e      	str	r2, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002218:	940d      	str	r4, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800221a:	950f      	str	r5, [sp, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221c:	f7ff f8d8 	bl	80013d0 <HAL_RCC_OscConfig>
 8002220:	b100      	cbz	r0, 8002224 <SystemClock_Config+0x3c>
 8002222:	e7fe      	b.n	8002222 <SystemClock_Config+0x3a>
 8002224:	4603      	mov	r3, r0
	{
	Error_Handler();
	}
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002226:	250f      	movs	r5, #15
	    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002228:	f44f 6280 	mov.w	r2, #1024	; 0x400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800222c:	a801      	add	r0, sp, #4
 800222e:	4621      	mov	r1, r4
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002230:	9402      	str	r4, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002232:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002234:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002236:	9501      	str	r5, [sp, #4]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002238:	9204      	str	r2, [sp, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800223a:	f7ff fab5 	bl	80017a8 <HAL_RCC_ClockConfig>
 800223e:	b100      	cbz	r0, 8002242 <SystemClock_Config+0x5a>
 8002240:	e7fe      	b.n	8002240 <SystemClock_Config+0x58>
	{
	Error_Handler();
	}
    }
 8002242:	b011      	add	sp, #68	; 0x44
 8002244:	bd30      	pop	{r4, r5, pc}
 8002246:	bf00      	nop

08002248 <main>:
    Page_0_Object.Component_ID = 0;
 8002248:	2400      	movs	r4, #0
    Page_1_Object.Page_ID = 1;
 800224a:	2501      	movs	r5, #1
    {
 800224c:	b500      	push	{lr}
 800224e:	b08d      	sub	sp, #52	; 0x34
    HAL_Init();
 8002250:	f7fe fdc2 	bl	8000dd8 <HAL_Init>
    SystemClock_Config();
 8002254:	f7ff ffc8 	bl	80021e8 <SystemClock_Config>
    MX_GPIO_Init();
 8002258:	f7ff ff06 	bl	8002068 <MX_GPIO_Init>
    MX_DMA_Init();
 800225c:	f7ff feea 	bl	8002034 <MX_DMA_Init>
    MX_USART1_UART_Init();
 8002260:	f000 fada 	bl	8002818 <MX_USART1_UART_Init>
    Nextion_Init();
 8002264:	f000 f850 	bl	8002308 <Nextion_Init>
    Page_0_Object.Push_Callback = &Page_0_Touched;
 8002268:	4914      	ldr	r1, [pc, #80]	; (80022bc <main+0x74>)
    Page_0_Object.Pop_Callback = &Page_0_Released;
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <main+0x78>)
    Page_0_Object.Name = "page 0";
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <main+0x7c>)
    Nextion_Add_Object(&Page_0_Object);
 800226e:	4668      	mov	r0, sp
    Page_0_Object.Push_Callback = &Page_0_Touched;
 8002270:	9102      	str	r1, [sp, #8]
    Page_0_Object.Pop_Callback = &Page_0_Released;
 8002272:	9203      	str	r2, [sp, #12]
    Page_0_Object.Name = "page 0";
 8002274:	9301      	str	r3, [sp, #4]
    Page_0_Object.Component_ID = 0;
 8002276:	f88d 4001 	strb.w	r4, [sp, #1]
    Page_0_Object.Page_ID = 0;
 800227a:	f88d 4000 	strb.w	r4, [sp]
    Nextion_Add_Object(&Page_0_Object);
 800227e:	f000 f82f 	bl	80022e0 <Nextion_Add_Object>
    Page_1_Object.Push_Callback = &Page_1_Touched;
 8002282:	4911      	ldr	r1, [pc, #68]	; (80022c8 <main+0x80>)
    Page_1_Object.Pop_Callback = &Page_1_Released;
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <main+0x84>)
    Page_1_Object.Name = "page 1";
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <main+0x88>)
    Nextion_Add_Object(&Page_1_Object);
 8002288:	a804      	add	r0, sp, #16
    Page_1_Object.Push_Callback = &Page_1_Touched;
 800228a:	9106      	str	r1, [sp, #24]
    Page_1_Object.Pop_Callback = &Page_1_Released;
 800228c:	9207      	str	r2, [sp, #28]
    Page_1_Object.Name = "page 1";
 800228e:	9305      	str	r3, [sp, #20]
    Page_1_Object.Component_ID = 0;
 8002290:	f88d 4011 	strb.w	r4, [sp, #17]
    Page_1_Object.Page_ID = 1;
 8002294:	f88d 5010 	strb.w	r5, [sp, #16]
    Nextion_Add_Object(&Page_1_Object);
 8002298:	f000 f822 	bl	80022e0 <Nextion_Add_Object>
    BTN_Setting.Component_ID = 6;
 800229c:	2106      	movs	r1, #6
    BTN_Setting.Pop_Callback = &BTN_Setting_Released;
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <main+0x8c>)
    BTN_Setting.Name = "b0";
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <main+0x90>)
    Nextion_Add_Object(&BTN_Setting);
 80022a2:	a808      	add	r0, sp, #32
    BTN_Setting.Push_Callback = NULL;
 80022a4:	940a      	str	r4, [sp, #40]	; 0x28
    BTN_Setting.Page_ID = 0;
 80022a6:	f88d 4020 	strb.w	r4, [sp, #32]
    BTN_Setting.Component_ID = 6;
 80022aa:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    BTN_Setting.Pop_Callback = &BTN_Setting_Released;
 80022ae:	920b      	str	r2, [sp, #44]	; 0x2c
    BTN_Setting.Name = "b0";
 80022b0:	9309      	str	r3, [sp, #36]	; 0x24
    Nextion_Add_Object(&BTN_Setting);
 80022b2:	f000 f815 	bl	80022e0 <Nextion_Add_Object>
	Nextion_Loop();
 80022b6:	f000 f92d 	bl	8002514 <Nextion_Loop>
 80022ba:	e7fc      	b.n	80022b6 <main+0x6e>
 80022bc:	08002139 	.word	0x08002139
 80022c0:	0800216d 	.word	0x0800216d
 80022c4:	080057f0 	.word	0x080057f0
 80022c8:	080020a9 	.word	0x080020a9
 80022cc:	080020f1 	.word	0x080020f1
 80022d0:	080057f8 	.word	0x080057f8
 80022d4:	08002099 	.word	0x08002099
 80022d8:	080057e4 	.word	0x080057e4

080022dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 80022dc:	e7fe      	b.n	80022dc <Error_Handler>
 80022de:	bf00      	nop

080022e0 <Nextion_Add_Object>:
static Ring_Buffer_t UART_Ring_Buffer_Handle;
/*********************ring buffer objects*******************/

uint8_t Nextion_Add_Object(Nextion_Object_t* PTR)
    {
    if (Nextion_Object_Count < MAX_NEXTION_OBJECTS)
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <Nextion_Add_Object+0x20>)
 80022e2:	8813      	ldrh	r3, [r2, #0]
 80022e4:	2b31      	cmp	r3, #49	; 0x31
 80022e6:	d808      	bhi.n	80022fa <Nextion_Add_Object+0x1a>
    {
 80022e8:	b410      	push	{r4}
	{
	Nextion_Object_List[Nextion_Object_Count] = PTR;
 80022ea:	4c06      	ldr	r4, [pc, #24]	; (8002304 <Nextion_Add_Object+0x24>)
	Nextion_Object_Count++;
 80022ec:	1c59      	adds	r1, r3, #1
	Nextion_Object_List[Nextion_Object_Count] = PTR;
 80022ee:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	Nextion_Object_Count++;
 80022f2:	8011      	strh	r1, [r2, #0]
	return 1;
 80022f4:	2001      	movs	r0, #1
	}
    return 0;
    }
 80022f6:	bc10      	pop	{r4}
 80022f8:	4770      	bx	lr
    return 0;
 80022fa:	2000      	movs	r0, #0
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200006a2 	.word	0x200006a2
 8002304:	200006a4 	.word	0x200006a4

08002308 <Nextion_Init>:

uint8_t Nextion_Init()
    {
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
	0
	};
    char sps = 0xFF;

    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 800230a:	24ff      	movs	r4, #255	; 0xff
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 800230c:	4d31      	ldr	r5, [pc, #196]	; (80023d4 <Nextion_Init+0xcc>)
    {
 800230e:	b08b      	sub	sp, #44	; 0x2c
    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	4931      	ldr	r1, [pc, #196]	; (80023d8 <Nextion_Init+0xd0>)
 8002314:	4831      	ldr	r0, [pc, #196]	; (80023dc <Nextion_Init+0xd4>)
 8002316:	f000 f9cf 	bl	80026b8 <Ring_Buffer_Init>
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) UART_DMA_RX_Buffer, UART_RING_BUFFER_SIZE);
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	492e      	ldr	r1, [pc, #184]	; (80023d8 <Nextion_Init+0xd0>)
 800231e:	4628      	mov	r0, r5
 8002320:	f7ff fcce 	bl	8001cc0 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002324:	682a      	ldr	r2, [r5, #0]
    char buf[30] =
 8002326:	2100      	movs	r1, #0
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002328:	68d3      	ldr	r3, [r2, #12]
    char buf[30] =
 800232a:	a802      	add	r0, sp, #8
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	60d3      	str	r3, [r2, #12]
    char buf[30] =
 8002332:	221e      	movs	r2, #30
 8002334:	f000 fb3c 	bl	80029b0 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 8002338:	4623      	mov	r3, r4
 800233a:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <Nextion_Init+0xd8>)
 800233c:	4929      	ldr	r1, [pc, #164]	; (80023e4 <Nextion_Init+0xdc>)
 800233e:	a802      	add	r0, sp, #8
 8002340:	9401      	str	r4, [sp, #4]
 8002342:	9400      	str	r4, [sp, #0]
 8002344:	f000 fb3c 	bl	80029c0 <sprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 8002348:	a802      	add	r0, sp, #8
 800234a:	f7fd ff01 	bl	8000150 <strlen>
    CMD_Finished_Flag = 0;
 800234e:	2700      	movs	r7, #0
    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 8002350:	b282      	uxth	r2, r0
 8002352:	2332      	movs	r3, #50	; 0x32
 8002354:	a902      	add	r1, sp, #8
 8002356:	4628      	mov	r0, r5
 8002358:	f7ff fc20 	bl	8001b9c <HAL_UART_Transmit>
    CMD_Finished_Flag = 0;
 800235c:	4e22      	ldr	r6, [pc, #136]	; (80023e8 <Nextion_Init+0xe0>)
    HAL_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f7fe fd5e 	bl	8000e20 <HAL_Delay>
    char buf[30] =
 8002364:	4639      	mov	r1, r7
 8002366:	221e      	movs	r2, #30
 8002368:	a802      	add	r0, sp, #8
    CMD_Finished_Flag = 0;
 800236a:	7037      	strb	r7, [r6, #0]
    char buf[30] =
 800236c:	f000 fb20 	bl	80029b0 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 8002370:	4623      	mov	r3, r4
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <Nextion_Init+0xe4>)
 8002374:	491b      	ldr	r1, [pc, #108]	; (80023e4 <Nextion_Init+0xdc>)
 8002376:	9401      	str	r4, [sp, #4]
 8002378:	9400      	str	r4, [sp, #0]
 800237a:	a802      	add	r0, sp, #8
 800237c:	f000 fb20 	bl	80029c0 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 8002380:	a802      	add	r0, sp, #8
 8002382:	f7fd fee5 	bl	8000150 <strlen>
 8002386:	2332      	movs	r3, #50	; 0x32
 8002388:	b282      	uxth	r2, r0
 800238a:	a902      	add	r1, sp, #8
 800238c:	4628      	mov	r0, r5
 800238e:	f7ff fc05 	bl	8001b9c <HAL_UART_Transmit>
 8002392:	7833      	ldrb	r3, [r6, #0]
 8002394:	b913      	cbnz	r3, 800239c <Nextion_Init+0x94>
	return NEXTION_ERR;
 8002396:	2000      	movs	r0, #0
    }
 8002398:	b00b      	add	sp, #44	; 0x2c
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char buf[30] =
 800239c:	4639      	mov	r1, r7
 800239e:	221e      	movs	r2, #30
 80023a0:	a802      	add	r0, sp, #8
    CMD_Finished_Flag = 0;
 80023a2:	7037      	strb	r7, [r6, #0]
    char buf[30] =
 80023a4:	f000 fb04 	bl	80029b0 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 80023a8:	4623      	mov	r3, r4
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <Nextion_Init+0xe8>)
 80023ac:	490d      	ldr	r1, [pc, #52]	; (80023e4 <Nextion_Init+0xdc>)
 80023ae:	9401      	str	r4, [sp, #4]
 80023b0:	9400      	str	r4, [sp, #0]
 80023b2:	a802      	add	r0, sp, #8
 80023b4:	f000 fb04 	bl	80029c0 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 80023b8:	a802      	add	r0, sp, #8
 80023ba:	f7fd fec9 	bl	8000150 <strlen>
 80023be:	2332      	movs	r3, #50	; 0x32
 80023c0:	b282      	uxth	r2, r0
 80023c2:	a902      	add	r1, sp, #8
 80023c4:	4628      	mov	r0, r5
 80023c6:	f7ff fbe9 	bl	8001b9c <HAL_UART_Transmit>
 80023ca:	7833      	ldrb	r3, [r6, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0e2      	beq.n	8002396 <Nextion_Init+0x8e>
    return NEXTION_OK;
 80023d0:	2001      	movs	r0, #1
 80023d2:	e7e1      	b.n	8002398 <Nextion_Init+0x90>
 80023d4:	20000894 	.word	0x20000894
 80023d8:	20000770 	.word	0x20000770
 80023dc:	200007f0 	.word	0x200007f0
 80023e0:	0800582c 	.word	0x0800582c
 80023e4:	0800584c 	.word	0x0800584c
 80023e8:	200006a1 	.word	0x200006a1
 80023ec:	08005830 	.word	0x08005830
 80023f0:	080057f0 	.word	0x080057f0

080023f4 <Nextion_Send_Command>:
    {
 80023f4:	b510      	push	{r4, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	4604      	mov	r4, r0
    char buf[30] =
 80023fa:	221e      	movs	r2, #30
 80023fc:	a802      	add	r0, sp, #8
 80023fe:	2100      	movs	r1, #0
 8002400:	f000 fad6 	bl	80029b0 <memset>
    sprintf(buf, "%s%c%c%c", cmd, sps, sps, sps);
 8002404:	23ff      	movs	r3, #255	; 0xff
 8002406:	4622      	mov	r2, r4
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <Nextion_Send_Command+0x38>)
 800240e:	a802      	add	r0, sp, #8
 8002410:	f000 fad6 	bl	80029c0 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 8002414:	a802      	add	r0, sp, #8
 8002416:	f7fd fe9b 	bl	8000150 <strlen>
 800241a:	a902      	add	r1, sp, #8
 800241c:	b282      	uxth	r2, r0
 800241e:	2332      	movs	r3, #50	; 0x32
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <Nextion_Send_Command+0x3c>)
 8002422:	f7ff fbbb 	bl	8001b9c <HAL_UART_Transmit>

    }
 8002426:	b00a      	add	sp, #40	; 0x28
 8002428:	bd10      	pop	{r4, pc}
 800242a:	bf00      	nop
 800242c:	0800584c 	.word	0x0800584c
 8002430:	20000894 	.word	0x20000894

08002434 <Nextion_UART_RX_ISR>:

void Nextion_UART_RX_ISR()
    {

    static  uint8_t rx_char_count = 0;
    char    rx_char = 0;
 8002434:	2200      	movs	r2, #0
    {
 8002436:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t data_received = 0;
    uint8_t rx_number = 0;

    if (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE))
 8002438:	4b30      	ldr	r3, [pc, #192]	; (80024fc <Nextion_UART_RX_ISR+0xc8>)
    {
 800243a:	b083      	sub	sp, #12
    if (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE))
 800243c:	681b      	ldr	r3, [r3, #0]
    char    rx_char = 0;
 800243e:	f88d 2007 	strb.w	r2, [sp, #7]
    if (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE))
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	06d2      	lsls	r2, r2, #27
 8002446:	d541      	bpl.n	80024cc <Nextion_UART_RX_ISR+0x98>
			}
		    }
		}
	    else
		{
		Nextion_In_Buffer[rx_char_count] = rx_char;
 8002448:	4e2d      	ldr	r6, [pc, #180]	; (8002500 <Nextion_UART_RX_ISR+0xcc>)
	(void) __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 800244a:	681a      	ldr	r2, [r3, #0]
		case NEX_RET_CURRENT_PAGE_ID_HEAD:
		    Nextion_RX_Page_ID_Callback(Nextion_In_Buffer[1]);
		    break;

		case NEX_RET_STRING_HEAD:
		    Nextion_RX_String_Callback(&Nextion_In_Buffer[1]);
 800244c:	1c77      	adds	r7, r6, #1
	(void) huart1.Instance->DR;
 800244e:	685b      	ldr	r3, [r3, #4]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8002450:	4c2c      	ldr	r4, [pc, #176]	; (8002504 <Nextion_UART_RX_ISR+0xd0>)
		Nextion_In_Buffer[rx_char_count] = rx_char;
 8002452:	4d2d      	ldr	r5, [pc, #180]	; (8002508 <Nextion_UART_RX_ISR+0xd4>)
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8002454:	e003      	b.n	800245e <Nextion_UART_RX_ISR+0x2a>
		Nextion_In_Buffer[rx_char_count] = rx_char;
 8002456:	782a      	ldrb	r2, [r5, #0]
		rx_char_count++;
 8002458:	1c51      	adds	r1, r2, #1
		Nextion_In_Buffer[rx_char_count] = rx_char;
 800245a:	54b3      	strb	r3, [r6, r2]
		rx_char_count++;
 800245c:	7029      	strb	r1, [r5, #0]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 800245e:	4620      	mov	r0, r4
 8002460:	f000 f948 	bl	80026f4 <Ring_Buffer_Get_Count>
 8002464:	b390      	cbz	r0, 80024cc <Nextion_UART_RX_ISR+0x98>
	    Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 8002466:	f10d 0107 	add.w	r1, sp, #7
 800246a:	4620      	mov	r0, r4
 800246c:	f000 f92a 	bl	80026c4 <Ring_Buffer_Get_Char>
	    if (rx_char == 0xFF)
 8002470:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	d1ee      	bne.n	8002456 <Nextion_UART_RX_ISR+0x22>
		Ring_Buffer_Get_Char(& UART_Ring_Buffer_Handle, &rx_char);
 8002478:	f10d 0107 	add.w	r1, sp, #7
 800247c:	4620      	mov	r0, r4
 800247e:	f000 f921 	bl	80026c4 <Ring_Buffer_Get_Char>
		    if (rx_char == 0xFF)
 8002482:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d1e9      	bne.n	800245e <Nextion_UART_RX_ISR+0x2a>
			Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 800248a:	f10d 0107 	add.w	r1, sp, #7
 800248e:	4620      	mov	r0, r4
 8002490:	f000 f918 	bl	80026c4 <Ring_Buffer_Get_Char>
			if (rx_char == 0xFF)
 8002494:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002498:	2bff      	cmp	r3, #255	; 0xff
 800249a:	d1e0      	bne.n	800245e <Nextion_UART_RX_ISR+0x2a>
			    rx_char_count = 0;
 800249c:	2200      	movs	r2, #0
		switch (Nextion_In_Buffer[0])
 800249e:	7833      	ldrb	r3, [r6, #0]
			    rx_char_count = 0;
 80024a0:	702a      	strb	r2, [r5, #0]
		switch (Nextion_In_Buffer[0])
 80024a2:	2b66      	cmp	r3, #102	; 0x66
 80024a4:	d019      	beq.n	80024da <Nextion_UART_RX_ISR+0xa6>
 80024a6:	d81c      	bhi.n	80024e2 <Nextion_UART_RX_ISR+0xae>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d011      	beq.n	80024d0 <Nextion_UART_RX_ISR+0x9c>
 80024ac:	2b65      	cmp	r3, #101	; 0x65
 80024ae:	d102      	bne.n	80024b6 <Nextion_UART_RX_ISR+0x82>
		    Touch_EVNT_Flag = 1;
 80024b0:	2201      	movs	r2, #1
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <Nextion_UART_RX_ISR+0xd8>)
 80024b4:	701a      	strb	r2, [r3, #0]
		    break;
		default:
		    break;

		    }
		memset(Nextion_In_Buffer, 0x00, NEXTION_IN_BUFF_SIZE); //reset buffer
 80024b6:	2300      	movs	r3, #0
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 80024b8:	4620      	mov	r0, r4
		memset(Nextion_In_Buffer, 0x00, NEXTION_IN_BUFF_SIZE); //reset buffer
 80024ba:	6033      	str	r3, [r6, #0]
 80024bc:	6073      	str	r3, [r6, #4]
 80024be:	60b3      	str	r3, [r6, #8]
 80024c0:	60f3      	str	r3, [r6, #12]
 80024c2:	6133      	str	r3, [r6, #16]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 80024c4:	f000 f916 	bl	80026f4 <Ring_Buffer_Get_Count>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d1cc      	bne.n	8002466 <Nextion_UART_RX_ISR+0x32>
		}
	    }
	}
    }
 80024cc:	b003      	add	sp, #12
 80024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    CMD_Finished_Flag = 1;
 80024d0:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <Nextion_UART_RX_ISR+0xdc>)
 80024d2:	7013      	strb	r3, [r2, #0]
		    Nextion_CMD_Finished_Callback();
 80024d4:	f7ff fe86 	bl	80021e4 <Nextion_CMD_Finished_Callback>
		    break;
 80024d8:	e7ed      	b.n	80024b6 <Nextion_UART_RX_ISR+0x82>
		    Nextion_RX_Page_ID_Callback(Nextion_In_Buffer[1]);
 80024da:	7870      	ldrb	r0, [r6, #1]
 80024dc:	f7ff fe74 	bl	80021c8 <Nextion_RX_Page_ID_Callback>
		    break;
 80024e0:	e7e9      	b.n	80024b6 <Nextion_UART_RX_ISR+0x82>
		switch (Nextion_In_Buffer[0])
 80024e2:	2b70      	cmp	r3, #112	; 0x70
 80024e4:	d005      	beq.n	80024f2 <Nextion_UART_RX_ISR+0xbe>
 80024e6:	2b71      	cmp	r3, #113	; 0x71
 80024e8:	d1e5      	bne.n	80024b6 <Nextion_UART_RX_ISR+0x82>
		    Nextion_RX_Number_Callback(rx_number);
 80024ea:	7870      	ldrb	r0, [r6, #1]
 80024ec:	f7ff fe78 	bl	80021e0 <Nextion_RX_Number_Callback>
		    break;
 80024f0:	e7e1      	b.n	80024b6 <Nextion_UART_RX_ISR+0x82>
		    Nextion_RX_String_Callback(&Nextion_In_Buffer[1]);
 80024f2:	4638      	mov	r0, r7
 80024f4:	f7ff fe72 	bl	80021dc <Nextion_RX_String_Callback>
		    break;
 80024f8:	e7dd      	b.n	80024b6 <Nextion_UART_RX_ISR+0x82>
 80024fa:	bf00      	nop
 80024fc:	20000894 	.word	0x20000894
 8002500:	2000083c 	.word	0x2000083c
 8002504:	200007f0 	.word	0x200007f0
 8002508:	200007fc 	.word	0x200007fc
 800250c:	2000076c 	.word	0x2000076c
 8002510:	200006a1 	.word	0x200006a1

08002514 <Nextion_Loop>:



void Nextion_Loop()
    {
    if(Touch_EVNT_Flag)
 8002514:	4a15      	ldr	r2, [pc, #84]	; (800256c <Nextion_Loop+0x58>)
 8002516:	7813      	ldrb	r3, [r2, #0]
 8002518:	b903      	cbnz	r3, 800251c <Nextion_Loop+0x8>
	{
	Touch_EVNT_Flag = 0;
    Nextion_Find_Object(Nextion_In_Buffer[1],
	    Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
	}
    }
 800251a:	4770      	bx	lr
	Touch_EVNT_Flag = 0;
 800251c:	2100      	movs	r1, #0
    for (i = 0; i < Nextion_Object_Count; i++)
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <Nextion_Loop+0x5c>)
    {
 8002520:	b470      	push	{r4, r5, r6}
    for (i = 0; i < Nextion_Object_Count; i++)
 8002522:	8818      	ldrh	r0, [r3, #0]
    Nextion_Find_Object(Nextion_In_Buffer[1],
 8002524:	4e13      	ldr	r6, [pc, #76]	; (8002574 <Nextion_Loop+0x60>)
	Touch_EVNT_Flag = 0;
 8002526:	7011      	strb	r1, [r2, #0]
    Nextion_Find_Object(Nextion_In_Buffer[1],
 8002528:	7874      	ldrb	r4, [r6, #1]
	    Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
 800252a:	78b5      	ldrb	r5, [r6, #2]
    for (i = 0; i < Nextion_Object_Count; i++)
 800252c:	b1d8      	cbz	r0, 8002566 <Nextion_Loop+0x52>
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <Nextion_Loop+0x64>)
 8002530:	3801      	subs	r0, #1
 8002532:	b280      	uxth	r0, r0
 8002534:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002538:	3b04      	subs	r3, #4
 800253a:	e001      	b.n	8002540 <Nextion_Loop+0x2c>
 800253c:	4283      	cmp	r3, r0
 800253e:	d012      	beq.n	8002566 <Nextion_Loop+0x52>
	Nextion_Object_t_PTR = Nextion_Object_List[i];
 8002540:	f853 2f04 	ldr.w	r2, [r3, #4]!
	if (Nextion_Object_t_PTR->Page_ID == pid && Nextion_Object_t_PTR->Component_ID == cid)
 8002544:	7811      	ldrb	r1, [r2, #0]
 8002546:	42a1      	cmp	r1, r4
 8002548:	d1f8      	bne.n	800253c <Nextion_Loop+0x28>
 800254a:	7851      	ldrb	r1, [r2, #1]
 800254c:	42a9      	cmp	r1, r5
 800254e:	d1f5      	bne.n	800253c <Nextion_Loop+0x28>
	    Nextion_In_Buffer[2], Nextion_In_Buffer[3]);
 8002550:	78f3      	ldrb	r3, [r6, #3]
	    if (NEX_EVENT_PUSH == event)
 8002552:	2b01      	cmp	r3, #1
 8002554:	d004      	beq.n	8002560 <Nextion_Loop+0x4c>
	    else if (NEX_EVENT_POP == event)
 8002556:	b933      	cbnz	r3, 8002566 <Nextion_Loop+0x52>
		if (Nextion_Object_t_PTR->Pop_Callback != NULL)
 8002558:	68d3      	ldr	r3, [r2, #12]
 800255a:	b123      	cbz	r3, 8002566 <Nextion_Loop+0x52>
    }
 800255c:	bc70      	pop	{r4, r5, r6}
		    Nextion_Object_t_PTR->Pop_Callback();
 800255e:	4718      	bx	r3
		if (Nextion_Object_t_PTR->Push_Callback != NULL)
 8002560:	6893      	ldr	r3, [r2, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1fa      	bne.n	800255c <Nextion_Loop+0x48>
    }
 8002566:	bc70      	pop	{r4, r5, r6}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000076c 	.word	0x2000076c
 8002570:	200006a2 	.word	0x200006a2
 8002574:	2000083c 	.word	0x2000083c
 8002578:	200006a4 	.word	0x200006a4

0800257c <Nextion_Set_Text>:
 *
 *
 */

void Nextion_Set_Text(char *object_name, char *buffer)
    {
 800257c:	b530      	push	{r4, r5, lr}
	0
	};

    char sps = 0xFF;

    sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 800257e:	25ff      	movs	r5, #255	; 0xff
    char buf[20] =
 8002580:	2400      	movs	r4, #0
    {
 8002582:	b08b      	sub	sp, #44	; 0x2c
    sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 8002584:	460b      	mov	r3, r1
 8002586:	4602      	mov	r2, r0
 8002588:	490b      	ldr	r1, [pc, #44]	; (80025b8 <Nextion_Set_Text+0x3c>)
 800258a:	9502      	str	r5, [sp, #8]
 800258c:	9501      	str	r5, [sp, #4]
 800258e:	9500      	str	r5, [sp, #0]
 8002590:	a805      	add	r0, sp, #20
    char buf[20] =
 8002592:	9405      	str	r4, [sp, #20]
 8002594:	9406      	str	r4, [sp, #24]
 8002596:	9407      	str	r4, [sp, #28]
 8002598:	9408      	str	r4, [sp, #32]
 800259a:	9409      	str	r4, [sp, #36]	; 0x24
    sprintf(buf, "%s.txt=\"%s\"%c%c%c", object_name, buffer, sps, sps, sps);
 800259c:	f000 fa10 	bl	80029c0 <sprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 80025a0:	a805      	add	r0, sp, #20
 80025a2:	f7fd fdd5 	bl	8000150 <strlen>
 80025a6:	a905      	add	r1, sp, #20
 80025a8:	b282      	uxth	r2, r0
 80025aa:	2332      	movs	r3, #50	; 0x32
 80025ac:	4803      	ldr	r0, [pc, #12]	; (80025bc <Nextion_Set_Text+0x40>)
 80025ae:	f7ff faf5 	bl	8001b9c <HAL_UART_Transmit>
    }
 80025b2:	b00b      	add	sp, #44	; 0x2c
 80025b4:	bd30      	pop	{r4, r5, pc}
 80025b6:	bf00      	nop
 80025b8:	08005858 	.word	0x08005858
 80025bc:	20000894 	.word	0x20000894

080025c0 <Nextion_Set_BCK_Colour>:
 *
 *
 */

void Nextion_Set_BCK_Colour(char *object_name, int colour)
    {
 80025c0:	b570      	push	{r4, r5, r6, lr}
	0
	};

    char sps = 0xFF;

    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025c2:	24ff      	movs	r4, #255	; 0xff
    char buf[20] =
 80025c4:	2500      	movs	r5, #0
    {
 80025c6:	b08a      	sub	sp, #40	; 0x28
    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025c8:	460b      	mov	r3, r1
 80025ca:	4602      	mov	r2, r0
    {
 80025cc:	4606      	mov	r6, r0
    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025ce:	4914      	ldr	r1, [pc, #80]	; (8002620 <Nextion_Set_BCK_Colour+0x60>)
 80025d0:	9402      	str	r4, [sp, #8]
 80025d2:	9401      	str	r4, [sp, #4]
 80025d4:	9400      	str	r4, [sp, #0]
 80025d6:	a805      	add	r0, sp, #20
    char buf[20] =
 80025d8:	9505      	str	r5, [sp, #20]
 80025da:	9506      	str	r5, [sp, #24]
 80025dc:	9507      	str	r5, [sp, #28]
 80025de:	9508      	str	r5, [sp, #32]
 80025e0:	9509      	str	r5, [sp, #36]	; 0x24
    sprintf(buf, "%s.bco=%i%c%c%c", object_name, colour, sps, sps, sps);
 80025e2:	f000 f9ed 	bl	80029c0 <sprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 80025e6:	a805      	add	r0, sp, #20
 80025e8:	f7fd fdb2 	bl	8000150 <strlen>
 80025ec:	4d0d      	ldr	r5, [pc, #52]	; (8002624 <Nextion_Set_BCK_Colour+0x64>)
 80025ee:	b282      	uxth	r2, r0
 80025f0:	a905      	add	r1, sp, #20
 80025f2:	4628      	mov	r0, r5
 80025f4:	2332      	movs	r3, #50	; 0x32
 80025f6:	f7ff fad1 	bl	8001b9c <HAL_UART_Transmit>

    sprintf(buf, "ref %s%c%c%c", object_name, sps, sps, sps);
 80025fa:	4623      	mov	r3, r4
 80025fc:	4632      	mov	r2, r6
 80025fe:	490a      	ldr	r1, [pc, #40]	; (8002628 <Nextion_Set_BCK_Colour+0x68>)
 8002600:	9401      	str	r4, [sp, #4]
 8002602:	9400      	str	r4, [sp, #0]
 8002604:	a805      	add	r0, sp, #20
 8002606:	f000 f9db 	bl	80029c0 <sprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 800260a:	a805      	add	r0, sp, #20
 800260c:	f7fd fda0 	bl	8000150 <strlen>
 8002610:	a905      	add	r1, sp, #20
 8002612:	b282      	uxth	r2, r0
 8002614:	2332      	movs	r3, #50	; 0x32
 8002616:	4628      	mov	r0, r5
 8002618:	f7ff fac0 	bl	8001b9c <HAL_UART_Transmit>
    }
 800261c:	b00a      	add	sp, #40	; 0x28
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	08005838 	.word	0x08005838
 8002624:	20000894 	.word	0x20000894
 8002628:	08005848 	.word	0x08005848

0800262c <Nextion_Backlight_Brightness>:
 */

void Nextion_Backlight_Brightness(uint8_t value, uint8_t overide)
    {

    char buf[10] =
 800262c:	2300      	movs	r3, #0
    {
 800262e:	b500      	push	{lr}
 8002630:	b087      	sub	sp, #28
    char buf[10] =
 8002632:	9303      	str	r3, [sp, #12]
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	f8ad 3014 	strh.w	r3, [sp, #20]

    char sps = 0xFF;

    if (overide > 0)
	{
	sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 800263a:	23ff      	movs	r3, #255	; 0xff
    {
 800263c:	4602      	mov	r2, r0
	sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	9300      	str	r3, [sp, #0]
    if (overide > 0)
 8002642:	b979      	cbnz	r1, 8002664 <Nextion_Backlight_Brightness+0x38>
	}
    else
	{
	sprintf(buf, "dim=%i%c%c%c", value, sps, sps, sps);
 8002644:	490a      	ldr	r1, [pc, #40]	; (8002670 <Nextion_Backlight_Brightness+0x44>)
 8002646:	a803      	add	r0, sp, #12
 8002648:	f000 f9ba 	bl	80029c0 <sprintf>
	}

    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 800264c:	a803      	add	r0, sp, #12
 800264e:	f7fd fd7f 	bl	8000150 <strlen>
 8002652:	a903      	add	r1, sp, #12
 8002654:	b282      	uxth	r2, r0
 8002656:	2332      	movs	r3, #50	; 0x32
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <Nextion_Backlight_Brightness+0x48>)
 800265a:	f7ff fa9f 	bl	8001b9c <HAL_UART_Transmit>
    }
 800265e:	b007      	add	sp, #28
 8002660:	f85d fb04 	ldr.w	pc, [sp], #4
	sprintf(buf, "dims=%i%c%c%c", value, sps, sps, sps);
 8002664:	4904      	ldr	r1, [pc, #16]	; (8002678 <Nextion_Backlight_Brightness+0x4c>)
 8002666:	a803      	add	r0, sp, #12
 8002668:	f000 f9aa 	bl	80029c0 <sprintf>
 800266c:	e7ee      	b.n	800264c <Nextion_Backlight_Brightness+0x20>
 800266e:	bf00      	nop
 8002670:	08005810 	.word	0x08005810
 8002674:	20000894 	.word	0x20000894
 8002678:	08005800 	.word	0x08005800

0800267c <Nextion_Get_Current_Page>:
	0
	};

    char sps = 0xFF;

    sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 800267c:	23ff      	movs	r3, #255	; 0xff
    {
 800267e:	b510      	push	{r4, lr}
    char buf[10] =
 8002680:	2400      	movs	r4, #0
    {
 8002682:	b086      	sub	sp, #24
    sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	4909      	ldr	r1, [pc, #36]	; (80026b0 <Nextion_Get_Current_Page+0x34>)
 800268a:	a803      	add	r0, sp, #12
    char buf[10] =
 800268c:	9403      	str	r4, [sp, #12]
 800268e:	9404      	str	r4, [sp, #16]
 8002690:	f8ad 4014 	strh.w	r4, [sp, #20]
    sprintf(buf, "sendme%c%c%c", sps, sps, sps);
 8002694:	f000 f994 	bl	80029c0 <sprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*) &buf, strlen(buf), 50);
 8002698:	a803      	add	r0, sp, #12
 800269a:	f7fd fd59 	bl	8000150 <strlen>
 800269e:	a903      	add	r1, sp, #12
 80026a0:	b282      	uxth	r2, r0
 80026a2:	2332      	movs	r3, #50	; 0x32
 80026a4:	4803      	ldr	r0, [pc, #12]	; (80026b4 <Nextion_Get_Current_Page+0x38>)
 80026a6:	f7ff fa79 	bl	8001b9c <HAL_UART_Transmit>

    }
 80026aa:	b006      	add	sp, #24
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	bf00      	nop
 80026b0:	08005820 	.word	0x08005820
 80026b4:	20000894 	.word	0x20000894

080026b8 <Ring_Buffer_Init>:
#include "ring_buffer.h"

void Ring_Buffer_Init(Ring_Buffer_t* handle, char* buffer, uint16_t size)
    {
    handle->Buffer        =  buffer;
    handle->Read_Index    =  0;
 80026b8:	2300      	movs	r3, #0
    handle->Buffer        =  buffer;
 80026ba:	6001      	str	r1, [r0, #0]
    handle->Write_Index   =  0;
    handle->Size          =  size;
 80026bc:	8102      	strh	r2, [r0, #8]
    handle->Read_Index    =  0;
 80026be:	80c3      	strh	r3, [r0, #6]
    handle->Write_Index   =  0;
 80026c0:	8083      	strh	r3, [r0, #4]
 80026c2:	4770      	bx	lr

080026c4 <Ring_Buffer_Get_Char>:


uint8_t Ring_Buffer_Get_Char(Ring_Buffer_t* handle, char* data)
    {

    if (handle->Read_Index == handle->Write_Index)
 80026c4:	88c2      	ldrh	r2, [r0, #6]
    {
 80026c6:	4603      	mov	r3, r0
    if (handle->Read_Index == handle->Write_Index)
 80026c8:	8880      	ldrh	r0, [r0, #4]
 80026ca:	4290      	cmp	r0, r2
 80026cc:	d00e      	beq.n	80026ec <Ring_Buffer_Get_Char+0x28>
	{
	*data = 0;
	return 0;
	}

    *data = handle->Buffer[handle->Read_Index];
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	5c82      	ldrb	r2, [r0, r2]
 80026d2:	700a      	strb	r2, [r1, #0]

    handle->Read_Index++;
 80026d4:	88da      	ldrh	r2, [r3, #6]

    if (handle->Read_Index == handle->Size)
 80026d6:	8919      	ldrh	r1, [r3, #8]
    handle->Read_Index++;
 80026d8:	3201      	adds	r2, #1
 80026da:	b292      	uxth	r2, r2
    if (handle->Read_Index == handle->Size)
 80026dc:	4291      	cmp	r1, r2
    handle->Read_Index++;
 80026de:	80da      	strh	r2, [r3, #6]
	{
	handle->Read_Index = 0;
 80026e0:	bf03      	ittte	eq
 80026e2:	2200      	moveq	r2, #0
	}

    return 1;
 80026e4:	2001      	moveq	r0, #1
	handle->Read_Index = 0;
 80026e6:	80da      	strheq	r2, [r3, #6]
    return 1;
 80026e8:	2001      	movne	r0, #1
    }
 80026ea:	4770      	bx	lr
	*data = 0;
 80026ec:	2000      	movs	r0, #0
 80026ee:	7008      	strb	r0, [r1, #0]
	return 0;
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop

080026f4 <Ring_Buffer_Get_Count>:
    }


uint8_t Ring_Buffer_Get_Count(Ring_Buffer_t* handle)
    {
    if (handle->Write_Index >= handle->Read_Index)
 80026f4:	8883      	ldrh	r3, [r0, #4]
 80026f6:	88c2      	ldrh	r2, [r0, #6]
 80026f8:	4293      	cmp	r3, r2
	{
	return (handle->Write_Index - handle->Read_Index);
	}
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 80026fa:	bf37      	itett	cc
 80026fc:	7a00      	ldrbcc	r0, [r0, #8]
	return (handle->Write_Index - handle->Read_Index);
 80026fe:	1a98      	subcs	r0, r3, r2
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 8002700:	18c0      	addcc	r0, r0, r3
 8002702:	1a80      	subcc	r0, r0, r2
 8002704:	b2c0      	uxtb	r0, r0
    }
 8002706:	4770      	bx	lr

08002708 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_MspInit+0x3c>)
{
 800270a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800270c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800270e:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	619a      	str	r2, [r3, #24]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	f002 0201 	and.w	r2, r2, #1
 800271c:	9200      	str	r2, [sp, #0]
 800271e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002726:	61da      	str	r2, [r3, #28]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002732:	684b      	ldr	r3, [r1, #4]
 8002734:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	b002      	add	sp, #8
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000

0800274c <NMI_Handler>:
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop

08002750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002750:	e7fe      	b.n	8002750 <HardFault_Handler>
 8002752:	bf00      	nop

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler>
 8002756:	bf00      	nop

08002758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002758:	e7fe      	b.n	8002758 <BusFault_Handler>
 800275a:	bf00      	nop

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	e7fe      	b.n	800275c <UsageFault_Handler>
 800275e:	bf00      	nop

08002760 <SVC_Handler>:
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <DebugMon_Handler>:
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276c:	f7fe bb46 	b.w	8000dfc <HAL_IncTick>

08002770 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002770:	4801      	ldr	r0, [pc, #4]	; (8002778 <DMA1_Channel5_IRQHandler+0x8>)
 8002772:	f7fe bc97 	b.w	80010a4 <HAL_DMA_IRQHandler>
 8002776:	bf00      	nop
 8002778:	20000850 	.word	0x20000850

0800277c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800277c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  Nextion_UART_RX_ISR();
 800277e:	f7ff fe59 	bl	8002434 <Nextion_UART_RX_ISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_IRQHandler(&huart1);
 8002786:	4801      	ldr	r0, [pc, #4]	; (800278c <USART1_IRQHandler+0x10>)
 8002788:	f7ff bb84 	b.w	8001e94 <HAL_UART_IRQHandler>
 800278c:	20000894 	.word	0x20000894

08002790 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <_sbrk+0x30>)
{
 8002792:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	b173      	cbz	r3, 80027b6 <_sbrk+0x26>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002798:	4669      	mov	r1, sp
 800279a:	4418      	add	r0, r3
 800279c:	4288      	cmp	r0, r1
 800279e:	d802      	bhi.n	80027a6 <_sbrk+0x16>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80027a0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd08      	pop	{r3, pc}
		errno = ENOMEM;
 80027a6:	f000 f8d9 	bl	800295c <__errno>
 80027aa:	220c      	movs	r2, #12
		return (caddr_t) -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		errno = ENOMEM;
 80027b0:	6002      	str	r2, [r0, #0]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80027b6:	4903      	ldr	r1, [pc, #12]	; (80027c4 <_sbrk+0x34>)
 80027b8:	460b      	mov	r3, r1
 80027ba:	6011      	str	r1, [r2, #0]
 80027bc:	e7ec      	b.n	8002798 <_sbrk+0x8>
 80027be:	bf00      	nop
 80027c0:	20000800 	.word	0x20000800
 80027c4:	200008e4 	.word	0x200008e4

080027c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c8:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027ca:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027ce:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 80027d6:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027d8:	480e      	ldr	r0, [pc, #56]	; (8002814 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 80027da:	f041 0101 	orr.w	r1, r1, #1
 80027de:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	400a      	ands	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80027ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027f0:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f8:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002800:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8002802:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002804:	6084      	str	r4, [r0, #8]
#endif 
}
 8002806:	bc30      	pop	{r4, r5}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	f8ff0000 	.word	0xf8ff0000
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002818:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 9600;
 800281c:	f44f 5516 	mov.w	r5, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002820:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <MX_USART1_UART_Init+0x30>)
 8002824:	4c09      	ldr	r4, [pc, #36]	; (800284c <MX_USART1_UART_Init+0x34>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002826:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 8002828:	e883 0030 	stmia.w	r3, {r4, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800282c:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002832:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002834:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002836:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002838:	f7ff f980 	bl	8001b3c <HAL_UART_Init>
 800283c:	b900      	cbnz	r0, 8002840 <MX_USART1_UART_Init+0x28>
 800283e:	bd38      	pop	{r3, r4, r5, pc}
  {
    Error_Handler();
  }

}
 8002840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002844:	f7ff bd4a 	b.w	80022dc <Error_Handler>
 8002848:	20000894 	.word	0x20000894
 800284c:	40013800 	.word	0x40013800

08002850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8002854:	6802      	ldr	r2, [r0, #0]
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_UART_MspInit+0xb0>)
{
 8002858:	b087      	sub	sp, #28
  if(uartHandle->Instance==USART1)
 800285a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	9402      	str	r4, [sp, #8]
 800285e:	9403      	str	r4, [sp, #12]
 8002860:	9404      	str	r4, [sp, #16]
 8002862:	9405      	str	r4, [sp, #20]
  if(uartHandle->Instance==USART1)
 8002864:	d001      	beq.n	800286a <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002866:	b007      	add	sp, #28
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800286a:	f44f 7100 	mov.w	r1, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002870:	2603      	movs	r6, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002872:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	4605      	mov	r5, r0
 800287a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	4820      	ldr	r0, [pc, #128]	; (8002904 <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002884:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002888:	9200      	str	r2, [sp, #0]
 800288a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	f042 0204 	orr.w	r2, r2, #4
 8002892:	619a      	str	r2, [r3, #24]
 8002894:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002896:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a4:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f7fe fc93 	bl	80011d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	a902      	add	r1, sp, #8
 80028b0:	4814      	ldr	r0, [pc, #80]	; (8002904 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	9404      	str	r4, [sp, #16]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f7fe fc89 	bl	80011d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028be:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028c4:	4e10      	ldr	r6, [pc, #64]	; (8002908 <HAL_UART_MspInit+0xb8>)
 80028c6:	4911      	ldr	r1, [pc, #68]	; (800290c <HAL_UART_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028c8:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	60f7      	str	r7, [r6, #12]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028cc:	6074      	str	r4, [r6, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ce:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d0:	6134      	str	r4, [r6, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d2:	6174      	str	r4, [r6, #20]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028d4:	6031      	str	r1, [r6, #0]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028d6:	61b2      	str	r2, [r6, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028d8:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028da:	f7fe fb1f 	bl	8000f1c <HAL_DMA_Init>
 80028de:	b958      	cbnz	r0, 80028f8 <HAL_UART_MspInit+0xa8>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028e4:	636e      	str	r6, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028e6:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028e8:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028ea:	f7fe fabd 	bl	8000e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ee:	2025      	movs	r0, #37	; 0x25
 80028f0:	f7fe faf0 	bl	8000ed4 <HAL_NVIC_EnableIRQ>
}
 80028f4:	b007      	add	sp, #28
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80028f8:	f7ff fcf0 	bl	80022dc <Error_Handler>
 80028fc:	e7f0      	b.n	80028e0 <HAL_UART_MspInit+0x90>
 80028fe:	bf00      	nop
 8002900:	40013800 	.word	0x40013800
 8002904:	40010800 	.word	0x40010800
 8002908:	20000850 	.word	0x20000850
 800290c:	40020058 	.word	0x40020058

08002910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002910:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002912:	e003      	b.n	800291c <LoopCopyDataInit>

08002914 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002916:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002918:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800291a:	3104      	adds	r1, #4

0800291c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800291c:	480a      	ldr	r0, [pc, #40]	; (8002948 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002920:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002922:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002924:	d3f6      	bcc.n	8002914 <CopyDataInit>
  ldr r2, =_sbss
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002928:	e002      	b.n	8002930 <LoopFillZerobss>

0800292a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800292c:	f842 3b04 	str.w	r3, [r2], #4

08002930 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002932:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002934:	d3f9      	bcc.n	800292a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002936:	f7ff ff47 	bl	80027c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800293a:	f000 f815 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800293e:	f7ff fc83 	bl	8002248 <main>
  bx lr
 8002942:	4770      	bx	lr
  ldr r3, =_sidata
 8002944:	08005b00 	.word	0x08005b00
  ldr r0, =_sdata
 8002948:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800294c:	2000067c 	.word	0x2000067c
  ldr r2, =_sbss
 8002950:	2000067c 	.word	0x2000067c
  ldr r3, = _ebss
 8002954:	200008e4 	.word	0x200008e4

08002958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002958:	e7fe      	b.n	8002958 <ADC1_2_IRQHandler>
	...

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000000c 	.word	0x2000000c

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2500      	movs	r5, #0
 800296c:	4e0c      	ldr	r6, [pc, #48]	; (80029a0 <__libc_init_array+0x38>)
 800296e:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 8002970:	1ba4      	subs	r4, r4, r6
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a5      	cmp	r5, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	f002 ff18 	bl	80057ac <_init>
 800297c:	2500      	movs	r5, #0
 800297e:	4e0a      	ldr	r6, [pc, #40]	; (80029a8 <__libc_init_array+0x40>)
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <__libc_init_array+0x44>)
 8002982:	1ba4      	subs	r4, r4, r6
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a5      	cmp	r5, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002990:	4798      	blx	r3
 8002992:	3501      	adds	r5, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800299a:	4798      	blx	r3
 800299c:	3501      	adds	r5, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08005af8 	.word	0x08005af8
 80029a4:	08005af8 	.word	0x08005af8
 80029a8:	08005af8 	.word	0x08005af8
 80029ac:	08005afc 	.word	0x08005afc

080029b0 <memset>:
 80029b0:	4603      	mov	r3, r0
 80029b2:	4402      	add	r2, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <sprintf>:
 80029c0:	b40e      	push	{r1, r2, r3}
 80029c2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80029c6:	b500      	push	{lr}
 80029c8:	b09c      	sub	sp, #112	; 0x70
 80029ca:	f8ad 1014 	strh.w	r1, [sp, #20]
 80029ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029d2:	9104      	str	r1, [sp, #16]
 80029d4:	9107      	str	r1, [sp, #28]
 80029d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029da:	ab1d      	add	r3, sp, #116	; 0x74
 80029dc:	9002      	str	r0, [sp, #8]
 80029de:	9006      	str	r0, [sp, #24]
 80029e0:	4808      	ldr	r0, [pc, #32]	; (8002a04 <sprintf+0x44>)
 80029e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80029e6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80029ea:	6800      	ldr	r0, [r0, #0]
 80029ec:	a902      	add	r1, sp, #8
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	f000 f80a 	bl	8002a08 <_svfprintf_r>
 80029f4:	2200      	movs	r2, #0
 80029f6:	9b02      	ldr	r3, [sp, #8]
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	b01c      	add	sp, #112	; 0x70
 80029fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a00:	b003      	add	sp, #12
 8002a02:	4770      	bx	lr
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <_svfprintf_r>:
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0c:	b0bf      	sub	sp, #252	; 0xfc
 8002a0e:	4689      	mov	r9, r1
 8002a10:	4615      	mov	r5, r2
 8002a12:	461f      	mov	r7, r3
 8002a14:	4682      	mov	sl, r0
 8002a16:	f001 fe27 	bl	8004668 <_localeconv_r>
 8002a1a:	6803      	ldr	r3, [r0, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	9311      	str	r3, [sp, #68]	; 0x44
 8002a20:	f7fd fb96 	bl	8000150 <strlen>
 8002a24:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002a28:	900a      	str	r0, [sp, #40]	; 0x28
 8002a2a:	061b      	lsls	r3, r3, #24
 8002a2c:	d518      	bpl.n	8002a60 <_svfprintf_r+0x58>
 8002a2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002a32:	b9ab      	cbnz	r3, 8002a60 <_svfprintf_r+0x58>
 8002a34:	2140      	movs	r1, #64	; 0x40
 8002a36:	4650      	mov	r0, sl
 8002a38:	f001 fe2c 	bl	8004694 <_malloc_r>
 8002a3c:	f8c9 0000 	str.w	r0, [r9]
 8002a40:	f8c9 0010 	str.w	r0, [r9, #16]
 8002a44:	b948      	cbnz	r0, 8002a5a <_svfprintf_r+0x52>
 8002a46:	230c      	movs	r3, #12
 8002a48:	f8ca 3000 	str.w	r3, [sl]
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002a54:	b03f      	add	sp, #252	; 0xfc
 8002a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	f8c9 3014 	str.w	r3, [r9, #20]
 8002a60:	2300      	movs	r3, #0
 8002a62:	ac2e      	add	r4, sp, #184	; 0xb8
 8002a64:	9421      	str	r4, [sp, #132]	; 0x84
 8002a66:	9323      	str	r3, [sp, #140]	; 0x8c
 8002a68:	9322      	str	r3, [sp, #136]	; 0x88
 8002a6a:	9509      	str	r5, [sp, #36]	; 0x24
 8002a6c:	9307      	str	r3, [sp, #28]
 8002a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8002a70:	930e      	str	r3, [sp, #56]	; 0x38
 8002a72:	9315      	str	r3, [sp, #84]	; 0x54
 8002a74:	9314      	str	r3, [sp, #80]	; 0x50
 8002a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a78:	9312      	str	r3, [sp, #72]	; 0x48
 8002a7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002a7e:	462b      	mov	r3, r5
 8002a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a84:	b112      	cbz	r2, 8002a8c <_svfprintf_r+0x84>
 8002a86:	2a25      	cmp	r2, #37	; 0x25
 8002a88:	f040 8083 	bne.w	8002b92 <_svfprintf_r+0x18a>
 8002a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a8e:	1aee      	subs	r6, r5, r3
 8002a90:	d00d      	beq.n	8002aae <_svfprintf_r+0xa6>
 8002a92:	e884 0048 	stmia.w	r4, {r3, r6}
 8002a96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a98:	4433      	add	r3, r6
 8002a9a:	9323      	str	r3, [sp, #140]	; 0x8c
 8002a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	2b07      	cmp	r3, #7
 8002aa2:	9322      	str	r3, [sp, #136]	; 0x88
 8002aa4:	dc77      	bgt.n	8002b96 <_svfprintf_r+0x18e>
 8002aa6:	3408      	adds	r4, #8
 8002aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002aaa:	4433      	add	r3, r6
 8002aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8002aae:	782b      	ldrb	r3, [r5, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8725 	beq.w	8003900 <_svfprintf_r+0xef8>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	1c69      	adds	r1, r5, #1
 8002aba:	461a      	mov	r2, r3
 8002abc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002ac8:	930c      	str	r3, [sp, #48]	; 0x30
 8002aca:	1c4e      	adds	r6, r1, #1
 8002acc:	7809      	ldrb	r1, [r1, #0]
 8002ace:	9609      	str	r6, [sp, #36]	; 0x24
 8002ad0:	9106      	str	r1, [sp, #24]
 8002ad2:	9906      	ldr	r1, [sp, #24]
 8002ad4:	3920      	subs	r1, #32
 8002ad6:	2958      	cmp	r1, #88	; 0x58
 8002ad8:	f200 8414 	bhi.w	8003304 <_svfprintf_r+0x8fc>
 8002adc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002ae0:	041200a5 	.word	0x041200a5
 8002ae4:	00aa0412 	.word	0x00aa0412
 8002ae8:	04120412 	.word	0x04120412
 8002aec:	04120412 	.word	0x04120412
 8002af0:	04120412 	.word	0x04120412
 8002af4:	006500ad 	.word	0x006500ad
 8002af8:	00b50412 	.word	0x00b50412
 8002afc:	041200b8 	.word	0x041200b8
 8002b00:	00d800d5 	.word	0x00d800d5
 8002b04:	00d800d8 	.word	0x00d800d8
 8002b08:	00d800d8 	.word	0x00d800d8
 8002b0c:	00d800d8 	.word	0x00d800d8
 8002b10:	00d800d8 	.word	0x00d800d8
 8002b14:	04120412 	.word	0x04120412
 8002b18:	04120412 	.word	0x04120412
 8002b1c:	04120412 	.word	0x04120412
 8002b20:	04120412 	.word	0x04120412
 8002b24:	04120412 	.word	0x04120412
 8002b28:	0122010c 	.word	0x0122010c
 8002b2c:	01220412 	.word	0x01220412
 8002b30:	04120412 	.word	0x04120412
 8002b34:	04120412 	.word	0x04120412
 8002b38:	041200eb 	.word	0x041200eb
 8002b3c:	033c0412 	.word	0x033c0412
 8002b40:	04120412 	.word	0x04120412
 8002b44:	04120412 	.word	0x04120412
 8002b48:	03a40412 	.word	0x03a40412
 8002b4c:	04120412 	.word	0x04120412
 8002b50:	04120085 	.word	0x04120085
 8002b54:	04120412 	.word	0x04120412
 8002b58:	04120412 	.word	0x04120412
 8002b5c:	04120412 	.word	0x04120412
 8002b60:	04120412 	.word	0x04120412
 8002b64:	00fe0412 	.word	0x00fe0412
 8002b68:	0122006b 	.word	0x0122006b
 8002b6c:	01220122 	.word	0x01220122
 8002b70:	006b00ee 	.word	0x006b00ee
 8002b74:	04120412 	.word	0x04120412
 8002b78:	041200f1 	.word	0x041200f1
 8002b7c:	033e031e 	.word	0x033e031e
 8002b80:	00f80372 	.word	0x00f80372
 8002b84:	03830412 	.word	0x03830412
 8002b88:	03a60412 	.word	0x03a60412
 8002b8c:	04120412 	.word	0x04120412
 8002b90:	03be      	.short	0x03be
 8002b92:	461d      	mov	r5, r3
 8002b94:	e773      	b.n	8002a7e <_svfprintf_r+0x76>
 8002b96:	aa21      	add	r2, sp, #132	; 0x84
 8002b98:	4649      	mov	r1, r9
 8002b9a:	4650      	mov	r0, sl
 8002b9c:	f002 fa8e 	bl	80050bc <__ssprint_r>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	f040 868e 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8002ba6:	ac2e      	add	r4, sp, #184	; 0xb8
 8002ba8:	e77e      	b.n	8002aa8 <_svfprintf_r+0xa0>
 8002baa:	2301      	movs	r3, #1
 8002bac:	222b      	movs	r2, #43	; 0x2b
 8002bae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002bb0:	e78b      	b.n	8002aca <_svfprintf_r+0xc2>
 8002bb2:	460f      	mov	r7, r1
 8002bb4:	e7fb      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002bb6:	b10b      	cbz	r3, 8002bbc <_svfprintf_r+0x1b4>
 8002bb8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002bbc:	06ae      	lsls	r6, r5, #26
 8002bbe:	f140 80a1 	bpl.w	8002d04 <_svfprintf_r+0x2fc>
 8002bc2:	3707      	adds	r7, #7
 8002bc4:	f027 0707 	bic.w	r7, r7, #7
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	9308      	str	r3, [sp, #32]
 8002bce:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002bd2:	2e00      	cmp	r6, #0
 8002bd4:	f177 0300 	sbcs.w	r3, r7, #0
 8002bd8:	da05      	bge.n	8002be6 <_svfprintf_r+0x1de>
 8002bda:	232d      	movs	r3, #45	; 0x2d
 8002bdc:	4276      	negs	r6, r6
 8002bde:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002be2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002be6:	2301      	movs	r3, #1
 8002be8:	e2c7      	b.n	800317a <_svfprintf_r+0x772>
 8002bea:	b10b      	cbz	r3, 8002bf0 <_svfprintf_r+0x1e8>
 8002bec:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002bf0:	4ba0      	ldr	r3, [pc, #640]	; (8002e74 <_svfprintf_r+0x46c>)
 8002bf2:	9315      	str	r3, [sp, #84]	; 0x54
 8002bf4:	06ab      	lsls	r3, r5, #26
 8002bf6:	f140 8336 	bpl.w	8003266 <_svfprintf_r+0x85e>
 8002bfa:	3707      	adds	r7, #7
 8002bfc:	f027 0707 	bic.w	r7, r7, #7
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	9308      	str	r3, [sp, #32]
 8002c06:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c0a:	07e8      	lsls	r0, r5, #31
 8002c0c:	d50b      	bpl.n	8002c26 <_svfprintf_r+0x21e>
 8002c0e:	ea56 0307 	orrs.w	r3, r6, r7
 8002c12:	d008      	beq.n	8002c26 <_svfprintf_r+0x21e>
 8002c14:	2330      	movs	r3, #48	; 0x30
 8002c16:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8002c1a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002c1e:	f045 0502 	orr.w	r5, r5, #2
 8002c22:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8002c26:	2302      	movs	r3, #2
 8002c28:	e2a4      	b.n	8003174 <_svfprintf_r+0x76c>
 8002c2a:	2a00      	cmp	r2, #0
 8002c2c:	d1bf      	bne.n	8002bae <_svfprintf_r+0x1a6>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	2220      	movs	r2, #32
 8002c32:	e7bc      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002c34:	f045 0501 	orr.w	r5, r5, #1
 8002c38:	e7b9      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002c3a:	683e      	ldr	r6, [r7, #0]
 8002c3c:	1d39      	adds	r1, r7, #4
 8002c3e:	2e00      	cmp	r6, #0
 8002c40:	960c      	str	r6, [sp, #48]	; 0x30
 8002c42:	dab6      	bge.n	8002bb2 <_svfprintf_r+0x1aa>
 8002c44:	460f      	mov	r7, r1
 8002c46:	4276      	negs	r6, r6
 8002c48:	960c      	str	r6, [sp, #48]	; 0x30
 8002c4a:	f045 0504 	orr.w	r5, r5, #4
 8002c4e:	e7ae      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002c50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c52:	1c4e      	adds	r6, r1, #1
 8002c54:	7809      	ldrb	r1, [r1, #0]
 8002c56:	292a      	cmp	r1, #42	; 0x2a
 8002c58:	9106      	str	r1, [sp, #24]
 8002c5a:	d010      	beq.n	8002c7e <_svfprintf_r+0x276>
 8002c5c:	f04f 0b00 	mov.w	fp, #0
 8002c60:	9609      	str	r6, [sp, #36]	; 0x24
 8002c62:	9906      	ldr	r1, [sp, #24]
 8002c64:	3930      	subs	r1, #48	; 0x30
 8002c66:	2909      	cmp	r1, #9
 8002c68:	f63f af33 	bhi.w	8002ad2 <_svfprintf_r+0xca>
 8002c6c:	fb00 1b0b 	mla	fp, r0, fp, r1
 8002c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c72:	460e      	mov	r6, r1
 8002c74:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002c78:	9106      	str	r1, [sp, #24]
 8002c7a:	9609      	str	r6, [sp, #36]	; 0x24
 8002c7c:	e7f1      	b.n	8002c62 <_svfprintf_r+0x25a>
 8002c7e:	6839      	ldr	r1, [r7, #0]
 8002c80:	9609      	str	r6, [sp, #36]	; 0x24
 8002c82:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8002c86:	3704      	adds	r7, #4
 8002c88:	e791      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002c8a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002c8e:	e78e      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002c90:	2100      	movs	r1, #0
 8002c92:	910c      	str	r1, [sp, #48]	; 0x30
 8002c94:	9906      	ldr	r1, [sp, #24]
 8002c96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002c98:	3930      	subs	r1, #48	; 0x30
 8002c9a:	fb00 1106 	mla	r1, r0, r6, r1
 8002c9e:	910c      	str	r1, [sp, #48]	; 0x30
 8002ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ca2:	460e      	mov	r6, r1
 8002ca4:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002ca8:	9106      	str	r1, [sp, #24]
 8002caa:	9906      	ldr	r1, [sp, #24]
 8002cac:	9609      	str	r6, [sp, #36]	; 0x24
 8002cae:	3930      	subs	r1, #48	; 0x30
 8002cb0:	2909      	cmp	r1, #9
 8002cb2:	d9ef      	bls.n	8002c94 <_svfprintf_r+0x28c>
 8002cb4:	e70d      	b.n	8002ad2 <_svfprintf_r+0xca>
 8002cb6:	f045 0508 	orr.w	r5, r5, #8
 8002cba:	e778      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002cbc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002cc0:	e775      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cc4:	7809      	ldrb	r1, [r1, #0]
 8002cc6:	296c      	cmp	r1, #108	; 0x6c
 8002cc8:	d105      	bne.n	8002cd6 <_svfprintf_r+0x2ce>
 8002cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ccc:	3101      	adds	r1, #1
 8002cce:	9109      	str	r1, [sp, #36]	; 0x24
 8002cd0:	f045 0520 	orr.w	r5, r5, #32
 8002cd4:	e76b      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002cd6:	f045 0510 	orr.w	r5, r5, #16
 8002cda:	e768      	b.n	8002bae <_svfprintf_r+0x1a6>
 8002cdc:	2600      	movs	r6, #0
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	9308      	str	r3, [sp, #32]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8002ce8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8002cec:	f04f 0b01 	mov.w	fp, #1
 8002cf0:	4637      	mov	r7, r6
 8002cf2:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8002cf6:	e11c      	b.n	8002f32 <_svfprintf_r+0x52a>
 8002cf8:	b10b      	cbz	r3, 8002cfe <_svfprintf_r+0x2f6>
 8002cfa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002cfe:	f045 0510 	orr.w	r5, r5, #16
 8002d02:	e75b      	b.n	8002bbc <_svfprintf_r+0x1b4>
 8002d04:	f015 0f10 	tst.w	r5, #16
 8002d08:	f107 0304 	add.w	r3, r7, #4
 8002d0c:	d003      	beq.n	8002d16 <_svfprintf_r+0x30e>
 8002d0e:	683e      	ldr	r6, [r7, #0]
 8002d10:	9308      	str	r3, [sp, #32]
 8002d12:	17f7      	asrs	r7, r6, #31
 8002d14:	e75d      	b.n	8002bd2 <_svfprintf_r+0x1ca>
 8002d16:	683e      	ldr	r6, [r7, #0]
 8002d18:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d1c:	9308      	str	r3, [sp, #32]
 8002d1e:	bf18      	it	ne
 8002d20:	b236      	sxthne	r6, r6
 8002d22:	e7f6      	b.n	8002d12 <_svfprintf_r+0x30a>
 8002d24:	b10b      	cbz	r3, 8002d2a <_svfprintf_r+0x322>
 8002d26:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002d2a:	3707      	adds	r7, #7
 8002d2c:	f027 0707 	bic.w	r7, r7, #7
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	9308      	str	r3, [sp, #32]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002d42:	930e      	str	r3, [sp, #56]	; 0x38
 8002d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d46:	4638      	mov	r0, r7
 8002d48:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8002d4c:	4631      	mov	r1, r6
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <_svfprintf_r+0x470>)
 8002d50:	f7fd fe58 	bl	8000a04 <__aeabi_dcmpun>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	f040 85dc 	bne.w	8003912 <_svfprintf_r+0xf0a>
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d5e:	4b46      	ldr	r3, [pc, #280]	; (8002e78 <_svfprintf_r+0x470>)
 8002d60:	4638      	mov	r0, r7
 8002d62:	4631      	mov	r1, r6
 8002d64:	f7fd fe30 	bl	80009c8 <__aeabi_dcmple>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	f040 85d2 	bne.w	8003912 <_svfprintf_r+0xf0a>
 8002d6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002d72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002d74:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002d76:	f7fd fe1d 	bl	80009b4 <__aeabi_dcmplt>
 8002d7a:	b110      	cbz	r0, 8002d82 <_svfprintf_r+0x37a>
 8002d7c:	232d      	movs	r3, #45	; 0x2d
 8002d7e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <_svfprintf_r+0x474>)
 8002d84:	4a3e      	ldr	r2, [pc, #248]	; (8002e80 <_svfprintf_r+0x478>)
 8002d86:	9906      	ldr	r1, [sp, #24]
 8002d88:	f04f 0b03 	mov.w	fp, #3
 8002d8c:	2947      	cmp	r1, #71	; 0x47
 8002d8e:	bfcc      	ite	gt
 8002d90:	4690      	movgt	r8, r2
 8002d92:	4698      	movle	r8, r3
 8002d94:	2600      	movs	r6, #0
 8002d96:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002d9a:	4637      	mov	r7, r6
 8002d9c:	e0c9      	b.n	8002f32 <_svfprintf_r+0x52a>
 8002d9e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8002da2:	d026      	beq.n	8002df2 <_svfprintf_r+0x3ea>
 8002da4:	9b06      	ldr	r3, [sp, #24]
 8002da6:	f023 0320 	bic.w	r3, r3, #32
 8002daa:	2b47      	cmp	r3, #71	; 0x47
 8002dac:	d104      	bne.n	8002db8 <_svfprintf_r+0x3b0>
 8002dae:	f1bb 0f00 	cmp.w	fp, #0
 8002db2:	bf08      	it	eq
 8002db4:	f04f 0b01 	moveq.w	fp, #1
 8002db8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002dbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8002dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dc0:	1e1f      	subs	r7, r3, #0
 8002dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dc4:	bfa8      	it	ge
 8002dc6:	9710      	strge	r7, [sp, #64]	; 0x40
 8002dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002dca:	bfbd      	ittte	lt
 8002dcc:	463b      	movlt	r3, r7
 8002dce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002dd2:	9310      	strlt	r3, [sp, #64]	; 0x40
 8002dd4:	2300      	movge	r3, #0
 8002dd6:	bfb8      	it	lt
 8002dd8:	232d      	movlt	r3, #45	; 0x2d
 8002dda:	9316      	str	r3, [sp, #88]	; 0x58
 8002ddc:	9b06      	ldr	r3, [sp, #24]
 8002dde:	f023 0720 	bic.w	r7, r3, #32
 8002de2:	2f46      	cmp	r7, #70	; 0x46
 8002de4:	d008      	beq.n	8002df8 <_svfprintf_r+0x3f0>
 8002de6:	2f45      	cmp	r7, #69	; 0x45
 8002de8:	d142      	bne.n	8002e70 <_svfprintf_r+0x468>
 8002dea:	f10b 0601 	add.w	r6, fp, #1
 8002dee:	2302      	movs	r3, #2
 8002df0:	e004      	b.n	8002dfc <_svfprintf_r+0x3f4>
 8002df2:	f04f 0b06 	mov.w	fp, #6
 8002df6:	e7df      	b.n	8002db8 <_svfprintf_r+0x3b0>
 8002df8:	465e      	mov	r6, fp
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8002dfe:	9204      	str	r2, [sp, #16]
 8002e00:	aa1c      	add	r2, sp, #112	; 0x70
 8002e02:	9203      	str	r2, [sp, #12]
 8002e04:	aa1b      	add	r2, sp, #108	; 0x6c
 8002e06:	9202      	str	r2, [sp, #8]
 8002e08:	e88d 0048 	stmia.w	sp, {r3, r6}
 8002e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e10:	4650      	mov	r0, sl
 8002e12:	f000 fe55 	bl	8003ac0 <_dtoa_r>
 8002e16:	2f47      	cmp	r7, #71	; 0x47
 8002e18:	4680      	mov	r8, r0
 8002e1a:	d102      	bne.n	8002e22 <_svfprintf_r+0x41a>
 8002e1c:	07e8      	lsls	r0, r5, #31
 8002e1e:	f140 8585 	bpl.w	800392c <_svfprintf_r+0xf24>
 8002e22:	eb08 0306 	add.w	r3, r8, r6
 8002e26:	2f46      	cmp	r7, #70	; 0x46
 8002e28:	9307      	str	r3, [sp, #28]
 8002e2a:	d111      	bne.n	8002e50 <_svfprintf_r+0x448>
 8002e2c:	f898 3000 	ldrb.w	r3, [r8]
 8002e30:	2b30      	cmp	r3, #48	; 0x30
 8002e32:	d109      	bne.n	8002e48 <_svfprintf_r+0x440>
 8002e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002e3a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002e3c:	f7fd fdb0 	bl	80009a0 <__aeabi_dcmpeq>
 8002e40:	b910      	cbnz	r0, 8002e48 <_svfprintf_r+0x440>
 8002e42:	f1c6 0601 	rsb	r6, r6, #1
 8002e46:	961b      	str	r6, [sp, #108]	; 0x6c
 8002e48:	9a07      	ldr	r2, [sp, #28]
 8002e4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002e4c:	441a      	add	r2, r3
 8002e4e:	9207      	str	r2, [sp, #28]
 8002e50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e54:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002e56:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002e58:	f7fd fda2 	bl	80009a0 <__aeabi_dcmpeq>
 8002e5c:	b990      	cbnz	r0, 8002e84 <_svfprintf_r+0x47c>
 8002e5e:	2230      	movs	r2, #48	; 0x30
 8002e60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e62:	9907      	ldr	r1, [sp, #28]
 8002e64:	4299      	cmp	r1, r3
 8002e66:	d90f      	bls.n	8002e88 <_svfprintf_r+0x480>
 8002e68:	1c59      	adds	r1, r3, #1
 8002e6a:	911f      	str	r1, [sp, #124]	; 0x7c
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e7f7      	b.n	8002e60 <_svfprintf_r+0x458>
 8002e70:	465e      	mov	r6, fp
 8002e72:	e7bc      	b.n	8002dee <_svfprintf_r+0x3e6>
 8002e74:	08005894 	.word	0x08005894
 8002e78:	7fefffff 	.word	0x7fefffff
 8002e7c:	08005884 	.word	0x08005884
 8002e80:	08005888 	.word	0x08005888
 8002e84:	9b07      	ldr	r3, [sp, #28]
 8002e86:	931f      	str	r3, [sp, #124]	; 0x7c
 8002e88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e8a:	2f47      	cmp	r7, #71	; 0x47
 8002e8c:	eba3 0308 	sub.w	r3, r3, r8
 8002e90:	9307      	str	r3, [sp, #28]
 8002e92:	f040 8100 	bne.w	8003096 <_svfprintf_r+0x68e>
 8002e96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002e98:	1cd9      	adds	r1, r3, #3
 8002e9a:	db02      	blt.n	8002ea2 <_svfprintf_r+0x49a>
 8002e9c:	459b      	cmp	fp, r3
 8002e9e:	f280 8126 	bge.w	80030ee <_svfprintf_r+0x6e6>
 8002ea2:	9b06      	ldr	r3, [sp, #24]
 8002ea4:	3b02      	subs	r3, #2
 8002ea6:	9306      	str	r3, [sp, #24]
 8002ea8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002eaa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8002eae:	1e53      	subs	r3, r2, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bfa8      	it	ge
 8002eb4:	222b      	movge	r2, #43	; 0x2b
 8002eb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8002eb8:	bfbc      	itt	lt
 8002eba:	f1c2 0301 	rsblt	r3, r2, #1
 8002ebe:	222d      	movlt	r2, #45	; 0x2d
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8002ec6:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8002eca:	f340 8100 	ble.w	80030ce <_svfprintf_r+0x6c6>
 8002ece:	260a      	movs	r6, #10
 8002ed0:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8002ed4:	fb93 f0f6 	sdiv	r0, r3, r6
 8002ed8:	fb06 3310 	mls	r3, r6, r0, r3
 8002edc:	2809      	cmp	r0, #9
 8002ede:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002ee2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002ee6:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8002eea:	4603      	mov	r3, r0
 8002eec:	f300 80e8 	bgt.w	80030c0 <_svfprintf_r+0x6b8>
 8002ef0:	3330      	adds	r3, #48	; 0x30
 8002ef2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002ef6:	3a02      	subs	r2, #2
 8002ef8:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8002efc:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8002f00:	4282      	cmp	r2, r0
 8002f02:	4619      	mov	r1, r3
 8002f04:	f0c0 80de 	bcc.w	80030c4 <_svfprintf_r+0x6bc>
 8002f08:	9a07      	ldr	r2, [sp, #28]
 8002f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f0c:	1acb      	subs	r3, r1, r3
 8002f0e:	2a01      	cmp	r2, #1
 8002f10:	9314      	str	r3, [sp, #80]	; 0x50
 8002f12:	eb03 0b02 	add.w	fp, r3, r2
 8002f16:	dc02      	bgt.n	8002f1e <_svfprintf_r+0x516>
 8002f18:	f015 0701 	ands.w	r7, r5, #1
 8002f1c:	d002      	beq.n	8002f24 <_svfprintf_r+0x51c>
 8002f1e:	2700      	movs	r7, #0
 8002f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f22:	449b      	add	fp, r3
 8002f24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002f26:	b113      	cbz	r3, 8002f2e <_svfprintf_r+0x526>
 8002f28:	232d      	movs	r3, #45	; 0x2d
 8002f2a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002f2e:	2600      	movs	r6, #0
 8002f30:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002f32:	455e      	cmp	r6, fp
 8002f34:	4633      	mov	r3, r6
 8002f36:	bfb8      	it	lt
 8002f38:	465b      	movlt	r3, fp
 8002f3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f3c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8002f40:	b113      	cbz	r3, 8002f48 <_svfprintf_r+0x540>
 8002f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f44:	3301      	adds	r3, #1
 8002f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f48:	f015 0302 	ands.w	r3, r5, #2
 8002f4c:	9316      	str	r3, [sp, #88]	; 0x58
 8002f4e:	bf1e      	ittt	ne
 8002f50:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8002f52:	3302      	addne	r3, #2
 8002f54:	930f      	strne	r3, [sp, #60]	; 0x3c
 8002f56:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002f5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8002f5c:	d118      	bne.n	8002f90 <_svfprintf_r+0x588>
 8002f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	9310      	str	r3, [sp, #64]	; 0x40
 8002f68:	dd12      	ble.n	8002f90 <_svfprintf_r+0x588>
 8002f6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	4bab      	ldr	r3, [pc, #684]	; (800321c <_svfprintf_r+0x814>)
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	f300 81d9 	bgt.w	8003328 <_svfprintf_r+0x920>
 8002f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f7a:	6063      	str	r3, [r4, #4]
 8002f7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f7e:	4413      	add	r3, r2
 8002f80:	9323      	str	r3, [sp, #140]	; 0x8c
 8002f82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f84:	3301      	adds	r3, #1
 8002f86:	2b07      	cmp	r3, #7
 8002f88:	9322      	str	r3, [sp, #136]	; 0x88
 8002f8a:	f300 81e6 	bgt.w	800335a <_svfprintf_r+0x952>
 8002f8e:	3408      	adds	r4, #8
 8002f90:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8002f94:	b173      	cbz	r3, 8002fb4 <_svfprintf_r+0x5ac>
 8002f96:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6063      	str	r3, [r4, #4]
 8002fa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	9323      	str	r3, [sp, #140]	; 0x8c
 8002fa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fa8:	3301      	adds	r3, #1
 8002faa:	2b07      	cmp	r3, #7
 8002fac:	9322      	str	r3, [sp, #136]	; 0x88
 8002fae:	f300 81de 	bgt.w	800336e <_svfprintf_r+0x966>
 8002fb2:	3408      	adds	r4, #8
 8002fb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002fb6:	b16b      	cbz	r3, 8002fd4 <_svfprintf_r+0x5cc>
 8002fb8:	ab1a      	add	r3, sp, #104	; 0x68
 8002fba:	6023      	str	r3, [r4, #0]
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	6063      	str	r3, [r4, #4]
 8002fc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	9323      	str	r3, [sp, #140]	; 0x8c
 8002fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fc8:	3301      	adds	r3, #1
 8002fca:	2b07      	cmp	r3, #7
 8002fcc:	9322      	str	r3, [sp, #136]	; 0x88
 8002fce:	f300 81d8 	bgt.w	8003382 <_svfprintf_r+0x97a>
 8002fd2:	3408      	adds	r4, #8
 8002fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d118      	bne.n	800300c <_svfprintf_r+0x604>
 8002fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	9310      	str	r3, [sp, #64]	; 0x40
 8002fe4:	dd12      	ble.n	800300c <_svfprintf_r+0x604>
 8002fe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	4b8d      	ldr	r3, [pc, #564]	; (8003220 <_svfprintf_r+0x818>)
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	f300 81d2 	bgt.w	8003396 <_svfprintf_r+0x98e>
 8002ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002ff6:	6063      	str	r3, [r4, #4]
 8002ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ffa:	4413      	add	r3, r2
 8002ffc:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003000:	3301      	adds	r3, #1
 8003002:	2b07      	cmp	r3, #7
 8003004:	9322      	str	r3, [sp, #136]	; 0x88
 8003006:	f300 81df 	bgt.w	80033c8 <_svfprintf_r+0x9c0>
 800300a:	3408      	adds	r4, #8
 800300c:	eba6 060b 	sub.w	r6, r6, fp
 8003010:	2e00      	cmp	r6, #0
 8003012:	dd0f      	ble.n	8003034 <_svfprintf_r+0x62c>
 8003014:	4b82      	ldr	r3, [pc, #520]	; (8003220 <_svfprintf_r+0x818>)
 8003016:	2e10      	cmp	r6, #16
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	f300 81df 	bgt.w	80033dc <_svfprintf_r+0x9d4>
 800301e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003020:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8003022:	3301      	adds	r3, #1
 8003024:	6066      	str	r6, [r4, #4]
 8003026:	2b07      	cmp	r3, #7
 8003028:	4406      	add	r6, r0
 800302a:	9623      	str	r6, [sp, #140]	; 0x8c
 800302c:	9322      	str	r3, [sp, #136]	; 0x88
 800302e:	f300 81ec 	bgt.w	800340a <_svfprintf_r+0xa02>
 8003032:	3408      	adds	r4, #8
 8003034:	05eb      	lsls	r3, r5, #23
 8003036:	f100 81f2 	bmi.w	800341e <_svfprintf_r+0xa16>
 800303a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800303c:	e884 0900 	stmia.w	r4, {r8, fp}
 8003040:	445b      	add	r3, fp
 8003042:	9323      	str	r3, [sp, #140]	; 0x8c
 8003044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003046:	3301      	adds	r3, #1
 8003048:	2b07      	cmp	r3, #7
 800304a:	9322      	str	r3, [sp, #136]	; 0x88
 800304c:	f340 8419 	ble.w	8003882 <_svfprintf_r+0xe7a>
 8003050:	aa21      	add	r2, sp, #132	; 0x84
 8003052:	4649      	mov	r1, r9
 8003054:	4650      	mov	r0, sl
 8003056:	f002 f831 	bl	80050bc <__ssprint_r>
 800305a:	2800      	cmp	r0, #0
 800305c:	f040 8431 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8003060:	ac2e      	add	r4, sp, #184	; 0xb8
 8003062:	076b      	lsls	r3, r5, #29
 8003064:	f100 8410 	bmi.w	8003888 <_svfprintf_r+0xe80>
 8003068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800306a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800306c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800306e:	428a      	cmp	r2, r1
 8003070:	bfac      	ite	ge
 8003072:	189b      	addge	r3, r3, r2
 8003074:	185b      	addlt	r3, r3, r1
 8003076:	930b      	str	r3, [sp, #44]	; 0x2c
 8003078:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800307a:	b13b      	cbz	r3, 800308c <_svfprintf_r+0x684>
 800307c:	aa21      	add	r2, sp, #132	; 0x84
 800307e:	4649      	mov	r1, r9
 8003080:	4650      	mov	r0, sl
 8003082:	f002 f81b 	bl	80050bc <__ssprint_r>
 8003086:	2800      	cmp	r0, #0
 8003088:	f040 841b 	bne.w	80038c2 <_svfprintf_r+0xeba>
 800308c:	2300      	movs	r3, #0
 800308e:	9f08      	ldr	r7, [sp, #32]
 8003090:	9322      	str	r3, [sp, #136]	; 0x88
 8003092:	ac2e      	add	r4, sp, #184	; 0xb8
 8003094:	e4f2      	b.n	8002a7c <_svfprintf_r+0x74>
 8003096:	9b06      	ldr	r3, [sp, #24]
 8003098:	2b65      	cmp	r3, #101	; 0x65
 800309a:	f77f af05 	ble.w	8002ea8 <_svfprintf_r+0x4a0>
 800309e:	9b06      	ldr	r3, [sp, #24]
 80030a0:	2b66      	cmp	r3, #102	; 0x66
 80030a2:	d124      	bne.n	80030ee <_svfprintf_r+0x6e6>
 80030a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dd19      	ble.n	80030de <_svfprintf_r+0x6d6>
 80030aa:	f1bb 0f00 	cmp.w	fp, #0
 80030ae:	d101      	bne.n	80030b4 <_svfprintf_r+0x6ac>
 80030b0:	07ea      	lsls	r2, r5, #31
 80030b2:	d502      	bpl.n	80030ba <_svfprintf_r+0x6b2>
 80030b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030b6:	4413      	add	r3, r2
 80030b8:	445b      	add	r3, fp
 80030ba:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80030bc:	469b      	mov	fp, r3
 80030be:	e731      	b.n	8002f24 <_svfprintf_r+0x51c>
 80030c0:	460a      	mov	r2, r1
 80030c2:	e707      	b.n	8002ed4 <_svfprintf_r+0x4cc>
 80030c4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80030c8:	f803 1b01 	strb.w	r1, [r3], #1
 80030cc:	e718      	b.n	8002f00 <_svfprintf_r+0x4f8>
 80030ce:	2230      	movs	r2, #48	; 0x30
 80030d0:	4413      	add	r3, r2
 80030d2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80030d6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80030da:	a91e      	add	r1, sp, #120	; 0x78
 80030dc:	e714      	b.n	8002f08 <_svfprintf_r+0x500>
 80030de:	f1bb 0f00 	cmp.w	fp, #0
 80030e2:	d101      	bne.n	80030e8 <_svfprintf_r+0x6e0>
 80030e4:	07eb      	lsls	r3, r5, #31
 80030e6:	d515      	bpl.n	8003114 <_svfprintf_r+0x70c>
 80030e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030ea:	3301      	adds	r3, #1
 80030ec:	e7e4      	b.n	80030b8 <_svfprintf_r+0x6b0>
 80030ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80030f0:	9b07      	ldr	r3, [sp, #28]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	db06      	blt.n	8003104 <_svfprintf_r+0x6fc>
 80030f6:	07ef      	lsls	r7, r5, #31
 80030f8:	d50e      	bpl.n	8003118 <_svfprintf_r+0x710>
 80030fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030fc:	4413      	add	r3, r2
 80030fe:	2267      	movs	r2, #103	; 0x67
 8003100:	9206      	str	r2, [sp, #24]
 8003102:	e7da      	b.n	80030ba <_svfprintf_r+0x6b2>
 8003104:	9b07      	ldr	r3, [sp, #28]
 8003106:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003108:	2a00      	cmp	r2, #0
 800310a:	440b      	add	r3, r1
 800310c:	dcf7      	bgt.n	80030fe <_svfprintf_r+0x6f6>
 800310e:	f1c2 0201 	rsb	r2, r2, #1
 8003112:	e7f3      	b.n	80030fc <_svfprintf_r+0x6f4>
 8003114:	2301      	movs	r3, #1
 8003116:	e7d0      	b.n	80030ba <_svfprintf_r+0x6b2>
 8003118:	4613      	mov	r3, r2
 800311a:	e7f0      	b.n	80030fe <_svfprintf_r+0x6f6>
 800311c:	b10b      	cbz	r3, 8003122 <_svfprintf_r+0x71a>
 800311e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003122:	f015 0f20 	tst.w	r5, #32
 8003126:	f107 0304 	add.w	r3, r7, #4
 800312a:	d008      	beq.n	800313e <_svfprintf_r+0x736>
 800312c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	17ce      	asrs	r6, r1, #31
 8003132:	4608      	mov	r0, r1
 8003134:	4631      	mov	r1, r6
 8003136:	e9c2 0100 	strd	r0, r1, [r2]
 800313a:	461f      	mov	r7, r3
 800313c:	e49e      	b.n	8002a7c <_svfprintf_r+0x74>
 800313e:	06ee      	lsls	r6, r5, #27
 8003140:	d503      	bpl.n	800314a <_svfprintf_r+0x742>
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003146:	6011      	str	r1, [r2, #0]
 8003148:	e7f7      	b.n	800313a <_svfprintf_r+0x732>
 800314a:	0668      	lsls	r0, r5, #25
 800314c:	d5f9      	bpl.n	8003142 <_svfprintf_r+0x73a>
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8003154:	8011      	strh	r1, [r2, #0]
 8003156:	e7f0      	b.n	800313a <_svfprintf_r+0x732>
 8003158:	f045 0510 	orr.w	r5, r5, #16
 800315c:	f015 0320 	ands.w	r3, r5, #32
 8003160:	d022      	beq.n	80031a8 <_svfprintf_r+0x7a0>
 8003162:	3707      	adds	r7, #7
 8003164:	f027 0707 	bic.w	r7, r7, #7
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	9308      	str	r3, [sp, #32]
 800316e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003172:	2300      	movs	r3, #0
 8003174:	2200      	movs	r2, #0
 8003176:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800317a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800317e:	f000 83db 	beq.w	8003938 <_svfprintf_r+0xf30>
 8003182:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8003186:	920f      	str	r2, [sp, #60]	; 0x3c
 8003188:	ea56 0207 	orrs.w	r2, r6, r7
 800318c:	f040 83d9 	bne.w	8003942 <_svfprintf_r+0xf3a>
 8003190:	f1bb 0f00 	cmp.w	fp, #0
 8003194:	f000 80aa 	beq.w	80032ec <_svfprintf_r+0x8e4>
 8003198:	2b01      	cmp	r3, #1
 800319a:	d076      	beq.n	800328a <_svfprintf_r+0x882>
 800319c:	2b02      	cmp	r3, #2
 800319e:	f000 8091 	beq.w	80032c4 <_svfprintf_r+0x8bc>
 80031a2:	2600      	movs	r6, #0
 80031a4:	2700      	movs	r7, #0
 80031a6:	e3d2      	b.n	800394e <_svfprintf_r+0xf46>
 80031a8:	1d3a      	adds	r2, r7, #4
 80031aa:	f015 0110 	ands.w	r1, r5, #16
 80031ae:	9208      	str	r2, [sp, #32]
 80031b0:	d002      	beq.n	80031b8 <_svfprintf_r+0x7b0>
 80031b2:	683e      	ldr	r6, [r7, #0]
 80031b4:	2700      	movs	r7, #0
 80031b6:	e7dd      	b.n	8003174 <_svfprintf_r+0x76c>
 80031b8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80031bc:	d0f9      	beq.n	80031b2 <_svfprintf_r+0x7aa>
 80031be:	883e      	ldrh	r6, [r7, #0]
 80031c0:	2700      	movs	r7, #0
 80031c2:	e7d6      	b.n	8003172 <_svfprintf_r+0x76a>
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	9308      	str	r3, [sp, #32]
 80031c8:	2330      	movs	r3, #48	; 0x30
 80031ca:	2278      	movs	r2, #120	; 0x78
 80031cc:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <_svfprintf_r+0x81c>)
 80031d2:	683e      	ldr	r6, [r7, #0]
 80031d4:	9315      	str	r3, [sp, #84]	; 0x54
 80031d6:	2700      	movs	r7, #0
 80031d8:	f045 0502 	orr.w	r5, r5, #2
 80031dc:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80031e0:	2302      	movs	r3, #2
 80031e2:	9206      	str	r2, [sp, #24]
 80031e4:	e7c6      	b.n	8003174 <_svfprintf_r+0x76c>
 80031e6:	2600      	movs	r6, #0
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80031ee:	9308      	str	r3, [sp, #32]
 80031f0:	f8d7 8000 	ldr.w	r8, [r7]
 80031f4:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80031f8:	d00a      	beq.n	8003210 <_svfprintf_r+0x808>
 80031fa:	465a      	mov	r2, fp
 80031fc:	4631      	mov	r1, r6
 80031fe:	4640      	mov	r0, r8
 8003200:	f001 fc54 	bl	8004aac <memchr>
 8003204:	2800      	cmp	r0, #0
 8003206:	f000 808d 	beq.w	8003324 <_svfprintf_r+0x91c>
 800320a:	eba0 0b08 	sub.w	fp, r0, r8
 800320e:	e5c4      	b.n	8002d9a <_svfprintf_r+0x392>
 8003210:	4640      	mov	r0, r8
 8003212:	f7fc ff9d 	bl	8000150 <strlen>
 8003216:	4683      	mov	fp, r0
 8003218:	e5bf      	b.n	8002d9a <_svfprintf_r+0x392>
 800321a:	bf00      	nop
 800321c:	080058b8 	.word	0x080058b8
 8003220:	080058c8 	.word	0x080058c8
 8003224:	080058a5 	.word	0x080058a5
 8003228:	f045 0510 	orr.w	r5, r5, #16
 800322c:	06a9      	lsls	r1, r5, #26
 800322e:	d509      	bpl.n	8003244 <_svfprintf_r+0x83c>
 8003230:	3707      	adds	r7, #7
 8003232:	f027 0707 	bic.w	r7, r7, #7
 8003236:	f107 0308 	add.w	r3, r7, #8
 800323a:	9308      	str	r3, [sp, #32]
 800323c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003240:	2301      	movs	r3, #1
 8003242:	e797      	b.n	8003174 <_svfprintf_r+0x76c>
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	f015 0f10 	tst.w	r5, #16
 800324a:	9308      	str	r3, [sp, #32]
 800324c:	d001      	beq.n	8003252 <_svfprintf_r+0x84a>
 800324e:	683e      	ldr	r6, [r7, #0]
 8003250:	e002      	b.n	8003258 <_svfprintf_r+0x850>
 8003252:	066a      	lsls	r2, r5, #25
 8003254:	d5fb      	bpl.n	800324e <_svfprintf_r+0x846>
 8003256:	883e      	ldrh	r6, [r7, #0]
 8003258:	2700      	movs	r7, #0
 800325a:	e7f1      	b.n	8003240 <_svfprintf_r+0x838>
 800325c:	b10b      	cbz	r3, 8003262 <_svfprintf_r+0x85a>
 800325e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003262:	4ba3      	ldr	r3, [pc, #652]	; (80034f0 <_svfprintf_r+0xae8>)
 8003264:	e4c5      	b.n	8002bf2 <_svfprintf_r+0x1ea>
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	f015 0f10 	tst.w	r5, #16
 800326c:	9308      	str	r3, [sp, #32]
 800326e:	d001      	beq.n	8003274 <_svfprintf_r+0x86c>
 8003270:	683e      	ldr	r6, [r7, #0]
 8003272:	e002      	b.n	800327a <_svfprintf_r+0x872>
 8003274:	066e      	lsls	r6, r5, #25
 8003276:	d5fb      	bpl.n	8003270 <_svfprintf_r+0x868>
 8003278:	883e      	ldrh	r6, [r7, #0]
 800327a:	2700      	movs	r7, #0
 800327c:	e4c5      	b.n	8002c0a <_svfprintf_r+0x202>
 800327e:	4643      	mov	r3, r8
 8003280:	e366      	b.n	8003950 <_svfprintf_r+0xf48>
 8003282:	2f00      	cmp	r7, #0
 8003284:	bf08      	it	eq
 8003286:	2e0a      	cmpeq	r6, #10
 8003288:	d205      	bcs.n	8003296 <_svfprintf_r+0x88e>
 800328a:	3630      	adds	r6, #48	; 0x30
 800328c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8003290:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003294:	e377      	b.n	8003986 <_svfprintf_r+0xf7e>
 8003296:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800329a:	4630      	mov	r0, r6
 800329c:	4639      	mov	r1, r7
 800329e:	220a      	movs	r2, #10
 80032a0:	2300      	movs	r3, #0
 80032a2:	f7fd fbed 	bl	8000a80 <__aeabi_uldivmod>
 80032a6:	3230      	adds	r2, #48	; 0x30
 80032a8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80032ac:	2300      	movs	r3, #0
 80032ae:	4630      	mov	r0, r6
 80032b0:	4639      	mov	r1, r7
 80032b2:	220a      	movs	r2, #10
 80032b4:	f7fd fbe4 	bl	8000a80 <__aeabi_uldivmod>
 80032b8:	4606      	mov	r6, r0
 80032ba:	460f      	mov	r7, r1
 80032bc:	ea56 0307 	orrs.w	r3, r6, r7
 80032c0:	d1eb      	bne.n	800329a <_svfprintf_r+0x892>
 80032c2:	e360      	b.n	8003986 <_svfprintf_r+0xf7e>
 80032c4:	2600      	movs	r6, #0
 80032c6:	2700      	movs	r7, #0
 80032c8:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80032cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032ce:	f006 030f 	and.w	r3, r6, #15
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	093a      	lsrs	r2, r7, #4
 80032d6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80032da:	0933      	lsrs	r3, r6, #4
 80032dc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80032e0:	461e      	mov	r6, r3
 80032e2:	4617      	mov	r7, r2
 80032e4:	ea56 0307 	orrs.w	r3, r6, r7
 80032e8:	d1f0      	bne.n	80032cc <_svfprintf_r+0x8c4>
 80032ea:	e34c      	b.n	8003986 <_svfprintf_r+0xf7e>
 80032ec:	b93b      	cbnz	r3, 80032fe <_svfprintf_r+0x8f6>
 80032ee:	07ea      	lsls	r2, r5, #31
 80032f0:	d505      	bpl.n	80032fe <_svfprintf_r+0x8f6>
 80032f2:	2330      	movs	r3, #48	; 0x30
 80032f4:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80032f8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80032fc:	e343      	b.n	8003986 <_svfprintf_r+0xf7e>
 80032fe:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8003302:	e340      	b.n	8003986 <_svfprintf_r+0xf7e>
 8003304:	b10b      	cbz	r3, 800330a <_svfprintf_r+0x902>
 8003306:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800330a:	9b06      	ldr	r3, [sp, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 82f7 	beq.w	8003900 <_svfprintf_r+0xef8>
 8003312:	2600      	movs	r6, #0
 8003314:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003318:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800331c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8003320:	9708      	str	r7, [sp, #32]
 8003322:	e4e3      	b.n	8002cec <_svfprintf_r+0x2e4>
 8003324:	4606      	mov	r6, r0
 8003326:	e538      	b.n	8002d9a <_svfprintf_r+0x392>
 8003328:	2310      	movs	r3, #16
 800332a:	6063      	str	r3, [r4, #4]
 800332c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800332e:	3310      	adds	r3, #16
 8003330:	9323      	str	r3, [sp, #140]	; 0x8c
 8003332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003334:	3301      	adds	r3, #1
 8003336:	2b07      	cmp	r3, #7
 8003338:	9322      	str	r3, [sp, #136]	; 0x88
 800333a:	dc04      	bgt.n	8003346 <_svfprintf_r+0x93e>
 800333c:	3408      	adds	r4, #8
 800333e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003340:	3b10      	subs	r3, #16
 8003342:	9310      	str	r3, [sp, #64]	; 0x40
 8003344:	e611      	b.n	8002f6a <_svfprintf_r+0x562>
 8003346:	aa21      	add	r2, sp, #132	; 0x84
 8003348:	4649      	mov	r1, r9
 800334a:	4650      	mov	r0, sl
 800334c:	f001 feb6 	bl	80050bc <__ssprint_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	f040 82b6 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8003356:	ac2e      	add	r4, sp, #184	; 0xb8
 8003358:	e7f1      	b.n	800333e <_svfprintf_r+0x936>
 800335a:	aa21      	add	r2, sp, #132	; 0x84
 800335c:	4649      	mov	r1, r9
 800335e:	4650      	mov	r0, sl
 8003360:	f001 feac 	bl	80050bc <__ssprint_r>
 8003364:	2800      	cmp	r0, #0
 8003366:	f040 82ac 	bne.w	80038c2 <_svfprintf_r+0xeba>
 800336a:	ac2e      	add	r4, sp, #184	; 0xb8
 800336c:	e610      	b.n	8002f90 <_svfprintf_r+0x588>
 800336e:	aa21      	add	r2, sp, #132	; 0x84
 8003370:	4649      	mov	r1, r9
 8003372:	4650      	mov	r0, sl
 8003374:	f001 fea2 	bl	80050bc <__ssprint_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	f040 82a2 	bne.w	80038c2 <_svfprintf_r+0xeba>
 800337e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003380:	e618      	b.n	8002fb4 <_svfprintf_r+0x5ac>
 8003382:	aa21      	add	r2, sp, #132	; 0x84
 8003384:	4649      	mov	r1, r9
 8003386:	4650      	mov	r0, sl
 8003388:	f001 fe98 	bl	80050bc <__ssprint_r>
 800338c:	2800      	cmp	r0, #0
 800338e:	f040 8298 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8003392:	ac2e      	add	r4, sp, #184	; 0xb8
 8003394:	e61e      	b.n	8002fd4 <_svfprintf_r+0x5cc>
 8003396:	2310      	movs	r3, #16
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800339c:	3310      	adds	r3, #16
 800339e:	9323      	str	r3, [sp, #140]	; 0x8c
 80033a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033a2:	3301      	adds	r3, #1
 80033a4:	2b07      	cmp	r3, #7
 80033a6:	9322      	str	r3, [sp, #136]	; 0x88
 80033a8:	dc04      	bgt.n	80033b4 <_svfprintf_r+0x9ac>
 80033aa:	3408      	adds	r4, #8
 80033ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033ae:	3b10      	subs	r3, #16
 80033b0:	9310      	str	r3, [sp, #64]	; 0x40
 80033b2:	e618      	b.n	8002fe6 <_svfprintf_r+0x5de>
 80033b4:	aa21      	add	r2, sp, #132	; 0x84
 80033b6:	4649      	mov	r1, r9
 80033b8:	4650      	mov	r0, sl
 80033ba:	f001 fe7f 	bl	80050bc <__ssprint_r>
 80033be:	2800      	cmp	r0, #0
 80033c0:	f040 827f 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80033c4:	ac2e      	add	r4, sp, #184	; 0xb8
 80033c6:	e7f1      	b.n	80033ac <_svfprintf_r+0x9a4>
 80033c8:	aa21      	add	r2, sp, #132	; 0x84
 80033ca:	4649      	mov	r1, r9
 80033cc:	4650      	mov	r0, sl
 80033ce:	f001 fe75 	bl	80050bc <__ssprint_r>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	f040 8275 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80033d8:	ac2e      	add	r4, sp, #184	; 0xb8
 80033da:	e617      	b.n	800300c <_svfprintf_r+0x604>
 80033dc:	2310      	movs	r3, #16
 80033de:	6063      	str	r3, [r4, #4]
 80033e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80033e2:	3310      	adds	r3, #16
 80033e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80033e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033e8:	3301      	adds	r3, #1
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	9322      	str	r3, [sp, #136]	; 0x88
 80033ee:	dc02      	bgt.n	80033f6 <_svfprintf_r+0x9ee>
 80033f0:	3408      	adds	r4, #8
 80033f2:	3e10      	subs	r6, #16
 80033f4:	e60e      	b.n	8003014 <_svfprintf_r+0x60c>
 80033f6:	aa21      	add	r2, sp, #132	; 0x84
 80033f8:	4649      	mov	r1, r9
 80033fa:	4650      	mov	r0, sl
 80033fc:	f001 fe5e 	bl	80050bc <__ssprint_r>
 8003400:	2800      	cmp	r0, #0
 8003402:	f040 825e 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8003406:	ac2e      	add	r4, sp, #184	; 0xb8
 8003408:	e7f3      	b.n	80033f2 <_svfprintf_r+0x9ea>
 800340a:	aa21      	add	r2, sp, #132	; 0x84
 800340c:	4649      	mov	r1, r9
 800340e:	4650      	mov	r0, sl
 8003410:	f001 fe54 	bl	80050bc <__ssprint_r>
 8003414:	2800      	cmp	r0, #0
 8003416:	f040 8254 	bne.w	80038c2 <_svfprintf_r+0xeba>
 800341a:	ac2e      	add	r4, sp, #184	; 0xb8
 800341c:	e60a      	b.n	8003034 <_svfprintf_r+0x62c>
 800341e:	9b06      	ldr	r3, [sp, #24]
 8003420:	2b65      	cmp	r3, #101	; 0x65
 8003422:	f340 81a9 	ble.w	8003778 <_svfprintf_r+0xd70>
 8003426:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800342a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800342c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800342e:	f7fd fab7 	bl	80009a0 <__aeabi_dcmpeq>
 8003432:	2800      	cmp	r0, #0
 8003434:	d062      	beq.n	80034fc <_svfprintf_r+0xaf4>
 8003436:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <_svfprintf_r+0xaec>)
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	2301      	movs	r3, #1
 800343c:	6063      	str	r3, [r4, #4]
 800343e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003440:	3301      	adds	r3, #1
 8003442:	9323      	str	r3, [sp, #140]	; 0x8c
 8003444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003446:	3301      	adds	r3, #1
 8003448:	2b07      	cmp	r3, #7
 800344a:	9322      	str	r3, [sp, #136]	; 0x88
 800344c:	dc25      	bgt.n	800349a <_svfprintf_r+0xa92>
 800344e:	3408      	adds	r4, #8
 8003450:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003452:	9a07      	ldr	r2, [sp, #28]
 8003454:	4293      	cmp	r3, r2
 8003456:	db02      	blt.n	800345e <_svfprintf_r+0xa56>
 8003458:	07ee      	lsls	r6, r5, #31
 800345a:	f57f ae02 	bpl.w	8003062 <_svfprintf_r+0x65a>
 800345e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003462:	6023      	str	r3, [r4, #0]
 8003464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003466:	6063      	str	r3, [r4, #4]
 8003468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800346a:	4413      	add	r3, r2
 800346c:	9323      	str	r3, [sp, #140]	; 0x8c
 800346e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003470:	3301      	adds	r3, #1
 8003472:	2b07      	cmp	r3, #7
 8003474:	9322      	str	r3, [sp, #136]	; 0x88
 8003476:	dc1a      	bgt.n	80034ae <_svfprintf_r+0xaa6>
 8003478:	3408      	adds	r4, #8
 800347a:	9b07      	ldr	r3, [sp, #28]
 800347c:	1e5e      	subs	r6, r3, #1
 800347e:	2e00      	cmp	r6, #0
 8003480:	f77f adef 	ble.w	8003062 <_svfprintf_r+0x65a>
 8003484:	f04f 0810 	mov.w	r8, #16
 8003488:	4f1b      	ldr	r7, [pc, #108]	; (80034f8 <_svfprintf_r+0xaf0>)
 800348a:	2e10      	cmp	r6, #16
 800348c:	6027      	str	r7, [r4, #0]
 800348e:	dc18      	bgt.n	80034c2 <_svfprintf_r+0xaba>
 8003490:	6066      	str	r6, [r4, #4]
 8003492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003494:	441e      	add	r6, r3
 8003496:	9623      	str	r6, [sp, #140]	; 0x8c
 8003498:	e5d4      	b.n	8003044 <_svfprintf_r+0x63c>
 800349a:	aa21      	add	r2, sp, #132	; 0x84
 800349c:	4649      	mov	r1, r9
 800349e:	4650      	mov	r0, sl
 80034a0:	f001 fe0c 	bl	80050bc <__ssprint_r>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	f040 820c 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80034aa:	ac2e      	add	r4, sp, #184	; 0xb8
 80034ac:	e7d0      	b.n	8003450 <_svfprintf_r+0xa48>
 80034ae:	aa21      	add	r2, sp, #132	; 0x84
 80034b0:	4649      	mov	r1, r9
 80034b2:	4650      	mov	r0, sl
 80034b4:	f001 fe02 	bl	80050bc <__ssprint_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	f040 8202 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80034be:	ac2e      	add	r4, sp, #184	; 0xb8
 80034c0:	e7db      	b.n	800347a <_svfprintf_r+0xa72>
 80034c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034c4:	f8c4 8004 	str.w	r8, [r4, #4]
 80034c8:	3310      	adds	r3, #16
 80034ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80034cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034ce:	3301      	adds	r3, #1
 80034d0:	2b07      	cmp	r3, #7
 80034d2:	9322      	str	r3, [sp, #136]	; 0x88
 80034d4:	dc02      	bgt.n	80034dc <_svfprintf_r+0xad4>
 80034d6:	3408      	adds	r4, #8
 80034d8:	3e10      	subs	r6, #16
 80034da:	e7d6      	b.n	800348a <_svfprintf_r+0xa82>
 80034dc:	aa21      	add	r2, sp, #132	; 0x84
 80034de:	4649      	mov	r1, r9
 80034e0:	4650      	mov	r0, sl
 80034e2:	f001 fdeb 	bl	80050bc <__ssprint_r>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	f040 81eb 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80034ec:	ac2e      	add	r4, sp, #184	; 0xb8
 80034ee:	e7f3      	b.n	80034d8 <_svfprintf_r+0xad0>
 80034f0:	080058a5 	.word	0x080058a5
 80034f4:	080058b6 	.word	0x080058b6
 80034f8:	080058c8 	.word	0x080058c8
 80034fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dc7a      	bgt.n	80035f8 <_svfprintf_r+0xbf0>
 8003502:	4b9b      	ldr	r3, [pc, #620]	; (8003770 <_svfprintf_r+0xd68>)
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	2301      	movs	r3, #1
 8003508:	6063      	str	r3, [r4, #4]
 800350a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800350c:	3301      	adds	r3, #1
 800350e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003510:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003512:	3301      	adds	r3, #1
 8003514:	2b07      	cmp	r3, #7
 8003516:	9322      	str	r3, [sp, #136]	; 0x88
 8003518:	dc44      	bgt.n	80035a4 <_svfprintf_r+0xb9c>
 800351a:	3408      	adds	r4, #8
 800351c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800351e:	b923      	cbnz	r3, 800352a <_svfprintf_r+0xb22>
 8003520:	9b07      	ldr	r3, [sp, #28]
 8003522:	b913      	cbnz	r3, 800352a <_svfprintf_r+0xb22>
 8003524:	07e8      	lsls	r0, r5, #31
 8003526:	f57f ad9c 	bpl.w	8003062 <_svfprintf_r+0x65a>
 800352a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800352c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003532:	6063      	str	r3, [r4, #4]
 8003534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003536:	4413      	add	r3, r2
 8003538:	9323      	str	r3, [sp, #140]	; 0x8c
 800353a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800353c:	3301      	adds	r3, #1
 800353e:	2b07      	cmp	r3, #7
 8003540:	9322      	str	r3, [sp, #136]	; 0x88
 8003542:	dc39      	bgt.n	80035b8 <_svfprintf_r+0xbb0>
 8003544:	f104 0308 	add.w	r3, r4, #8
 8003548:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800354a:	2e00      	cmp	r6, #0
 800354c:	da19      	bge.n	8003582 <_svfprintf_r+0xb7a>
 800354e:	2410      	movs	r4, #16
 8003550:	4f88      	ldr	r7, [pc, #544]	; (8003774 <_svfprintf_r+0xd6c>)
 8003552:	4276      	negs	r6, r6
 8003554:	2e10      	cmp	r6, #16
 8003556:	601f      	str	r7, [r3, #0]
 8003558:	dc38      	bgt.n	80035cc <_svfprintf_r+0xbc4>
 800355a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800355c:	605e      	str	r6, [r3, #4]
 800355e:	4416      	add	r6, r2
 8003560:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003562:	9623      	str	r6, [sp, #140]	; 0x8c
 8003564:	3201      	adds	r2, #1
 8003566:	2a07      	cmp	r2, #7
 8003568:	f103 0308 	add.w	r3, r3, #8
 800356c:	9222      	str	r2, [sp, #136]	; 0x88
 800356e:	dd08      	ble.n	8003582 <_svfprintf_r+0xb7a>
 8003570:	aa21      	add	r2, sp, #132	; 0x84
 8003572:	4649      	mov	r1, r9
 8003574:	4650      	mov	r0, sl
 8003576:	f001 fda1 	bl	80050bc <__ssprint_r>
 800357a:	2800      	cmp	r0, #0
 800357c:	f040 81a1 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8003580:	ab2e      	add	r3, sp, #184	; 0xb8
 8003582:	9a07      	ldr	r2, [sp, #28]
 8003584:	9907      	ldr	r1, [sp, #28]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800358a:	f8c3 8000 	str.w	r8, [r3]
 800358e:	440a      	add	r2, r1
 8003590:	9223      	str	r2, [sp, #140]	; 0x8c
 8003592:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003594:	3201      	adds	r2, #1
 8003596:	2a07      	cmp	r2, #7
 8003598:	9222      	str	r2, [sp, #136]	; 0x88
 800359a:	f73f ad59 	bgt.w	8003050 <_svfprintf_r+0x648>
 800359e:	f103 0408 	add.w	r4, r3, #8
 80035a2:	e55e      	b.n	8003062 <_svfprintf_r+0x65a>
 80035a4:	aa21      	add	r2, sp, #132	; 0x84
 80035a6:	4649      	mov	r1, r9
 80035a8:	4650      	mov	r0, sl
 80035aa:	f001 fd87 	bl	80050bc <__ssprint_r>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	f040 8187 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80035b4:	ac2e      	add	r4, sp, #184	; 0xb8
 80035b6:	e7b1      	b.n	800351c <_svfprintf_r+0xb14>
 80035b8:	aa21      	add	r2, sp, #132	; 0x84
 80035ba:	4649      	mov	r1, r9
 80035bc:	4650      	mov	r0, sl
 80035be:	f001 fd7d 	bl	80050bc <__ssprint_r>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f040 817d 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80035c8:	ab2e      	add	r3, sp, #184	; 0xb8
 80035ca:	e7bd      	b.n	8003548 <_svfprintf_r+0xb40>
 80035cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80035ce:	605c      	str	r4, [r3, #4]
 80035d0:	3210      	adds	r2, #16
 80035d2:	9223      	str	r2, [sp, #140]	; 0x8c
 80035d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80035d6:	3201      	adds	r2, #1
 80035d8:	2a07      	cmp	r2, #7
 80035da:	9222      	str	r2, [sp, #136]	; 0x88
 80035dc:	dc02      	bgt.n	80035e4 <_svfprintf_r+0xbdc>
 80035de:	3308      	adds	r3, #8
 80035e0:	3e10      	subs	r6, #16
 80035e2:	e7b7      	b.n	8003554 <_svfprintf_r+0xb4c>
 80035e4:	aa21      	add	r2, sp, #132	; 0x84
 80035e6:	4649      	mov	r1, r9
 80035e8:	4650      	mov	r0, sl
 80035ea:	f001 fd67 	bl	80050bc <__ssprint_r>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	f040 8167 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80035f4:	ab2e      	add	r3, sp, #184	; 0xb8
 80035f6:	e7f3      	b.n	80035e0 <_svfprintf_r+0xbd8>
 80035f8:	9b07      	ldr	r3, [sp, #28]
 80035fa:	42bb      	cmp	r3, r7
 80035fc:	bfa8      	it	ge
 80035fe:	463b      	movge	r3, r7
 8003600:	2b00      	cmp	r3, #0
 8003602:	461e      	mov	r6, r3
 8003604:	dd0b      	ble.n	800361e <_svfprintf_r+0xc16>
 8003606:	6063      	str	r3, [r4, #4]
 8003608:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800360a:	f8c4 8000 	str.w	r8, [r4]
 800360e:	4433      	add	r3, r6
 8003610:	9323      	str	r3, [sp, #140]	; 0x8c
 8003612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003614:	3301      	adds	r3, #1
 8003616:	2b07      	cmp	r3, #7
 8003618:	9322      	str	r3, [sp, #136]	; 0x88
 800361a:	dc5f      	bgt.n	80036dc <_svfprintf_r+0xcd4>
 800361c:	3408      	adds	r4, #8
 800361e:	2e00      	cmp	r6, #0
 8003620:	bfb4      	ite	lt
 8003622:	463e      	movlt	r6, r7
 8003624:	1bbe      	subge	r6, r7, r6
 8003626:	2e00      	cmp	r6, #0
 8003628:	dd0f      	ble.n	800364a <_svfprintf_r+0xc42>
 800362a:	f8df b148 	ldr.w	fp, [pc, #328]	; 8003774 <_svfprintf_r+0xd6c>
 800362e:	2e10      	cmp	r6, #16
 8003630:	f8c4 b000 	str.w	fp, [r4]
 8003634:	dc5c      	bgt.n	80036f0 <_svfprintf_r+0xce8>
 8003636:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003638:	6066      	str	r6, [r4, #4]
 800363a:	441e      	add	r6, r3
 800363c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800363e:	9623      	str	r6, [sp, #140]	; 0x8c
 8003640:	3301      	adds	r3, #1
 8003642:	2b07      	cmp	r3, #7
 8003644:	9322      	str	r3, [sp, #136]	; 0x88
 8003646:	dc6a      	bgt.n	800371e <_svfprintf_r+0xd16>
 8003648:	3408      	adds	r4, #8
 800364a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800364c:	9a07      	ldr	r2, [sp, #28]
 800364e:	4293      	cmp	r3, r2
 8003650:	db01      	blt.n	8003656 <_svfprintf_r+0xc4e>
 8003652:	07e9      	lsls	r1, r5, #31
 8003654:	d50d      	bpl.n	8003672 <_svfprintf_r+0xc6a>
 8003656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800365e:	6063      	str	r3, [r4, #4]
 8003660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003662:	4413      	add	r3, r2
 8003664:	9323      	str	r3, [sp, #140]	; 0x8c
 8003666:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003668:	3301      	adds	r3, #1
 800366a:	2b07      	cmp	r3, #7
 800366c:	9322      	str	r3, [sp, #136]	; 0x88
 800366e:	dc60      	bgt.n	8003732 <_svfprintf_r+0xd2a>
 8003670:	3408      	adds	r4, #8
 8003672:	9b07      	ldr	r3, [sp, #28]
 8003674:	9a07      	ldr	r2, [sp, #28]
 8003676:	1bde      	subs	r6, r3, r7
 8003678:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	429e      	cmp	r6, r3
 800367e:	bfa8      	it	ge
 8003680:	461e      	movge	r6, r3
 8003682:	2e00      	cmp	r6, #0
 8003684:	dd0b      	ble.n	800369e <_svfprintf_r+0xc96>
 8003686:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003688:	4447      	add	r7, r8
 800368a:	4433      	add	r3, r6
 800368c:	9323      	str	r3, [sp, #140]	; 0x8c
 800368e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003690:	6027      	str	r7, [r4, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	2b07      	cmp	r3, #7
 8003696:	6066      	str	r6, [r4, #4]
 8003698:	9322      	str	r3, [sp, #136]	; 0x88
 800369a:	dc54      	bgt.n	8003746 <_svfprintf_r+0xd3e>
 800369c:	3408      	adds	r4, #8
 800369e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80036a0:	9a07      	ldr	r2, [sp, #28]
 80036a2:	2e00      	cmp	r6, #0
 80036a4:	eba2 0303 	sub.w	r3, r2, r3
 80036a8:	bfb4      	ite	lt
 80036aa:	461e      	movlt	r6, r3
 80036ac:	1b9e      	subge	r6, r3, r6
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	f77f acd7 	ble.w	8003062 <_svfprintf_r+0x65a>
 80036b4:	f04f 0810 	mov.w	r8, #16
 80036b8:	4f2e      	ldr	r7, [pc, #184]	; (8003774 <_svfprintf_r+0xd6c>)
 80036ba:	2e10      	cmp	r6, #16
 80036bc:	6027      	str	r7, [r4, #0]
 80036be:	f77f aee7 	ble.w	8003490 <_svfprintf_r+0xa88>
 80036c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036c4:	f8c4 8004 	str.w	r8, [r4, #4]
 80036c8:	3310      	adds	r3, #16
 80036ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80036cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036ce:	3301      	adds	r3, #1
 80036d0:	2b07      	cmp	r3, #7
 80036d2:	9322      	str	r3, [sp, #136]	; 0x88
 80036d4:	dc41      	bgt.n	800375a <_svfprintf_r+0xd52>
 80036d6:	3408      	adds	r4, #8
 80036d8:	3e10      	subs	r6, #16
 80036da:	e7ee      	b.n	80036ba <_svfprintf_r+0xcb2>
 80036dc:	aa21      	add	r2, sp, #132	; 0x84
 80036de:	4649      	mov	r1, r9
 80036e0:	4650      	mov	r0, sl
 80036e2:	f001 fceb 	bl	80050bc <__ssprint_r>
 80036e6:	2800      	cmp	r0, #0
 80036e8:	f040 80eb 	bne.w	80038c2 <_svfprintf_r+0xeba>
 80036ec:	ac2e      	add	r4, sp, #184	; 0xb8
 80036ee:	e796      	b.n	800361e <_svfprintf_r+0xc16>
 80036f0:	2310      	movs	r3, #16
 80036f2:	6063      	str	r3, [r4, #4]
 80036f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036f6:	3310      	adds	r3, #16
 80036f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80036fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036fc:	3301      	adds	r3, #1
 80036fe:	2b07      	cmp	r3, #7
 8003700:	9322      	str	r3, [sp, #136]	; 0x88
 8003702:	dc02      	bgt.n	800370a <_svfprintf_r+0xd02>
 8003704:	3408      	adds	r4, #8
 8003706:	3e10      	subs	r6, #16
 8003708:	e791      	b.n	800362e <_svfprintf_r+0xc26>
 800370a:	aa21      	add	r2, sp, #132	; 0x84
 800370c:	4649      	mov	r1, r9
 800370e:	4650      	mov	r0, sl
 8003710:	f001 fcd4 	bl	80050bc <__ssprint_r>
 8003714:	2800      	cmp	r0, #0
 8003716:	f040 80d4 	bne.w	80038c2 <_svfprintf_r+0xeba>
 800371a:	ac2e      	add	r4, sp, #184	; 0xb8
 800371c:	e7f3      	b.n	8003706 <_svfprintf_r+0xcfe>
 800371e:	aa21      	add	r2, sp, #132	; 0x84
 8003720:	4649      	mov	r1, r9
 8003722:	4650      	mov	r0, sl
 8003724:	f001 fcca 	bl	80050bc <__ssprint_r>
 8003728:	2800      	cmp	r0, #0
 800372a:	f040 80ca 	bne.w	80038c2 <_svfprintf_r+0xeba>
 800372e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003730:	e78b      	b.n	800364a <_svfprintf_r+0xc42>
 8003732:	aa21      	add	r2, sp, #132	; 0x84
 8003734:	4649      	mov	r1, r9
 8003736:	4650      	mov	r0, sl
 8003738:	f001 fcc0 	bl	80050bc <__ssprint_r>
 800373c:	2800      	cmp	r0, #0
 800373e:	f040 80c0 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8003742:	ac2e      	add	r4, sp, #184	; 0xb8
 8003744:	e795      	b.n	8003672 <_svfprintf_r+0xc6a>
 8003746:	aa21      	add	r2, sp, #132	; 0x84
 8003748:	4649      	mov	r1, r9
 800374a:	4650      	mov	r0, sl
 800374c:	f001 fcb6 	bl	80050bc <__ssprint_r>
 8003750:	2800      	cmp	r0, #0
 8003752:	f040 80b6 	bne.w	80038c2 <_svfprintf_r+0xeba>
 8003756:	ac2e      	add	r4, sp, #184	; 0xb8
 8003758:	e7a1      	b.n	800369e <_svfprintf_r+0xc96>
 800375a:	aa21      	add	r2, sp, #132	; 0x84
 800375c:	4649      	mov	r1, r9
 800375e:	4650      	mov	r0, sl
 8003760:	f001 fcac 	bl	80050bc <__ssprint_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	f040 80ac 	bne.w	80038c2 <_svfprintf_r+0xeba>
 800376a:	ac2e      	add	r4, sp, #184	; 0xb8
 800376c:	e7b4      	b.n	80036d8 <_svfprintf_r+0xcd0>
 800376e:	bf00      	nop
 8003770:	080058b6 	.word	0x080058b6
 8003774:	080058c8 	.word	0x080058c8
 8003778:	9b07      	ldr	r3, [sp, #28]
 800377a:	2b01      	cmp	r3, #1
 800377c:	dc01      	bgt.n	8003782 <_svfprintf_r+0xd7a>
 800377e:	07ea      	lsls	r2, r5, #31
 8003780:	d576      	bpl.n	8003870 <_svfprintf_r+0xe68>
 8003782:	2301      	movs	r3, #1
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003788:	f8c4 8000 	str.w	r8, [r4]
 800378c:	3301      	adds	r3, #1
 800378e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003792:	3301      	adds	r3, #1
 8003794:	2b07      	cmp	r3, #7
 8003796:	9322      	str	r3, [sp, #136]	; 0x88
 8003798:	dc36      	bgt.n	8003808 <_svfprintf_r+0xe00>
 800379a:	3408      	adds	r4, #8
 800379c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800379e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037a8:	4413      	add	r3, r2
 80037aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80037ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037ae:	3301      	adds	r3, #1
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	9322      	str	r3, [sp, #136]	; 0x88
 80037b4:	dc31      	bgt.n	800381a <_svfprintf_r+0xe12>
 80037b6:	3408      	adds	r4, #8
 80037b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80037ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80037be:	990e      	ldr	r1, [sp, #56]	; 0x38
 80037c0:	f7fd f8ee 	bl	80009a0 <__aeabi_dcmpeq>
 80037c4:	9b07      	ldr	r3, [sp, #28]
 80037c6:	1e5e      	subs	r6, r3, #1
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d12f      	bne.n	800382c <_svfprintf_r+0xe24>
 80037cc:	f108 0301 	add.w	r3, r8, #1
 80037d0:	e884 0048 	stmia.w	r4, {r3, r6}
 80037d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037d6:	9a07      	ldr	r2, [sp, #28]
 80037d8:	3b01      	subs	r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80037de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037e0:	3301      	adds	r3, #1
 80037e2:	2b07      	cmp	r3, #7
 80037e4:	9322      	str	r3, [sp, #136]	; 0x88
 80037e6:	dd4a      	ble.n	800387e <_svfprintf_r+0xe76>
 80037e8:	aa21      	add	r2, sp, #132	; 0x84
 80037ea:	4649      	mov	r1, r9
 80037ec:	4650      	mov	r0, sl
 80037ee:	f001 fc65 	bl	80050bc <__ssprint_r>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d165      	bne.n	80038c2 <_svfprintf_r+0xeba>
 80037f6:	ac2e      	add	r4, sp, #184	; 0xb8
 80037f8:	ab1d      	add	r3, sp, #116	; 0x74
 80037fa:	6023      	str	r3, [r4, #0]
 80037fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80037fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003800:	6063      	str	r3, [r4, #4]
 8003802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003804:	4413      	add	r3, r2
 8003806:	e41c      	b.n	8003042 <_svfprintf_r+0x63a>
 8003808:	aa21      	add	r2, sp, #132	; 0x84
 800380a:	4649      	mov	r1, r9
 800380c:	4650      	mov	r0, sl
 800380e:	f001 fc55 	bl	80050bc <__ssprint_r>
 8003812:	2800      	cmp	r0, #0
 8003814:	d155      	bne.n	80038c2 <_svfprintf_r+0xeba>
 8003816:	ac2e      	add	r4, sp, #184	; 0xb8
 8003818:	e7c0      	b.n	800379c <_svfprintf_r+0xd94>
 800381a:	aa21      	add	r2, sp, #132	; 0x84
 800381c:	4649      	mov	r1, r9
 800381e:	4650      	mov	r0, sl
 8003820:	f001 fc4c 	bl	80050bc <__ssprint_r>
 8003824:	2800      	cmp	r0, #0
 8003826:	d14c      	bne.n	80038c2 <_svfprintf_r+0xeba>
 8003828:	ac2e      	add	r4, sp, #184	; 0xb8
 800382a:	e7c5      	b.n	80037b8 <_svfprintf_r+0xdb0>
 800382c:	2e00      	cmp	r6, #0
 800382e:	dde3      	ble.n	80037f8 <_svfprintf_r+0xdf0>
 8003830:	f04f 0810 	mov.w	r8, #16
 8003834:	4f58      	ldr	r7, [pc, #352]	; (8003998 <_svfprintf_r+0xf90>)
 8003836:	2e10      	cmp	r6, #16
 8003838:	6027      	str	r7, [r4, #0]
 800383a:	dc04      	bgt.n	8003846 <_svfprintf_r+0xe3e>
 800383c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800383e:	6066      	str	r6, [r4, #4]
 8003840:	441e      	add	r6, r3
 8003842:	9623      	str	r6, [sp, #140]	; 0x8c
 8003844:	e7cb      	b.n	80037de <_svfprintf_r+0xdd6>
 8003846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003848:	f8c4 8004 	str.w	r8, [r4, #4]
 800384c:	3310      	adds	r3, #16
 800384e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003852:	3301      	adds	r3, #1
 8003854:	2b07      	cmp	r3, #7
 8003856:	9322      	str	r3, [sp, #136]	; 0x88
 8003858:	dc02      	bgt.n	8003860 <_svfprintf_r+0xe58>
 800385a:	3408      	adds	r4, #8
 800385c:	3e10      	subs	r6, #16
 800385e:	e7ea      	b.n	8003836 <_svfprintf_r+0xe2e>
 8003860:	aa21      	add	r2, sp, #132	; 0x84
 8003862:	4649      	mov	r1, r9
 8003864:	4650      	mov	r0, sl
 8003866:	f001 fc29 	bl	80050bc <__ssprint_r>
 800386a:	bb50      	cbnz	r0, 80038c2 <_svfprintf_r+0xeba>
 800386c:	ac2e      	add	r4, sp, #184	; 0xb8
 800386e:	e7f5      	b.n	800385c <_svfprintf_r+0xe54>
 8003870:	2301      	movs	r3, #1
 8003872:	6063      	str	r3, [r4, #4]
 8003874:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003876:	f8c4 8000 	str.w	r8, [r4]
 800387a:	3301      	adds	r3, #1
 800387c:	e7ae      	b.n	80037dc <_svfprintf_r+0xdd4>
 800387e:	3408      	adds	r4, #8
 8003880:	e7ba      	b.n	80037f8 <_svfprintf_r+0xdf0>
 8003882:	3408      	adds	r4, #8
 8003884:	f7ff bbed 	b.w	8003062 <_svfprintf_r+0x65a>
 8003888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800388a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800388c:	1a9d      	subs	r5, r3, r2
 800388e:	2d00      	cmp	r5, #0
 8003890:	f77f abea 	ble.w	8003068 <_svfprintf_r+0x660>
 8003894:	2610      	movs	r6, #16
 8003896:	4b41      	ldr	r3, [pc, #260]	; (800399c <_svfprintf_r+0xf94>)
 8003898:	2d10      	cmp	r5, #16
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	dc1b      	bgt.n	80038d6 <_svfprintf_r+0xece>
 800389e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038a0:	6065      	str	r5, [r4, #4]
 80038a2:	441d      	add	r5, r3
 80038a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038a6:	9523      	str	r5, [sp, #140]	; 0x8c
 80038a8:	3301      	adds	r3, #1
 80038aa:	2b07      	cmp	r3, #7
 80038ac:	9322      	str	r3, [sp, #136]	; 0x88
 80038ae:	f77f abdb 	ble.w	8003068 <_svfprintf_r+0x660>
 80038b2:	aa21      	add	r2, sp, #132	; 0x84
 80038b4:	4649      	mov	r1, r9
 80038b6:	4650      	mov	r0, sl
 80038b8:	f001 fc00 	bl	80050bc <__ssprint_r>
 80038bc:	2800      	cmp	r0, #0
 80038be:	f43f abd3 	beq.w	8003068 <_svfprintf_r+0x660>
 80038c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80038c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038cc:	bf18      	it	ne
 80038ce:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80038d2:	f7ff b8bd 	b.w	8002a50 <_svfprintf_r+0x48>
 80038d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038d8:	6066      	str	r6, [r4, #4]
 80038da:	3310      	adds	r3, #16
 80038dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80038de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038e0:	3301      	adds	r3, #1
 80038e2:	2b07      	cmp	r3, #7
 80038e4:	9322      	str	r3, [sp, #136]	; 0x88
 80038e6:	dc02      	bgt.n	80038ee <_svfprintf_r+0xee6>
 80038e8:	3408      	adds	r4, #8
 80038ea:	3d10      	subs	r5, #16
 80038ec:	e7d3      	b.n	8003896 <_svfprintf_r+0xe8e>
 80038ee:	aa21      	add	r2, sp, #132	; 0x84
 80038f0:	4649      	mov	r1, r9
 80038f2:	4650      	mov	r0, sl
 80038f4:	f001 fbe2 	bl	80050bc <__ssprint_r>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1e2      	bne.n	80038c2 <_svfprintf_r+0xeba>
 80038fc:	ac2e      	add	r4, sp, #184	; 0xb8
 80038fe:	e7f4      	b.n	80038ea <_svfprintf_r+0xee2>
 8003900:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0dd      	beq.n	80038c2 <_svfprintf_r+0xeba>
 8003906:	aa21      	add	r2, sp, #132	; 0x84
 8003908:	4649      	mov	r1, r9
 800390a:	4650      	mov	r0, sl
 800390c:	f001 fbd6 	bl	80050bc <__ssprint_r>
 8003910:	e7d7      	b.n	80038c2 <_svfprintf_r+0xeba>
 8003912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003916:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003918:	990e      	ldr	r1, [sp, #56]	; 0x38
 800391a:	f7fd f873 	bl	8000a04 <__aeabi_dcmpun>
 800391e:	2800      	cmp	r0, #0
 8003920:	f43f aa3d 	beq.w	8002d9e <_svfprintf_r+0x396>
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <_svfprintf_r+0xf98>)
 8003926:	4a1f      	ldr	r2, [pc, #124]	; (80039a4 <_svfprintf_r+0xf9c>)
 8003928:	f7ff ba2d 	b.w	8002d86 <_svfprintf_r+0x37e>
 800392c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800392e:	eba3 0308 	sub.w	r3, r3, r8
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	f7ff baaf 	b.w	8002e96 <_svfprintf_r+0x48e>
 8003938:	ea56 0207 	orrs.w	r2, r6, r7
 800393c:	950f      	str	r5, [sp, #60]	; 0x3c
 800393e:	f43f ac2b 	beq.w	8003198 <_svfprintf_r+0x790>
 8003942:	2b01      	cmp	r3, #1
 8003944:	f43f ac9d 	beq.w	8003282 <_svfprintf_r+0x87a>
 8003948:	2b02      	cmp	r3, #2
 800394a:	f43f acbd 	beq.w	80032c8 <_svfprintf_r+0x8c0>
 800394e:	ab2e      	add	r3, sp, #184	; 0xb8
 8003950:	08f1      	lsrs	r1, r6, #3
 8003952:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003956:	08f8      	lsrs	r0, r7, #3
 8003958:	f006 0207 	and.w	r2, r6, #7
 800395c:	4607      	mov	r7, r0
 800395e:	460e      	mov	r6, r1
 8003960:	3230      	adds	r2, #48	; 0x30
 8003962:	ea56 0107 	orrs.w	r1, r6, r7
 8003966:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800396a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800396e:	f47f ac86 	bne.w	800327e <_svfprintf_r+0x876>
 8003972:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003974:	07c9      	lsls	r1, r1, #31
 8003976:	d506      	bpl.n	8003986 <_svfprintf_r+0xf7e>
 8003978:	2a30      	cmp	r2, #48	; 0x30
 800397a:	d004      	beq.n	8003986 <_svfprintf_r+0xf7e>
 800397c:	2230      	movs	r2, #48	; 0x30
 800397e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003982:	f1a3 0802 	sub.w	r8, r3, #2
 8003986:	ab2e      	add	r3, sp, #184	; 0xb8
 8003988:	465e      	mov	r6, fp
 800398a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800398c:	eba3 0b08 	sub.w	fp, r3, r8
 8003990:	2700      	movs	r7, #0
 8003992:	f7ff bace 	b.w	8002f32 <_svfprintf_r+0x52a>
 8003996:	bf00      	nop
 8003998:	080058c8 	.word	0x080058c8
 800399c:	080058b8 	.word	0x080058b8
 80039a0:	0800588c 	.word	0x0800588c
 80039a4:	08005890 	.word	0x08005890

080039a8 <quorem>:
 80039a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	6903      	ldr	r3, [r0, #16]
 80039ae:	690c      	ldr	r4, [r1, #16]
 80039b0:	4680      	mov	r8, r0
 80039b2:	429c      	cmp	r4, r3
 80039b4:	f300 8082 	bgt.w	8003abc <quorem+0x114>
 80039b8:	3c01      	subs	r4, #1
 80039ba:	f101 0714 	add.w	r7, r1, #20
 80039be:	f100 0614 	add.w	r6, r0, #20
 80039c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80039c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80039ca:	3501      	adds	r5, #1
 80039cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80039d0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80039d4:	eb06 030e 	add.w	r3, r6, lr
 80039d8:	eb07 090e 	add.w	r9, r7, lr
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	b38d      	cbz	r5, 8003a44 <quorem+0x9c>
 80039e0:	f04f 0a00 	mov.w	sl, #0
 80039e4:	4638      	mov	r0, r7
 80039e6:	46b4      	mov	ip, r6
 80039e8:	46d3      	mov	fp, sl
 80039ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80039ee:	b293      	uxth	r3, r2
 80039f0:	fb05 a303 	mla	r3, r5, r3, sl
 80039f4:	0c12      	lsrs	r2, r2, #16
 80039f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039fa:	fb05 a202 	mla	r2, r5, r2, sl
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ebab 0303 	sub.w	r3, fp, r3
 8003a04:	f8bc b000 	ldrh.w	fp, [ip]
 8003a08:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003a0c:	445b      	add	r3, fp
 8003a0e:	fa1f fb82 	uxth.w	fp, r2
 8003a12:	f8dc 2000 	ldr.w	r2, [ip]
 8003a16:	4581      	cmp	r9, r0
 8003a18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a26:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003a2a:	f84c 3b04 	str.w	r3, [ip], #4
 8003a2e:	d2dc      	bcs.n	80039ea <quorem+0x42>
 8003a30:	f856 300e 	ldr.w	r3, [r6, lr]
 8003a34:	b933      	cbnz	r3, 8003a44 <quorem+0x9c>
 8003a36:	9b01      	ldr	r3, [sp, #4]
 8003a38:	3b04      	subs	r3, #4
 8003a3a:	429e      	cmp	r6, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	d331      	bcc.n	8003aa4 <quorem+0xfc>
 8003a40:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a44:	4640      	mov	r0, r8
 8003a46:	f001 fa60 	bl	8004f0a <__mcmp>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	db26      	blt.n	8003a9c <quorem+0xf4>
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f04f 0e00 	mov.w	lr, #0
 8003a54:	3501      	adds	r5, #1
 8003a56:	f857 1b04 	ldr.w	r1, [r7], #4
 8003a5a:	f8d0 c000 	ldr.w	ip, [r0]
 8003a5e:	b28b      	uxth	r3, r1
 8003a60:	ebae 0303 	sub.w	r3, lr, r3
 8003a64:	fa1f f28c 	uxth.w	r2, ip
 8003a68:	4413      	add	r3, r2
 8003a6a:	0c0a      	lsrs	r2, r1, #16
 8003a6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a7a:	45b9      	cmp	r9, r7
 8003a7c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003a80:	f840 3b04 	str.w	r3, [r0], #4
 8003a84:	d2e7      	bcs.n	8003a56 <quorem+0xae>
 8003a86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003a8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003a8e:	b92a      	cbnz	r2, 8003a9c <quorem+0xf4>
 8003a90:	3b04      	subs	r3, #4
 8003a92:	429e      	cmp	r6, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	d30b      	bcc.n	8003ab0 <quorem+0x108>
 8003a98:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	b003      	add	sp, #12
 8003aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	d1c9      	bne.n	8003a40 <quorem+0x98>
 8003aac:	3c01      	subs	r4, #1
 8003aae:	e7c4      	b.n	8003a3a <quorem+0x92>
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d1ef      	bne.n	8003a98 <quorem+0xf0>
 8003ab8:	3c01      	subs	r4, #1
 8003aba:	e7ea      	b.n	8003a92 <quorem+0xea>
 8003abc:	2000      	movs	r0, #0
 8003abe:	e7ee      	b.n	8003a9e <quorem+0xf6>

08003ac0 <_dtoa_r>:
 8003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003ac6:	b095      	sub	sp, #84	; 0x54
 8003ac8:	4604      	mov	r4, r0
 8003aca:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ad0:	b93e      	cbnz	r6, 8003ae2 <_dtoa_r+0x22>
 8003ad2:	2010      	movs	r0, #16
 8003ad4:	f000 fdd6 	bl	8004684 <malloc>
 8003ad8:	6260      	str	r0, [r4, #36]	; 0x24
 8003ada:	6046      	str	r6, [r0, #4]
 8003adc:	6086      	str	r6, [r0, #8]
 8003ade:	6006      	str	r6, [r0, #0]
 8003ae0:	60c6      	str	r6, [r0, #12]
 8003ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae4:	6819      	ldr	r1, [r3, #0]
 8003ae6:	b151      	cbz	r1, 8003afe <_dtoa_r+0x3e>
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	2301      	movs	r3, #1
 8003aec:	4093      	lsls	r3, r2
 8003aee:	604a      	str	r2, [r1, #4]
 8003af0:	608b      	str	r3, [r1, #8]
 8003af2:	4620      	mov	r0, r4
 8003af4:	f001 f834 	bl	8004b60 <_Bfree>
 8003af8:	2200      	movs	r2, #0
 8003afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bfb7      	itett	lt
 8003b04:	2301      	movlt	r3, #1
 8003b06:	2300      	movge	r3, #0
 8003b08:	602b      	strlt	r3, [r5, #0]
 8003b0a:	9b03      	ldrlt	r3, [sp, #12]
 8003b0c:	bfae      	itee	ge
 8003b0e:	602b      	strge	r3, [r5, #0]
 8003b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b14:	9303      	strlt	r3, [sp, #12]
 8003b16:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003b1a:	4bab      	ldr	r3, [pc, #684]	; (8003dc8 <_dtoa_r+0x308>)
 8003b1c:	ea33 0309 	bics.w	r3, r3, r9
 8003b20:	d11b      	bne.n	8003b5a <_dtoa_r+0x9a>
 8003b22:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	9b02      	ldr	r3, [sp, #8]
 8003b2c:	b923      	cbnz	r3, 8003b38 <_dtoa_r+0x78>
 8003b2e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8003b32:	2800      	cmp	r0, #0
 8003b34:	f000 8583 	beq.w	800463e <_dtoa_r+0xb7e>
 8003b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b3a:	b953      	cbnz	r3, 8003b52 <_dtoa_r+0x92>
 8003b3c:	4ba3      	ldr	r3, [pc, #652]	; (8003dcc <_dtoa_r+0x30c>)
 8003b3e:	e021      	b.n	8003b84 <_dtoa_r+0xc4>
 8003b40:	4ba3      	ldr	r3, [pc, #652]	; (8003dd0 <_dtoa_r+0x310>)
 8003b42:	9306      	str	r3, [sp, #24]
 8003b44:	3308      	adds	r3, #8
 8003b46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	9806      	ldr	r0, [sp, #24]
 8003b4c:	b015      	add	sp, #84	; 0x54
 8003b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b52:	4b9e      	ldr	r3, [pc, #632]	; (8003dcc <_dtoa_r+0x30c>)
 8003b54:	9306      	str	r3, [sp, #24]
 8003b56:	3303      	adds	r3, #3
 8003b58:	e7f5      	b.n	8003b46 <_dtoa_r+0x86>
 8003b5a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2300      	movs	r3, #0
 8003b62:	4630      	mov	r0, r6
 8003b64:	4639      	mov	r1, r7
 8003b66:	f7fc ff1b 	bl	80009a0 <__aeabi_dcmpeq>
 8003b6a:	4680      	mov	r8, r0
 8003b6c:	b160      	cbz	r0, 8003b88 <_dtoa_r+0xc8>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 855e 	beq.w	8004638 <_dtoa_r+0xb78>
 8003b7c:	4b95      	ldr	r3, [pc, #596]	; (8003dd4 <_dtoa_r+0x314>)
 8003b7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	9306      	str	r3, [sp, #24]
 8003b86:	e7e0      	b.n	8003b4a <_dtoa_r+0x8a>
 8003b88:	ab12      	add	r3, sp, #72	; 0x48
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	ab13      	add	r3, sp, #76	; 0x4c
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4632      	mov	r2, r6
 8003b92:	463b      	mov	r3, r7
 8003b94:	4620      	mov	r0, r4
 8003b96:	f001 fa31 	bl	8004ffc <__d2b>
 8003b9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003b9e:	4682      	mov	sl, r0
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	d07d      	beq.n	8003ca0 <_dtoa_r+0x1e0>
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003baa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003bae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003bb2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003bb6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003bba:	2200      	movs	r2, #0
 8003bbc:	4b86      	ldr	r3, [pc, #536]	; (8003dd8 <_dtoa_r+0x318>)
 8003bbe:	f7fc fad3 	bl	8000168 <__aeabi_dsub>
 8003bc2:	a37b      	add	r3, pc, #492	; (adr r3, 8003db0 <_dtoa_r+0x2f0>)
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f7fc fc82 	bl	80004d0 <__aeabi_dmul>
 8003bcc:	a37a      	add	r3, pc, #488	; (adr r3, 8003db8 <_dtoa_r+0x2f8>)
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	f7fc facb 	bl	800016c <__adddf3>
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	4628      	mov	r0, r5
 8003bda:	460f      	mov	r7, r1
 8003bdc:	f7fc fc12 	bl	8000404 <__aeabi_i2d>
 8003be0:	a377      	add	r3, pc, #476	; (adr r3, 8003dc0 <_dtoa_r+0x300>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f7fc fc73 	bl	80004d0 <__aeabi_dmul>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4630      	mov	r0, r6
 8003bf0:	4639      	mov	r1, r7
 8003bf2:	f7fc fabb 	bl	800016c <__adddf3>
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	460f      	mov	r7, r1
 8003bfa:	f7fc ff19 	bl	8000a30 <__aeabi_d2iz>
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4683      	mov	fp, r0
 8003c02:	2300      	movs	r3, #0
 8003c04:	4630      	mov	r0, r6
 8003c06:	4639      	mov	r1, r7
 8003c08:	f7fc fed4 	bl	80009b4 <__aeabi_dcmplt>
 8003c0c:	b158      	cbz	r0, 8003c26 <_dtoa_r+0x166>
 8003c0e:	4658      	mov	r0, fp
 8003c10:	f7fc fbf8 	bl	8000404 <__aeabi_i2d>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4630      	mov	r0, r6
 8003c1a:	4639      	mov	r1, r7
 8003c1c:	f7fc fec0 	bl	80009a0 <__aeabi_dcmpeq>
 8003c20:	b908      	cbnz	r0, 8003c26 <_dtoa_r+0x166>
 8003c22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c26:	f1bb 0f16 	cmp.w	fp, #22
 8003c2a:	d858      	bhi.n	8003cde <_dtoa_r+0x21e>
 8003c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c30:	496a      	ldr	r1, [pc, #424]	; (8003ddc <_dtoa_r+0x31c>)
 8003c32:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c3a:	f7fc fed9 	bl	80009f0 <__aeabi_dcmpgt>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d04f      	beq.n	8003ce2 <_dtoa_r+0x222>
 8003c42:	2300      	movs	r3, #0
 8003c44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c48:	930d      	str	r3, [sp, #52]	; 0x34
 8003c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c4c:	1b5d      	subs	r5, r3, r5
 8003c4e:	1e6b      	subs	r3, r5, #1
 8003c50:	9307      	str	r3, [sp, #28]
 8003c52:	bf43      	ittte	mi
 8003c54:	2300      	movmi	r3, #0
 8003c56:	f1c5 0801 	rsbmi	r8, r5, #1
 8003c5a:	9307      	strmi	r3, [sp, #28]
 8003c5c:	f04f 0800 	movpl.w	r8, #0
 8003c60:	f1bb 0f00 	cmp.w	fp, #0
 8003c64:	db3f      	blt.n	8003ce6 <_dtoa_r+0x226>
 8003c66:	9b07      	ldr	r3, [sp, #28]
 8003c68:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003c6c:	445b      	add	r3, fp
 8003c6e:	9307      	str	r3, [sp, #28]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9308      	str	r3, [sp, #32]
 8003c74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	f200 80b4 	bhi.w	8003de4 <_dtoa_r+0x324>
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	bfc4      	itt	gt
 8003c80:	3b04      	subgt	r3, #4
 8003c82:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003c84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c86:	bfc8      	it	gt
 8003c88:	2600      	movgt	r6, #0
 8003c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8003c8e:	bfd8      	it	le
 8003c90:	2601      	movle	r6, #1
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	f200 80b2 	bhi.w	8003dfc <_dtoa_r+0x33c>
 8003c98:	e8df f003 	tbb	[pc, r3]
 8003c9c:	782d8684 	.word	0x782d8684
 8003ca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ca2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003ca4:	441d      	add	r5, r3
 8003ca6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	dd11      	ble.n	8003cd2 <_dtoa_r+0x212>
 8003cae:	9a02      	ldr	r2, [sp, #8]
 8003cb0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003cb4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003cb8:	fa22 f000 	lsr.w	r0, r2, r0
 8003cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003cc0:	4318      	orrs	r0, r3
 8003cc2:	f7fc fb8f 	bl	80003e4 <__aeabi_ui2d>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003ccc:	3d01      	subs	r5, #1
 8003cce:	9310      	str	r3, [sp, #64]	; 0x40
 8003cd0:	e773      	b.n	8003bba <_dtoa_r+0xfa>
 8003cd2:	f1c3 0020 	rsb	r0, r3, #32
 8003cd6:	9b02      	ldr	r3, [sp, #8]
 8003cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8003cdc:	e7f1      	b.n	8003cc2 <_dtoa_r+0x202>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e7b2      	b.n	8003c48 <_dtoa_r+0x188>
 8003ce2:	900d      	str	r0, [sp, #52]	; 0x34
 8003ce4:	e7b1      	b.n	8003c4a <_dtoa_r+0x18a>
 8003ce6:	f1cb 0300 	rsb	r3, fp, #0
 8003cea:	9308      	str	r3, [sp, #32]
 8003cec:	2300      	movs	r3, #0
 8003cee:	eba8 080b 	sub.w	r8, r8, fp
 8003cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8003cf4:	e7be      	b.n	8003c74 <_dtoa_r+0x1b4>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f340 8080 	ble.w	8003e02 <_dtoa_r+0x342>
 8003d02:	4699      	mov	r9, r3
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	2200      	movs	r2, #0
 8003d08:	2104      	movs	r1, #4
 8003d0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d0c:	606a      	str	r2, [r5, #4]
 8003d0e:	f101 0214 	add.w	r2, r1, #20
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d97a      	bls.n	8003e0c <_dtoa_r+0x34c>
 8003d16:	6869      	ldr	r1, [r5, #4]
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f000 feed 	bl	8004af8 <_Balloc>
 8003d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d20:	6028      	str	r0, [r5, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b9 0f0e 	cmp.w	r9, #14
 8003d28:	9306      	str	r3, [sp, #24]
 8003d2a:	f200 80f0 	bhi.w	8003f0e <_dtoa_r+0x44e>
 8003d2e:	2e00      	cmp	r6, #0
 8003d30:	f000 80ed 	beq.w	8003f0e <_dtoa_r+0x44e>
 8003d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d38:	f1bb 0f00 	cmp.w	fp, #0
 8003d3c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003d40:	dd79      	ble.n	8003e36 <_dtoa_r+0x376>
 8003d42:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <_dtoa_r+0x31c>)
 8003d44:	f00b 030f 	and.w	r3, fp, #15
 8003d48:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003d4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d50:	06f0      	lsls	r0, r6, #27
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003d5a:	d55c      	bpl.n	8003e16 <_dtoa_r+0x356>
 8003d5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <_dtoa_r+0x320>)
 8003d62:	2503      	movs	r5, #3
 8003d64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d68:	f7fc fcdc 	bl	8000724 <__aeabi_ddiv>
 8003d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d70:	f006 060f 	and.w	r6, r6, #15
 8003d74:	4f1a      	ldr	r7, [pc, #104]	; (8003de0 <_dtoa_r+0x320>)
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	d14f      	bne.n	8003e1a <_dtoa_r+0x35a>
 8003d7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d82:	f7fc fccf 	bl	8000724 <__aeabi_ddiv>
 8003d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d8a:	e06e      	b.n	8003e6a <_dtoa_r+0x3aa>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d92:	445b      	add	r3, fp
 8003d94:	f103 0901 	add.w	r9, r3, #1
 8003d98:	9304      	str	r3, [sp, #16]
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bfb8      	it	lt
 8003da0:	2301      	movlt	r3, #1
 8003da2:	e7b0      	b.n	8003d06 <_dtoa_r+0x246>
 8003da4:	2300      	movs	r3, #0
 8003da6:	e7a7      	b.n	8003cf8 <_dtoa_r+0x238>
 8003da8:	2300      	movs	r3, #0
 8003daa:	e7f0      	b.n	8003d8e <_dtoa_r+0x2ce>
 8003dac:	f3af 8000 	nop.w
 8003db0:	636f4361 	.word	0x636f4361
 8003db4:	3fd287a7 	.word	0x3fd287a7
 8003db8:	8b60c8b3 	.word	0x8b60c8b3
 8003dbc:	3fc68a28 	.word	0x3fc68a28
 8003dc0:	509f79fb 	.word	0x509f79fb
 8003dc4:	3fd34413 	.word	0x3fd34413
 8003dc8:	7ff00000 	.word	0x7ff00000
 8003dcc:	080058e1 	.word	0x080058e1
 8003dd0:	080058d8 	.word	0x080058d8
 8003dd4:	080058b7 	.word	0x080058b7
 8003dd8:	3ff80000 	.word	0x3ff80000
 8003ddc:	08005910 	.word	0x08005910
 8003de0:	080058e8 	.word	0x080058e8
 8003de4:	2601      	movs	r6, #1
 8003de6:	2300      	movs	r3, #0
 8003de8:	9609      	str	r6, [sp, #36]	; 0x24
 8003dea:	931e      	str	r3, [sp, #120]	; 0x78
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003df0:	2200      	movs	r2, #0
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	4699      	mov	r9, r3
 8003df6:	2312      	movs	r3, #18
 8003df8:	921f      	str	r2, [sp, #124]	; 0x7c
 8003dfa:	e784      	b.n	8003d06 <_dtoa_r+0x246>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003e00:	e7f4      	b.n	8003dec <_dtoa_r+0x32c>
 8003e02:	2301      	movs	r3, #1
 8003e04:	9304      	str	r3, [sp, #16]
 8003e06:	4699      	mov	r9, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	e7f5      	b.n	8003df8 <_dtoa_r+0x338>
 8003e0c:	686a      	ldr	r2, [r5, #4]
 8003e0e:	0049      	lsls	r1, r1, #1
 8003e10:	3201      	adds	r2, #1
 8003e12:	606a      	str	r2, [r5, #4]
 8003e14:	e77b      	b.n	8003d0e <_dtoa_r+0x24e>
 8003e16:	2502      	movs	r5, #2
 8003e18:	e7ac      	b.n	8003d74 <_dtoa_r+0x2b4>
 8003e1a:	07f1      	lsls	r1, r6, #31
 8003e1c:	d508      	bpl.n	8003e30 <_dtoa_r+0x370>
 8003e1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e26:	f7fc fb53 	bl	80004d0 <__aeabi_dmul>
 8003e2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e2e:	3501      	adds	r5, #1
 8003e30:	1076      	asrs	r6, r6, #1
 8003e32:	3708      	adds	r7, #8
 8003e34:	e79f      	b.n	8003d76 <_dtoa_r+0x2b6>
 8003e36:	f000 80a5 	beq.w	8003f84 <_dtoa_r+0x4c4>
 8003e3a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e3e:	f1cb 0600 	rsb	r6, fp, #0
 8003e42:	4ba2      	ldr	r3, [pc, #648]	; (80040cc <_dtoa_r+0x60c>)
 8003e44:	f006 020f 	and.w	r2, r6, #15
 8003e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fb3e 	bl	80004d0 <__aeabi_dmul>
 8003e54:	2502      	movs	r5, #2
 8003e56:	2300      	movs	r3, #0
 8003e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e5c:	4f9c      	ldr	r7, [pc, #624]	; (80040d0 <_dtoa_r+0x610>)
 8003e5e:	1136      	asrs	r6, r6, #4
 8003e60:	2e00      	cmp	r6, #0
 8003e62:	f040 8084 	bne.w	8003f6e <_dtoa_r+0x4ae>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d18d      	bne.n	8003d86 <_dtoa_r+0x2c6>
 8003e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 808b 	beq.w	8003f88 <_dtoa_r+0x4c8>
 8003e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003e7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e7e:	2200      	movs	r2, #0
 8003e80:	4b94      	ldr	r3, [pc, #592]	; (80040d4 <_dtoa_r+0x614>)
 8003e82:	f7fc fd97 	bl	80009b4 <__aeabi_dcmplt>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d07e      	beq.n	8003f88 <_dtoa_r+0x4c8>
 8003e8a:	f1b9 0f00 	cmp.w	r9, #0
 8003e8e:	d07b      	beq.n	8003f88 <_dtoa_r+0x4c8>
 8003e90:	9b04      	ldr	r3, [sp, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	dd37      	ble.n	8003f06 <_dtoa_r+0x446>
 8003e96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	; (80040d8 <_dtoa_r+0x618>)
 8003e9e:	f7fc fb17 	bl	80004d0 <__aeabi_dmul>
 8003ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ea6:	9e04      	ldr	r6, [sp, #16]
 8003ea8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003eac:	3501      	adds	r5, #1
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f7fc faa8 	bl	8000404 <__aeabi_i2d>
 8003eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003eb8:	f7fc fb0a 	bl	80004d0 <__aeabi_dmul>
 8003ebc:	4b87      	ldr	r3, [pc, #540]	; (80040dc <_dtoa_r+0x61c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f7fc f954 	bl	800016c <__adddf3>
 8003ec4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003eca:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003ece:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ed0:	2e00      	cmp	r6, #0
 8003ed2:	d15c      	bne.n	8003f8e <_dtoa_r+0x4ce>
 8003ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	4b81      	ldr	r3, [pc, #516]	; (80040e0 <_dtoa_r+0x620>)
 8003edc:	f7fc f944 	bl	8000168 <__aeabi_dsub>
 8003ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ee8:	f7fc fd82 	bl	80009f0 <__aeabi_dcmpgt>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	f040 82f7 	bne.w	80044e0 <_dtoa_r+0xa20>
 8003ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ef8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003efc:	f7fc fd5a 	bl	80009b4 <__aeabi_dcmplt>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	f040 82eb 	bne.w	80044dc <_dtoa_r+0xa1c>
 8003f06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f2c0 8150 	blt.w	80041b6 <_dtoa_r+0x6f6>
 8003f16:	f1bb 0f0e 	cmp.w	fp, #14
 8003f1a:	f300 814c 	bgt.w	80041b6 <_dtoa_r+0x6f6>
 8003f1e:	4b6b      	ldr	r3, [pc, #428]	; (80040cc <_dtoa_r+0x60c>)
 8003f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f280 80da 	bge.w	80040e8 <_dtoa_r+0x628>
 8003f34:	f1b9 0f00 	cmp.w	r9, #0
 8003f38:	f300 80d6 	bgt.w	80040e8 <_dtoa_r+0x628>
 8003f3c:	f040 82cd 	bne.w	80044da <_dtoa_r+0xa1a>
 8003f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f44:	2200      	movs	r2, #0
 8003f46:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <_dtoa_r+0x620>)
 8003f48:	f7fc fac2 	bl	80004d0 <__aeabi_dmul>
 8003f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f50:	f7fc fd44 	bl	80009dc <__aeabi_dcmpge>
 8003f54:	464e      	mov	r6, r9
 8003f56:	464f      	mov	r7, r9
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	f040 82a4 	bne.w	80044a6 <_dtoa_r+0x9e6>
 8003f5e:	9b06      	ldr	r3, [sp, #24]
 8003f60:	9a06      	ldr	r2, [sp, #24]
 8003f62:	1c5d      	adds	r5, r3, #1
 8003f64:	2331      	movs	r3, #49	; 0x31
 8003f66:	f10b 0b01 	add.w	fp, fp, #1
 8003f6a:	7013      	strb	r3, [r2, #0]
 8003f6c:	e29f      	b.n	80044ae <_dtoa_r+0x9ee>
 8003f6e:	07f2      	lsls	r2, r6, #31
 8003f70:	d505      	bpl.n	8003f7e <_dtoa_r+0x4be>
 8003f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f76:	f7fc faab 	bl	80004d0 <__aeabi_dmul>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	3501      	adds	r5, #1
 8003f7e:	1076      	asrs	r6, r6, #1
 8003f80:	3708      	adds	r7, #8
 8003f82:	e76d      	b.n	8003e60 <_dtoa_r+0x3a0>
 8003f84:	2502      	movs	r5, #2
 8003f86:	e770      	b.n	8003e6a <_dtoa_r+0x3aa>
 8003f88:	465f      	mov	r7, fp
 8003f8a:	464e      	mov	r6, r9
 8003f8c:	e78f      	b.n	8003eae <_dtoa_r+0x3ee>
 8003f8e:	9a06      	ldr	r2, [sp, #24]
 8003f90:	4b4e      	ldr	r3, [pc, #312]	; (80040cc <_dtoa_r+0x60c>)
 8003f92:	4432      	add	r2, r6
 8003f94:	9211      	str	r2, [sp, #68]	; 0x44
 8003f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f98:	1e71      	subs	r1, r6, #1
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	d048      	beq.n	8004030 <_dtoa_r+0x570>
 8003f9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	494e      	ldr	r1, [pc, #312]	; (80040e4 <_dtoa_r+0x624>)
 8003faa:	f7fc fbbb 	bl	8000724 <__aeabi_ddiv>
 8003fae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fb2:	f7fc f8d9 	bl	8000168 <__aeabi_dsub>
 8003fb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003fba:	9d06      	ldr	r5, [sp, #24]
 8003fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fc0:	f7fc fd36 	bl	8000a30 <__aeabi_d2iz>
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	f7fc fa1d 	bl	8000404 <__aeabi_i2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fd2:	f7fc f8c9 	bl	8000168 <__aeabi_dsub>
 8003fd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fda:	3630      	adds	r6, #48	; 0x30
 8003fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8003fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fe4:	f7fc fce6 	bl	80009b4 <__aeabi_dcmplt>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d164      	bne.n	80040b6 <_dtoa_r+0x5f6>
 8003fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	4938      	ldr	r1, [pc, #224]	; (80040d4 <_dtoa_r+0x614>)
 8003ff4:	f7fc f8b8 	bl	8000168 <__aeabi_dsub>
 8003ff8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ffc:	f7fc fcda 	bl	80009b4 <__aeabi_dcmplt>
 8004000:	2800      	cmp	r0, #0
 8004002:	f040 80b9 	bne.w	8004178 <_dtoa_r+0x6b8>
 8004006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004008:	429d      	cmp	r5, r3
 800400a:	f43f af7c 	beq.w	8003f06 <_dtoa_r+0x446>
 800400e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004012:	2200      	movs	r2, #0
 8004014:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <_dtoa_r+0x618>)
 8004016:	f7fc fa5b 	bl	80004d0 <__aeabi_dmul>
 800401a:	2200      	movs	r2, #0
 800401c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004024:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <_dtoa_r+0x618>)
 8004026:	f7fc fa53 	bl	80004d0 <__aeabi_dmul>
 800402a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800402e:	e7c5      	b.n	8003fbc <_dtoa_r+0x4fc>
 8004030:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004038:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800403c:	f7fc fa48 	bl	80004d0 <__aeabi_dmul>
 8004040:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004044:	9d06      	ldr	r5, [sp, #24]
 8004046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800404a:	f7fc fcf1 	bl	8000a30 <__aeabi_d2iz>
 800404e:	4606      	mov	r6, r0
 8004050:	f7fc f9d8 	bl	8000404 <__aeabi_i2d>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800405c:	f7fc f884 	bl	8000168 <__aeabi_dsub>
 8004060:	3630      	adds	r6, #48	; 0x30
 8004062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004064:	f805 6b01 	strb.w	r6, [r5], #1
 8004068:	42ab      	cmp	r3, r5
 800406a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	d124      	bne.n	80040be <_dtoa_r+0x5fe>
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <_dtoa_r+0x624>)
 8004076:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800407a:	f7fc f877 	bl	800016c <__adddf3>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004086:	f7fc fcb3 	bl	80009f0 <__aeabi_dcmpgt>
 800408a:	2800      	cmp	r0, #0
 800408c:	d174      	bne.n	8004178 <_dtoa_r+0x6b8>
 800408e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004092:	2000      	movs	r0, #0
 8004094:	4913      	ldr	r1, [pc, #76]	; (80040e4 <_dtoa_r+0x624>)
 8004096:	f7fc f867 	bl	8000168 <__aeabi_dsub>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a2:	f7fc fc87 	bl	80009b4 <__aeabi_dcmplt>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f43f af2d 	beq.w	8003f06 <_dtoa_r+0x446>
 80040ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040b0:	1e6a      	subs	r2, r5, #1
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d001      	beq.n	80040ba <_dtoa_r+0x5fa>
 80040b6:	46bb      	mov	fp, r7
 80040b8:	e04d      	b.n	8004156 <_dtoa_r+0x696>
 80040ba:	4615      	mov	r5, r2
 80040bc:	e7f6      	b.n	80040ac <_dtoa_r+0x5ec>
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <_dtoa_r+0x618>)
 80040c0:	f7fc fa06 	bl	80004d0 <__aeabi_dmul>
 80040c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040c8:	e7bd      	b.n	8004046 <_dtoa_r+0x586>
 80040ca:	bf00      	nop
 80040cc:	08005910 	.word	0x08005910
 80040d0:	080058e8 	.word	0x080058e8
 80040d4:	3ff00000 	.word	0x3ff00000
 80040d8:	40240000 	.word	0x40240000
 80040dc:	401c0000 	.word	0x401c0000
 80040e0:	40140000 	.word	0x40140000
 80040e4:	3fe00000 	.word	0x3fe00000
 80040e8:	9d06      	ldr	r5, [sp, #24]
 80040ea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f2:	4630      	mov	r0, r6
 80040f4:	4639      	mov	r1, r7
 80040f6:	f7fc fb15 	bl	8000724 <__aeabi_ddiv>
 80040fa:	f7fc fc99 	bl	8000a30 <__aeabi_d2iz>
 80040fe:	4680      	mov	r8, r0
 8004100:	f7fc f980 	bl	8000404 <__aeabi_i2d>
 8004104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004108:	f7fc f9e2 	bl	80004d0 <__aeabi_dmul>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4630      	mov	r0, r6
 8004112:	4639      	mov	r1, r7
 8004114:	f7fc f828 	bl	8000168 <__aeabi_dsub>
 8004118:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800411c:	f805 6b01 	strb.w	r6, [r5], #1
 8004120:	9e06      	ldr	r6, [sp, #24]
 8004122:	4602      	mov	r2, r0
 8004124:	1bae      	subs	r6, r5, r6
 8004126:	45b1      	cmp	r9, r6
 8004128:	460b      	mov	r3, r1
 800412a:	d137      	bne.n	800419c <_dtoa_r+0x6dc>
 800412c:	f7fc f81e 	bl	800016c <__adddf3>
 8004130:	4606      	mov	r6, r0
 8004132:	460f      	mov	r7, r1
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800413c:	f7fc fc3a 	bl	80009b4 <__aeabi_dcmplt>
 8004140:	b9c8      	cbnz	r0, 8004176 <_dtoa_r+0x6b6>
 8004142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004146:	4632      	mov	r2, r6
 8004148:	463b      	mov	r3, r7
 800414a:	f7fc fc29 	bl	80009a0 <__aeabi_dcmpeq>
 800414e:	b110      	cbz	r0, 8004156 <_dtoa_r+0x696>
 8004150:	f018 0f01 	tst.w	r8, #1
 8004154:	d10f      	bne.n	8004176 <_dtoa_r+0x6b6>
 8004156:	4651      	mov	r1, sl
 8004158:	4620      	mov	r0, r4
 800415a:	f000 fd01 	bl	8004b60 <_Bfree>
 800415e:	2300      	movs	r3, #0
 8004160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004162:	702b      	strb	r3, [r5, #0]
 8004164:	f10b 0301 	add.w	r3, fp, #1
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800416c:	2b00      	cmp	r3, #0
 800416e:	f43f acec 	beq.w	8003b4a <_dtoa_r+0x8a>
 8004172:	601d      	str	r5, [r3, #0]
 8004174:	e4e9      	b.n	8003b4a <_dtoa_r+0x8a>
 8004176:	465f      	mov	r7, fp
 8004178:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800417c:	1e6b      	subs	r3, r5, #1
 800417e:	2a39      	cmp	r2, #57	; 0x39
 8004180:	d106      	bne.n	8004190 <_dtoa_r+0x6d0>
 8004182:	9a06      	ldr	r2, [sp, #24]
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <_dtoa_r+0x6d8>
 8004188:	2330      	movs	r3, #48	; 0x30
 800418a:	7013      	strb	r3, [r2, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	3701      	adds	r7, #1
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	3201      	adds	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e78e      	b.n	80040b6 <_dtoa_r+0x5f6>
 8004198:	461d      	mov	r5, r3
 800419a:	e7ed      	b.n	8004178 <_dtoa_r+0x6b8>
 800419c:	2200      	movs	r2, #0
 800419e:	4bb5      	ldr	r3, [pc, #724]	; (8004474 <_dtoa_r+0x9b4>)
 80041a0:	f7fc f996 	bl	80004d0 <__aeabi_dmul>
 80041a4:	2200      	movs	r2, #0
 80041a6:	2300      	movs	r3, #0
 80041a8:	4606      	mov	r6, r0
 80041aa:	460f      	mov	r7, r1
 80041ac:	f7fc fbf8 	bl	80009a0 <__aeabi_dcmpeq>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d09c      	beq.n	80040ee <_dtoa_r+0x62e>
 80041b4:	e7cf      	b.n	8004156 <_dtoa_r+0x696>
 80041b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041b8:	2a00      	cmp	r2, #0
 80041ba:	f000 8129 	beq.w	8004410 <_dtoa_r+0x950>
 80041be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80041c0:	2a01      	cmp	r2, #1
 80041c2:	f300 810e 	bgt.w	80043e2 <_dtoa_r+0x922>
 80041c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041c8:	2a00      	cmp	r2, #0
 80041ca:	f000 8106 	beq.w	80043da <_dtoa_r+0x91a>
 80041ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80041d2:	4645      	mov	r5, r8
 80041d4:	9e08      	ldr	r6, [sp, #32]
 80041d6:	9a07      	ldr	r2, [sp, #28]
 80041d8:	2101      	movs	r1, #1
 80041da:	441a      	add	r2, r3
 80041dc:	4620      	mov	r0, r4
 80041de:	4498      	add	r8, r3
 80041e0:	9207      	str	r2, [sp, #28]
 80041e2:	f000 fd5d 	bl	8004ca0 <__i2b>
 80041e6:	4607      	mov	r7, r0
 80041e8:	2d00      	cmp	r5, #0
 80041ea:	dd0b      	ble.n	8004204 <_dtoa_r+0x744>
 80041ec:	9b07      	ldr	r3, [sp, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	dd08      	ble.n	8004204 <_dtoa_r+0x744>
 80041f2:	42ab      	cmp	r3, r5
 80041f4:	bfa8      	it	ge
 80041f6:	462b      	movge	r3, r5
 80041f8:	9a07      	ldr	r2, [sp, #28]
 80041fa:	eba8 0803 	sub.w	r8, r8, r3
 80041fe:	1aed      	subs	r5, r5, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	9b08      	ldr	r3, [sp, #32]
 8004206:	b1fb      	cbz	r3, 8004248 <_dtoa_r+0x788>
 8004208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8104 	beq.w	8004418 <_dtoa_r+0x958>
 8004210:	2e00      	cmp	r6, #0
 8004212:	dd11      	ble.n	8004238 <_dtoa_r+0x778>
 8004214:	4639      	mov	r1, r7
 8004216:	4632      	mov	r2, r6
 8004218:	4620      	mov	r0, r4
 800421a:	f000 fdd7 	bl	8004dcc <__pow5mult>
 800421e:	4652      	mov	r2, sl
 8004220:	4601      	mov	r1, r0
 8004222:	4607      	mov	r7, r0
 8004224:	4620      	mov	r0, r4
 8004226:	f000 fd44 	bl	8004cb2 <__multiply>
 800422a:	4651      	mov	r1, sl
 800422c:	900a      	str	r0, [sp, #40]	; 0x28
 800422e:	4620      	mov	r0, r4
 8004230:	f000 fc96 	bl	8004b60 <_Bfree>
 8004234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004236:	469a      	mov	sl, r3
 8004238:	9b08      	ldr	r3, [sp, #32]
 800423a:	1b9a      	subs	r2, r3, r6
 800423c:	d004      	beq.n	8004248 <_dtoa_r+0x788>
 800423e:	4651      	mov	r1, sl
 8004240:	4620      	mov	r0, r4
 8004242:	f000 fdc3 	bl	8004dcc <__pow5mult>
 8004246:	4682      	mov	sl, r0
 8004248:	2101      	movs	r1, #1
 800424a:	4620      	mov	r0, r4
 800424c:	f000 fd28 	bl	8004ca0 <__i2b>
 8004250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004252:	4606      	mov	r6, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	f340 80e1 	ble.w	800441c <_dtoa_r+0x95c>
 800425a:	461a      	mov	r2, r3
 800425c:	4601      	mov	r1, r0
 800425e:	4620      	mov	r0, r4
 8004260:	f000 fdb4 	bl	8004dcc <__pow5mult>
 8004264:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004266:	4606      	mov	r6, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	f340 80da 	ble.w	8004422 <_dtoa_r+0x962>
 800426e:	2300      	movs	r3, #0
 8004270:	9308      	str	r3, [sp, #32]
 8004272:	6933      	ldr	r3, [r6, #16]
 8004274:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004278:	6918      	ldr	r0, [r3, #16]
 800427a:	f000 fcc3 	bl	8004c04 <__hi0bits>
 800427e:	f1c0 0020 	rsb	r0, r0, #32
 8004282:	9b07      	ldr	r3, [sp, #28]
 8004284:	4418      	add	r0, r3
 8004286:	f010 001f 	ands.w	r0, r0, #31
 800428a:	f000 80f0 	beq.w	800446e <_dtoa_r+0x9ae>
 800428e:	f1c0 0320 	rsb	r3, r0, #32
 8004292:	2b04      	cmp	r3, #4
 8004294:	f340 80e2 	ble.w	800445c <_dtoa_r+0x99c>
 8004298:	9b07      	ldr	r3, [sp, #28]
 800429a:	f1c0 001c 	rsb	r0, r0, #28
 800429e:	4480      	add	r8, r0
 80042a0:	4405      	add	r5, r0
 80042a2:	4403      	add	r3, r0
 80042a4:	9307      	str	r3, [sp, #28]
 80042a6:	f1b8 0f00 	cmp.w	r8, #0
 80042aa:	dd05      	ble.n	80042b8 <_dtoa_r+0x7f8>
 80042ac:	4651      	mov	r1, sl
 80042ae:	4642      	mov	r2, r8
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 fdd9 	bl	8004e68 <__lshift>
 80042b6:	4682      	mov	sl, r0
 80042b8:	9b07      	ldr	r3, [sp, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dd05      	ble.n	80042ca <_dtoa_r+0x80a>
 80042be:	4631      	mov	r1, r6
 80042c0:	461a      	mov	r2, r3
 80042c2:	4620      	mov	r0, r4
 80042c4:	f000 fdd0 	bl	8004e68 <__lshift>
 80042c8:	4606      	mov	r6, r0
 80042ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80d3 	beq.w	8004478 <_dtoa_r+0x9b8>
 80042d2:	4631      	mov	r1, r6
 80042d4:	4650      	mov	r0, sl
 80042d6:	f000 fe18 	bl	8004f0a <__mcmp>
 80042da:	2800      	cmp	r0, #0
 80042dc:	f280 80cc 	bge.w	8004478 <_dtoa_r+0x9b8>
 80042e0:	2300      	movs	r3, #0
 80042e2:	4651      	mov	r1, sl
 80042e4:	220a      	movs	r2, #10
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 fc51 	bl	8004b8e <__multadd>
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80042f2:	4682      	mov	sl, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 81a9 	beq.w	800464c <_dtoa_r+0xb8c>
 80042fa:	2300      	movs	r3, #0
 80042fc:	4639      	mov	r1, r7
 80042fe:	220a      	movs	r2, #10
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fc44 	bl	8004b8e <__multadd>
 8004306:	9b04      	ldr	r3, [sp, #16]
 8004308:	4607      	mov	r7, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	dc03      	bgt.n	8004316 <_dtoa_r+0x856>
 800430e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004310:	2b02      	cmp	r3, #2
 8004312:	f300 80b9 	bgt.w	8004488 <_dtoa_r+0x9c8>
 8004316:	2d00      	cmp	r5, #0
 8004318:	dd05      	ble.n	8004326 <_dtoa_r+0x866>
 800431a:	4639      	mov	r1, r7
 800431c:	462a      	mov	r2, r5
 800431e:	4620      	mov	r0, r4
 8004320:	f000 fda2 	bl	8004e68 <__lshift>
 8004324:	4607      	mov	r7, r0
 8004326:	9b08      	ldr	r3, [sp, #32]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8110 	beq.w	800454e <_dtoa_r+0xa8e>
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4620      	mov	r0, r4
 8004332:	f000 fbe1 	bl	8004af8 <_Balloc>
 8004336:	4605      	mov	r5, r0
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	f107 010c 	add.w	r1, r7, #12
 800433e:	3202      	adds	r2, #2
 8004340:	0092      	lsls	r2, r2, #2
 8004342:	300c      	adds	r0, #12
 8004344:	f000 fbc0 	bl	8004ac8 <memcpy>
 8004348:	2201      	movs	r2, #1
 800434a:	4629      	mov	r1, r5
 800434c:	4620      	mov	r0, r4
 800434e:	f000 fd8b 	bl	8004e68 <__lshift>
 8004352:	9707      	str	r7, [sp, #28]
 8004354:	4607      	mov	r7, r0
 8004356:	9b02      	ldr	r3, [sp, #8]
 8004358:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	9308      	str	r3, [sp, #32]
 8004362:	4631      	mov	r1, r6
 8004364:	4650      	mov	r0, sl
 8004366:	f7ff fb1f 	bl	80039a8 <quorem>
 800436a:	9907      	ldr	r1, [sp, #28]
 800436c:	4605      	mov	r5, r0
 800436e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004372:	4650      	mov	r0, sl
 8004374:	f000 fdc9 	bl	8004f0a <__mcmp>
 8004378:	463a      	mov	r2, r7
 800437a:	9002      	str	r0, [sp, #8]
 800437c:	4631      	mov	r1, r6
 800437e:	4620      	mov	r0, r4
 8004380:	f000 fddd 	bl	8004f3e <__mdiff>
 8004384:	68c3      	ldr	r3, [r0, #12]
 8004386:	4602      	mov	r2, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 80e2 	bne.w	8004552 <_dtoa_r+0xa92>
 800438e:	4601      	mov	r1, r0
 8004390:	9009      	str	r0, [sp, #36]	; 0x24
 8004392:	4650      	mov	r0, sl
 8004394:	f000 fdb9 	bl	8004f0a <__mcmp>
 8004398:	4603      	mov	r3, r0
 800439a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800439c:	4611      	mov	r1, r2
 800439e:	4620      	mov	r0, r4
 80043a0:	9309      	str	r3, [sp, #36]	; 0x24
 80043a2:	f000 fbdd 	bl	8004b60 <_Bfree>
 80043a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 80d4 	bne.w	8004556 <_dtoa_r+0xa96>
 80043ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	f040 80d0 	bne.w	8004556 <_dtoa_r+0xa96>
 80043b6:	9a08      	ldr	r2, [sp, #32]
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	f040 80cc 	bne.w	8004556 <_dtoa_r+0xa96>
 80043be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043c2:	f000 80e8 	beq.w	8004596 <_dtoa_r+0xad6>
 80043c6:	9b02      	ldr	r3, [sp, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	dd01      	ble.n	80043d0 <_dtoa_r+0x910>
 80043cc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80043d0:	f108 0501 	add.w	r5, r8, #1
 80043d4:	f888 9000 	strb.w	r9, [r8]
 80043d8:	e06b      	b.n	80044b2 <_dtoa_r+0x9f2>
 80043da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043dc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80043e0:	e6f7      	b.n	80041d2 <_dtoa_r+0x712>
 80043e2:	9b08      	ldr	r3, [sp, #32]
 80043e4:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80043e8:	42b3      	cmp	r3, r6
 80043ea:	bfb7      	itett	lt
 80043ec:	9b08      	ldrlt	r3, [sp, #32]
 80043ee:	1b9e      	subge	r6, r3, r6
 80043f0:	1af2      	sublt	r2, r6, r3
 80043f2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80043f4:	bfbf      	itttt	lt
 80043f6:	9608      	strlt	r6, [sp, #32]
 80043f8:	189b      	addlt	r3, r3, r2
 80043fa:	930c      	strlt	r3, [sp, #48]	; 0x30
 80043fc:	2600      	movlt	r6, #0
 80043fe:	f1b9 0f00 	cmp.w	r9, #0
 8004402:	bfb9      	ittee	lt
 8004404:	eba8 0509 	sublt.w	r5, r8, r9
 8004408:	2300      	movlt	r3, #0
 800440a:	4645      	movge	r5, r8
 800440c:	464b      	movge	r3, r9
 800440e:	e6e2      	b.n	80041d6 <_dtoa_r+0x716>
 8004410:	9e08      	ldr	r6, [sp, #32]
 8004412:	4645      	mov	r5, r8
 8004414:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004416:	e6e7      	b.n	80041e8 <_dtoa_r+0x728>
 8004418:	9a08      	ldr	r2, [sp, #32]
 800441a:	e710      	b.n	800423e <_dtoa_r+0x77e>
 800441c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800441e:	2b01      	cmp	r3, #1
 8004420:	dc18      	bgt.n	8004454 <_dtoa_r+0x994>
 8004422:	9b02      	ldr	r3, [sp, #8]
 8004424:	b9b3      	cbnz	r3, 8004454 <_dtoa_r+0x994>
 8004426:	9b03      	ldr	r3, [sp, #12]
 8004428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800442c:	b9a3      	cbnz	r3, 8004458 <_dtoa_r+0x998>
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004434:	0d1b      	lsrs	r3, r3, #20
 8004436:	051b      	lsls	r3, r3, #20
 8004438:	b12b      	cbz	r3, 8004446 <_dtoa_r+0x986>
 800443a:	9b07      	ldr	r3, [sp, #28]
 800443c:	f108 0801 	add.w	r8, r8, #1
 8004440:	3301      	adds	r3, #1
 8004442:	9307      	str	r3, [sp, #28]
 8004444:	2301      	movs	r3, #1
 8004446:	9308      	str	r3, [sp, #32]
 8004448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	f47f af11 	bne.w	8004272 <_dtoa_r+0x7b2>
 8004450:	2001      	movs	r0, #1
 8004452:	e716      	b.n	8004282 <_dtoa_r+0x7c2>
 8004454:	2300      	movs	r3, #0
 8004456:	e7f6      	b.n	8004446 <_dtoa_r+0x986>
 8004458:	9b02      	ldr	r3, [sp, #8]
 800445a:	e7f4      	b.n	8004446 <_dtoa_r+0x986>
 800445c:	f43f af23 	beq.w	80042a6 <_dtoa_r+0x7e6>
 8004460:	9a07      	ldr	r2, [sp, #28]
 8004462:	331c      	adds	r3, #28
 8004464:	441a      	add	r2, r3
 8004466:	4498      	add	r8, r3
 8004468:	441d      	add	r5, r3
 800446a:	4613      	mov	r3, r2
 800446c:	e71a      	b.n	80042a4 <_dtoa_r+0x7e4>
 800446e:	4603      	mov	r3, r0
 8004470:	e7f6      	b.n	8004460 <_dtoa_r+0x9a0>
 8004472:	bf00      	nop
 8004474:	40240000 	.word	0x40240000
 8004478:	f1b9 0f00 	cmp.w	r9, #0
 800447c:	dc33      	bgt.n	80044e6 <_dtoa_r+0xa26>
 800447e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004480:	2b02      	cmp	r3, #2
 8004482:	dd30      	ble.n	80044e6 <_dtoa_r+0xa26>
 8004484:	f8cd 9010 	str.w	r9, [sp, #16]
 8004488:	9b04      	ldr	r3, [sp, #16]
 800448a:	b963      	cbnz	r3, 80044a6 <_dtoa_r+0x9e6>
 800448c:	4631      	mov	r1, r6
 800448e:	2205      	movs	r2, #5
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fb7c 	bl	8004b8e <__multadd>
 8004496:	4601      	mov	r1, r0
 8004498:	4606      	mov	r6, r0
 800449a:	4650      	mov	r0, sl
 800449c:	f000 fd35 	bl	8004f0a <__mcmp>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f73f ad5c 	bgt.w	8003f5e <_dtoa_r+0x49e>
 80044a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80044a8:	9d06      	ldr	r5, [sp, #24]
 80044aa:	ea6f 0b03 	mvn.w	fp, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	9307      	str	r3, [sp, #28]
 80044b2:	4631      	mov	r1, r6
 80044b4:	4620      	mov	r0, r4
 80044b6:	f000 fb53 	bl	8004b60 <_Bfree>
 80044ba:	2f00      	cmp	r7, #0
 80044bc:	f43f ae4b 	beq.w	8004156 <_dtoa_r+0x696>
 80044c0:	9b07      	ldr	r3, [sp, #28]
 80044c2:	b12b      	cbz	r3, 80044d0 <_dtoa_r+0xa10>
 80044c4:	42bb      	cmp	r3, r7
 80044c6:	d003      	beq.n	80044d0 <_dtoa_r+0xa10>
 80044c8:	4619      	mov	r1, r3
 80044ca:	4620      	mov	r0, r4
 80044cc:	f000 fb48 	bl	8004b60 <_Bfree>
 80044d0:	4639      	mov	r1, r7
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 fb44 	bl	8004b60 <_Bfree>
 80044d8:	e63d      	b.n	8004156 <_dtoa_r+0x696>
 80044da:	2600      	movs	r6, #0
 80044dc:	4637      	mov	r7, r6
 80044de:	e7e2      	b.n	80044a6 <_dtoa_r+0x9e6>
 80044e0:	46bb      	mov	fp, r7
 80044e2:	4637      	mov	r7, r6
 80044e4:	e53b      	b.n	8003f5e <_dtoa_r+0x49e>
 80044e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f47f af12 	bne.w	8004316 <_dtoa_r+0x856>
 80044f2:	9d06      	ldr	r5, [sp, #24]
 80044f4:	4631      	mov	r1, r6
 80044f6:	4650      	mov	r0, sl
 80044f8:	f7ff fa56 	bl	80039a8 <quorem>
 80044fc:	9b06      	ldr	r3, [sp, #24]
 80044fe:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004502:	f805 9b01 	strb.w	r9, [r5], #1
 8004506:	9a04      	ldr	r2, [sp, #16]
 8004508:	1aeb      	subs	r3, r5, r3
 800450a:	429a      	cmp	r2, r3
 800450c:	f300 8081 	bgt.w	8004612 <_dtoa_r+0xb52>
 8004510:	9b06      	ldr	r3, [sp, #24]
 8004512:	2a01      	cmp	r2, #1
 8004514:	bfac      	ite	ge
 8004516:	189b      	addge	r3, r3, r2
 8004518:	3301      	addlt	r3, #1
 800451a:	4698      	mov	r8, r3
 800451c:	2300      	movs	r3, #0
 800451e:	9307      	str	r3, [sp, #28]
 8004520:	4651      	mov	r1, sl
 8004522:	2201      	movs	r2, #1
 8004524:	4620      	mov	r0, r4
 8004526:	f000 fc9f 	bl	8004e68 <__lshift>
 800452a:	4631      	mov	r1, r6
 800452c:	4682      	mov	sl, r0
 800452e:	f000 fcec 	bl	8004f0a <__mcmp>
 8004532:	2800      	cmp	r0, #0
 8004534:	dc34      	bgt.n	80045a0 <_dtoa_r+0xae0>
 8004536:	d102      	bne.n	800453e <_dtoa_r+0xa7e>
 8004538:	f019 0f01 	tst.w	r9, #1
 800453c:	d130      	bne.n	80045a0 <_dtoa_r+0xae0>
 800453e:	4645      	mov	r5, r8
 8004540:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004544:	1e6a      	subs	r2, r5, #1
 8004546:	2b30      	cmp	r3, #48	; 0x30
 8004548:	d1b3      	bne.n	80044b2 <_dtoa_r+0x9f2>
 800454a:	4615      	mov	r5, r2
 800454c:	e7f8      	b.n	8004540 <_dtoa_r+0xa80>
 800454e:	4638      	mov	r0, r7
 8004550:	e6ff      	b.n	8004352 <_dtoa_r+0x892>
 8004552:	2301      	movs	r3, #1
 8004554:	e722      	b.n	800439c <_dtoa_r+0x8dc>
 8004556:	9a02      	ldr	r2, [sp, #8]
 8004558:	2a00      	cmp	r2, #0
 800455a:	db04      	blt.n	8004566 <_dtoa_r+0xaa6>
 800455c:	d128      	bne.n	80045b0 <_dtoa_r+0xaf0>
 800455e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004560:	bb32      	cbnz	r2, 80045b0 <_dtoa_r+0xaf0>
 8004562:	9a08      	ldr	r2, [sp, #32]
 8004564:	bb22      	cbnz	r2, 80045b0 <_dtoa_r+0xaf0>
 8004566:	2b00      	cmp	r3, #0
 8004568:	f77f af32 	ble.w	80043d0 <_dtoa_r+0x910>
 800456c:	4651      	mov	r1, sl
 800456e:	2201      	movs	r2, #1
 8004570:	4620      	mov	r0, r4
 8004572:	f000 fc79 	bl	8004e68 <__lshift>
 8004576:	4631      	mov	r1, r6
 8004578:	4682      	mov	sl, r0
 800457a:	f000 fcc6 	bl	8004f0a <__mcmp>
 800457e:	2800      	cmp	r0, #0
 8004580:	dc05      	bgt.n	800458e <_dtoa_r+0xace>
 8004582:	f47f af25 	bne.w	80043d0 <_dtoa_r+0x910>
 8004586:	f019 0f01 	tst.w	r9, #1
 800458a:	f43f af21 	beq.w	80043d0 <_dtoa_r+0x910>
 800458e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004592:	f47f af1b 	bne.w	80043cc <_dtoa_r+0x90c>
 8004596:	2339      	movs	r3, #57	; 0x39
 8004598:	f108 0801 	add.w	r8, r8, #1
 800459c:	f808 3c01 	strb.w	r3, [r8, #-1]
 80045a0:	4645      	mov	r5, r8
 80045a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045a6:	1e6a      	subs	r2, r5, #1
 80045a8:	2b39      	cmp	r3, #57	; 0x39
 80045aa:	d03a      	beq.n	8004622 <_dtoa_r+0xb62>
 80045ac:	3301      	adds	r3, #1
 80045ae:	e03f      	b.n	8004630 <_dtoa_r+0xb70>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f108 0501 	add.w	r5, r8, #1
 80045b6:	dd05      	ble.n	80045c4 <_dtoa_r+0xb04>
 80045b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80045bc:	d0eb      	beq.n	8004596 <_dtoa_r+0xad6>
 80045be:	f109 0901 	add.w	r9, r9, #1
 80045c2:	e707      	b.n	80043d4 <_dtoa_r+0x914>
 80045c4:	9b06      	ldr	r3, [sp, #24]
 80045c6:	9a04      	ldr	r2, [sp, #16]
 80045c8:	1aeb      	subs	r3, r5, r3
 80045ca:	4293      	cmp	r3, r2
 80045cc:	46a8      	mov	r8, r5
 80045ce:	f805 9c01 	strb.w	r9, [r5, #-1]
 80045d2:	d0a5      	beq.n	8004520 <_dtoa_r+0xa60>
 80045d4:	4651      	mov	r1, sl
 80045d6:	2300      	movs	r3, #0
 80045d8:	220a      	movs	r2, #10
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 fad7 	bl	8004b8e <__multadd>
 80045e0:	9b07      	ldr	r3, [sp, #28]
 80045e2:	4682      	mov	sl, r0
 80045e4:	42bb      	cmp	r3, r7
 80045e6:	f04f 020a 	mov.w	r2, #10
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	9907      	ldr	r1, [sp, #28]
 80045f0:	4620      	mov	r0, r4
 80045f2:	d104      	bne.n	80045fe <_dtoa_r+0xb3e>
 80045f4:	f000 facb 	bl	8004b8e <__multadd>
 80045f8:	9007      	str	r0, [sp, #28]
 80045fa:	4607      	mov	r7, r0
 80045fc:	e6b1      	b.n	8004362 <_dtoa_r+0x8a2>
 80045fe:	f000 fac6 	bl	8004b8e <__multadd>
 8004602:	2300      	movs	r3, #0
 8004604:	9007      	str	r0, [sp, #28]
 8004606:	220a      	movs	r2, #10
 8004608:	4639      	mov	r1, r7
 800460a:	4620      	mov	r0, r4
 800460c:	f000 fabf 	bl	8004b8e <__multadd>
 8004610:	e7f3      	b.n	80045fa <_dtoa_r+0xb3a>
 8004612:	4651      	mov	r1, sl
 8004614:	2300      	movs	r3, #0
 8004616:	220a      	movs	r2, #10
 8004618:	4620      	mov	r0, r4
 800461a:	f000 fab8 	bl	8004b8e <__multadd>
 800461e:	4682      	mov	sl, r0
 8004620:	e768      	b.n	80044f4 <_dtoa_r+0xa34>
 8004622:	9b06      	ldr	r3, [sp, #24]
 8004624:	4293      	cmp	r3, r2
 8004626:	d105      	bne.n	8004634 <_dtoa_r+0xb74>
 8004628:	2331      	movs	r3, #49	; 0x31
 800462a:	9a06      	ldr	r2, [sp, #24]
 800462c:	f10b 0b01 	add.w	fp, fp, #1
 8004630:	7013      	strb	r3, [r2, #0]
 8004632:	e73e      	b.n	80044b2 <_dtoa_r+0x9f2>
 8004634:	4615      	mov	r5, r2
 8004636:	e7b4      	b.n	80045a2 <_dtoa_r+0xae2>
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <_dtoa_r+0xba0>)
 800463a:	f7ff baa3 	b.w	8003b84 <_dtoa_r+0xc4>
 800463e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004640:	2b00      	cmp	r3, #0
 8004642:	f47f aa7d 	bne.w	8003b40 <_dtoa_r+0x80>
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <_dtoa_r+0xba4>)
 8004648:	f7ff ba9c 	b.w	8003b84 <_dtoa_r+0xc4>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f73f af4f 	bgt.w	80044f2 <_dtoa_r+0xa32>
 8004654:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004656:	2b02      	cmp	r3, #2
 8004658:	f77f af4b 	ble.w	80044f2 <_dtoa_r+0xa32>
 800465c:	e714      	b.n	8004488 <_dtoa_r+0x9c8>
 800465e:	bf00      	nop
 8004660:	080058b6 	.word	0x080058b6
 8004664:	080058d8 	.word	0x080058d8

08004668 <_localeconv_r>:
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <_localeconv_r+0x14>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a18      	ldr	r0, [r3, #32]
 800466e:	4b04      	ldr	r3, [pc, #16]	; (8004680 <_localeconv_r+0x18>)
 8004670:	2800      	cmp	r0, #0
 8004672:	bf08      	it	eq
 8004674:	4618      	moveq	r0, r3
 8004676:	30f0      	adds	r0, #240	; 0xf0
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	2000000c 	.word	0x2000000c
 8004680:	20000510 	.word	0x20000510

08004684 <malloc>:
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <malloc+0xc>)
 8004686:	4601      	mov	r1, r0
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f000 b803 	b.w	8004694 <_malloc_r>
 800468e:	bf00      	nop
 8004690:	2000000c 	.word	0x2000000c

08004694 <_malloc_r>:
 8004694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	f101 040b 	add.w	r4, r1, #11
 800469c:	2c16      	cmp	r4, #22
 800469e:	4681      	mov	r9, r0
 80046a0:	d907      	bls.n	80046b2 <_malloc_r+0x1e>
 80046a2:	f034 0407 	bics.w	r4, r4, #7
 80046a6:	d505      	bpl.n	80046b4 <_malloc_r+0x20>
 80046a8:	230c      	movs	r3, #12
 80046aa:	f8c9 3000 	str.w	r3, [r9]
 80046ae:	2600      	movs	r6, #0
 80046b0:	e131      	b.n	8004916 <_malloc_r+0x282>
 80046b2:	2410      	movs	r4, #16
 80046b4:	428c      	cmp	r4, r1
 80046b6:	d3f7      	bcc.n	80046a8 <_malloc_r+0x14>
 80046b8:	4648      	mov	r0, r9
 80046ba:	f000 fa11 	bl	8004ae0 <__malloc_lock>
 80046be:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80046c2:	4d9b      	ldr	r5, [pc, #620]	; (8004930 <_malloc_r+0x29c>)
 80046c4:	d236      	bcs.n	8004734 <_malloc_r+0xa0>
 80046c6:	f104 0208 	add.w	r2, r4, #8
 80046ca:	442a      	add	r2, r5
 80046cc:	6856      	ldr	r6, [r2, #4]
 80046ce:	f1a2 0108 	sub.w	r1, r2, #8
 80046d2:	428e      	cmp	r6, r1
 80046d4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80046d8:	d102      	bne.n	80046e0 <_malloc_r+0x4c>
 80046da:	68d6      	ldr	r6, [r2, #12]
 80046dc:	42b2      	cmp	r2, r6
 80046de:	d010      	beq.n	8004702 <_malloc_r+0x6e>
 80046e0:	6873      	ldr	r3, [r6, #4]
 80046e2:	68f2      	ldr	r2, [r6, #12]
 80046e4:	68b1      	ldr	r1, [r6, #8]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	60ca      	str	r2, [r1, #12]
 80046ec:	4433      	add	r3, r6
 80046ee:	6091      	str	r1, [r2, #8]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	4648      	mov	r0, r9
 80046fa:	f000 f9f7 	bl	8004aec <__malloc_unlock>
 80046fe:	3608      	adds	r6, #8
 8004700:	e109      	b.n	8004916 <_malloc_r+0x282>
 8004702:	3302      	adds	r3, #2
 8004704:	4a8b      	ldr	r2, [pc, #556]	; (8004934 <_malloc_r+0x2a0>)
 8004706:	692e      	ldr	r6, [r5, #16]
 8004708:	4611      	mov	r1, r2
 800470a:	4296      	cmp	r6, r2
 800470c:	d06d      	beq.n	80047ea <_malloc_r+0x156>
 800470e:	6870      	ldr	r0, [r6, #4]
 8004710:	f020 0003 	bic.w	r0, r0, #3
 8004714:	1b07      	subs	r7, r0, r4
 8004716:	2f0f      	cmp	r7, #15
 8004718:	dd47      	ble.n	80047aa <_malloc_r+0x116>
 800471a:	1933      	adds	r3, r6, r4
 800471c:	f044 0401 	orr.w	r4, r4, #1
 8004720:	6074      	str	r4, [r6, #4]
 8004722:	616b      	str	r3, [r5, #20]
 8004724:	612b      	str	r3, [r5, #16]
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	609a      	str	r2, [r3, #8]
 800472a:	f047 0201 	orr.w	r2, r7, #1
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	5037      	str	r7, [r6, r0]
 8004732:	e7e1      	b.n	80046f8 <_malloc_r+0x64>
 8004734:	0a63      	lsrs	r3, r4, #9
 8004736:	d02a      	beq.n	800478e <_malloc_r+0xfa>
 8004738:	2b04      	cmp	r3, #4
 800473a:	d812      	bhi.n	8004762 <_malloc_r+0xce>
 800473c:	09a3      	lsrs	r3, r4, #6
 800473e:	3338      	adds	r3, #56	; 0x38
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004746:	6856      	ldr	r6, [r2, #4]
 8004748:	f1a2 0008 	sub.w	r0, r2, #8
 800474c:	4286      	cmp	r6, r0
 800474e:	d006      	beq.n	800475e <_malloc_r+0xca>
 8004750:	6872      	ldr	r2, [r6, #4]
 8004752:	f022 0203 	bic.w	r2, r2, #3
 8004756:	1b11      	subs	r1, r2, r4
 8004758:	290f      	cmp	r1, #15
 800475a:	dd1c      	ble.n	8004796 <_malloc_r+0x102>
 800475c:	3b01      	subs	r3, #1
 800475e:	3301      	adds	r3, #1
 8004760:	e7d0      	b.n	8004704 <_malloc_r+0x70>
 8004762:	2b14      	cmp	r3, #20
 8004764:	d801      	bhi.n	800476a <_malloc_r+0xd6>
 8004766:	335b      	adds	r3, #91	; 0x5b
 8004768:	e7ea      	b.n	8004740 <_malloc_r+0xac>
 800476a:	2b54      	cmp	r3, #84	; 0x54
 800476c:	d802      	bhi.n	8004774 <_malloc_r+0xe0>
 800476e:	0b23      	lsrs	r3, r4, #12
 8004770:	336e      	adds	r3, #110	; 0x6e
 8004772:	e7e5      	b.n	8004740 <_malloc_r+0xac>
 8004774:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004778:	d802      	bhi.n	8004780 <_malloc_r+0xec>
 800477a:	0be3      	lsrs	r3, r4, #15
 800477c:	3377      	adds	r3, #119	; 0x77
 800477e:	e7df      	b.n	8004740 <_malloc_r+0xac>
 8004780:	f240 5254 	movw	r2, #1364	; 0x554
 8004784:	4293      	cmp	r3, r2
 8004786:	d804      	bhi.n	8004792 <_malloc_r+0xfe>
 8004788:	0ca3      	lsrs	r3, r4, #18
 800478a:	337c      	adds	r3, #124	; 0x7c
 800478c:	e7d8      	b.n	8004740 <_malloc_r+0xac>
 800478e:	233f      	movs	r3, #63	; 0x3f
 8004790:	e7d6      	b.n	8004740 <_malloc_r+0xac>
 8004792:	237e      	movs	r3, #126	; 0x7e
 8004794:	e7d4      	b.n	8004740 <_malloc_r+0xac>
 8004796:	2900      	cmp	r1, #0
 8004798:	68f1      	ldr	r1, [r6, #12]
 800479a:	db04      	blt.n	80047a6 <_malloc_r+0x112>
 800479c:	68b3      	ldr	r3, [r6, #8]
 800479e:	60d9      	str	r1, [r3, #12]
 80047a0:	608b      	str	r3, [r1, #8]
 80047a2:	18b3      	adds	r3, r6, r2
 80047a4:	e7a4      	b.n	80046f0 <_malloc_r+0x5c>
 80047a6:	460e      	mov	r6, r1
 80047a8:	e7d0      	b.n	800474c <_malloc_r+0xb8>
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	616a      	str	r2, [r5, #20]
 80047ae:	612a      	str	r2, [r5, #16]
 80047b0:	db05      	blt.n	80047be <_malloc_r+0x12a>
 80047b2:	4430      	add	r0, r6
 80047b4:	6843      	ldr	r3, [r0, #4]
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6043      	str	r3, [r0, #4]
 80047bc:	e79c      	b.n	80046f8 <_malloc_r+0x64>
 80047be:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80047c2:	d244      	bcs.n	800484e <_malloc_r+0x1ba>
 80047c4:	2201      	movs	r2, #1
 80047c6:	08c0      	lsrs	r0, r0, #3
 80047c8:	1087      	asrs	r7, r0, #2
 80047ca:	fa02 f707 	lsl.w	r7, r2, r7
 80047ce:	686a      	ldr	r2, [r5, #4]
 80047d0:	3001      	adds	r0, #1
 80047d2:	433a      	orrs	r2, r7
 80047d4:	606a      	str	r2, [r5, #4]
 80047d6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80047da:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80047de:	3a08      	subs	r2, #8
 80047e0:	60f2      	str	r2, [r6, #12]
 80047e2:	60b7      	str	r7, [r6, #8]
 80047e4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80047e8:	60fe      	str	r6, [r7, #12]
 80047ea:	2001      	movs	r0, #1
 80047ec:	109a      	asrs	r2, r3, #2
 80047ee:	fa00 f202 	lsl.w	r2, r0, r2
 80047f2:	6868      	ldr	r0, [r5, #4]
 80047f4:	4282      	cmp	r2, r0
 80047f6:	f200 809f 	bhi.w	8004938 <_malloc_r+0x2a4>
 80047fa:	4202      	tst	r2, r0
 80047fc:	d106      	bne.n	800480c <_malloc_r+0x178>
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	0052      	lsls	r2, r2, #1
 8004804:	4202      	tst	r2, r0
 8004806:	f103 0304 	add.w	r3, r3, #4
 800480a:	d0fa      	beq.n	8004802 <_malloc_r+0x16e>
 800480c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004810:	46e0      	mov	r8, ip
 8004812:	469e      	mov	lr, r3
 8004814:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004818:	4546      	cmp	r6, r8
 800481a:	d153      	bne.n	80048c4 <_malloc_r+0x230>
 800481c:	f10e 0e01 	add.w	lr, lr, #1
 8004820:	f01e 0f03 	tst.w	lr, #3
 8004824:	f108 0808 	add.w	r8, r8, #8
 8004828:	d1f4      	bne.n	8004814 <_malloc_r+0x180>
 800482a:	0798      	lsls	r0, r3, #30
 800482c:	d179      	bne.n	8004922 <_malloc_r+0x28e>
 800482e:	686b      	ldr	r3, [r5, #4]
 8004830:	ea23 0302 	bic.w	r3, r3, r2
 8004834:	606b      	str	r3, [r5, #4]
 8004836:	6868      	ldr	r0, [r5, #4]
 8004838:	0052      	lsls	r2, r2, #1
 800483a:	4282      	cmp	r2, r0
 800483c:	d87c      	bhi.n	8004938 <_malloc_r+0x2a4>
 800483e:	2a00      	cmp	r2, #0
 8004840:	d07a      	beq.n	8004938 <_malloc_r+0x2a4>
 8004842:	4673      	mov	r3, lr
 8004844:	4202      	tst	r2, r0
 8004846:	d1e1      	bne.n	800480c <_malloc_r+0x178>
 8004848:	3304      	adds	r3, #4
 800484a:	0052      	lsls	r2, r2, #1
 800484c:	e7fa      	b.n	8004844 <_malloc_r+0x1b0>
 800484e:	0a42      	lsrs	r2, r0, #9
 8004850:	2a04      	cmp	r2, #4
 8004852:	d815      	bhi.n	8004880 <_malloc_r+0x1ec>
 8004854:	0982      	lsrs	r2, r0, #6
 8004856:	3238      	adds	r2, #56	; 0x38
 8004858:	1c57      	adds	r7, r2, #1
 800485a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800485e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004862:	45be      	cmp	lr, r7
 8004864:	d126      	bne.n	80048b4 <_malloc_r+0x220>
 8004866:	2001      	movs	r0, #1
 8004868:	1092      	asrs	r2, r2, #2
 800486a:	fa00 f202 	lsl.w	r2, r0, r2
 800486e:	6868      	ldr	r0, [r5, #4]
 8004870:	4310      	orrs	r0, r2
 8004872:	6068      	str	r0, [r5, #4]
 8004874:	f8c6 e00c 	str.w	lr, [r6, #12]
 8004878:	60b7      	str	r7, [r6, #8]
 800487a:	f8ce 6008 	str.w	r6, [lr, #8]
 800487e:	e7b3      	b.n	80047e8 <_malloc_r+0x154>
 8004880:	2a14      	cmp	r2, #20
 8004882:	d801      	bhi.n	8004888 <_malloc_r+0x1f4>
 8004884:	325b      	adds	r2, #91	; 0x5b
 8004886:	e7e7      	b.n	8004858 <_malloc_r+0x1c4>
 8004888:	2a54      	cmp	r2, #84	; 0x54
 800488a:	d802      	bhi.n	8004892 <_malloc_r+0x1fe>
 800488c:	0b02      	lsrs	r2, r0, #12
 800488e:	326e      	adds	r2, #110	; 0x6e
 8004890:	e7e2      	b.n	8004858 <_malloc_r+0x1c4>
 8004892:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004896:	d802      	bhi.n	800489e <_malloc_r+0x20a>
 8004898:	0bc2      	lsrs	r2, r0, #15
 800489a:	3277      	adds	r2, #119	; 0x77
 800489c:	e7dc      	b.n	8004858 <_malloc_r+0x1c4>
 800489e:	f240 5754 	movw	r7, #1364	; 0x554
 80048a2:	42ba      	cmp	r2, r7
 80048a4:	bf9a      	itte	ls
 80048a6:	0c82      	lsrls	r2, r0, #18
 80048a8:	327c      	addls	r2, #124	; 0x7c
 80048aa:	227e      	movhi	r2, #126	; 0x7e
 80048ac:	e7d4      	b.n	8004858 <_malloc_r+0x1c4>
 80048ae:	68bf      	ldr	r7, [r7, #8]
 80048b0:	45be      	cmp	lr, r7
 80048b2:	d004      	beq.n	80048be <_malloc_r+0x22a>
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	f022 0203 	bic.w	r2, r2, #3
 80048ba:	4290      	cmp	r0, r2
 80048bc:	d3f7      	bcc.n	80048ae <_malloc_r+0x21a>
 80048be:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80048c2:	e7d7      	b.n	8004874 <_malloc_r+0x1e0>
 80048c4:	6870      	ldr	r0, [r6, #4]
 80048c6:	68f7      	ldr	r7, [r6, #12]
 80048c8:	f020 0003 	bic.w	r0, r0, #3
 80048cc:	eba0 0a04 	sub.w	sl, r0, r4
 80048d0:	f1ba 0f0f 	cmp.w	sl, #15
 80048d4:	dd10      	ble.n	80048f8 <_malloc_r+0x264>
 80048d6:	68b2      	ldr	r2, [r6, #8]
 80048d8:	1933      	adds	r3, r6, r4
 80048da:	f044 0401 	orr.w	r4, r4, #1
 80048de:	6074      	str	r4, [r6, #4]
 80048e0:	60d7      	str	r7, [r2, #12]
 80048e2:	60ba      	str	r2, [r7, #8]
 80048e4:	f04a 0201 	orr.w	r2, sl, #1
 80048e8:	616b      	str	r3, [r5, #20]
 80048ea:	612b      	str	r3, [r5, #16]
 80048ec:	60d9      	str	r1, [r3, #12]
 80048ee:	6099      	str	r1, [r3, #8]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	f846 a000 	str.w	sl, [r6, r0]
 80048f6:	e6ff      	b.n	80046f8 <_malloc_r+0x64>
 80048f8:	f1ba 0f00 	cmp.w	sl, #0
 80048fc:	db0f      	blt.n	800491e <_malloc_r+0x28a>
 80048fe:	4430      	add	r0, r6
 8004900:	6843      	ldr	r3, [r0, #4]
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6043      	str	r3, [r0, #4]
 8004908:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800490c:	4648      	mov	r0, r9
 800490e:	60df      	str	r7, [r3, #12]
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	f000 f8eb 	bl	8004aec <__malloc_unlock>
 8004916:	4630      	mov	r0, r6
 8004918:	b003      	add	sp, #12
 800491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491e:	463e      	mov	r6, r7
 8004920:	e77a      	b.n	8004818 <_malloc_r+0x184>
 8004922:	f85c 0908 	ldr.w	r0, [ip], #-8
 8004926:	3b01      	subs	r3, #1
 8004928:	4584      	cmp	ip, r0
 800492a:	f43f af7e 	beq.w	800482a <_malloc_r+0x196>
 800492e:	e782      	b.n	8004836 <_malloc_r+0x1a2>
 8004930:	20000100 	.word	0x20000100
 8004934:	20000108 	.word	0x20000108
 8004938:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800493c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004940:	f026 0603 	bic.w	r6, r6, #3
 8004944:	42b4      	cmp	r4, r6
 8004946:	d803      	bhi.n	8004950 <_malloc_r+0x2bc>
 8004948:	1b33      	subs	r3, r6, r4
 800494a:	2b0f      	cmp	r3, #15
 800494c:	f300 8095 	bgt.w	8004a7a <_malloc_r+0x3e6>
 8004950:	4a4f      	ldr	r2, [pc, #316]	; (8004a90 <_malloc_r+0x3fc>)
 8004952:	eb0b 0306 	add.w	r3, fp, r6
 8004956:	6817      	ldr	r7, [r2, #0]
 8004958:	4a4e      	ldr	r2, [pc, #312]	; (8004a94 <_malloc_r+0x400>)
 800495a:	3710      	adds	r7, #16
 800495c:	6811      	ldr	r1, [r2, #0]
 800495e:	4427      	add	r7, r4
 8004960:	3101      	adds	r1, #1
 8004962:	d005      	beq.n	8004970 <_malloc_r+0x2dc>
 8004964:	494c      	ldr	r1, [pc, #304]	; (8004a98 <_malloc_r+0x404>)
 8004966:	3901      	subs	r1, #1
 8004968:	440f      	add	r7, r1
 800496a:	3101      	adds	r1, #1
 800496c:	4249      	negs	r1, r1
 800496e:	400f      	ands	r7, r1
 8004970:	4639      	mov	r1, r7
 8004972:	4648      	mov	r0, r9
 8004974:	9201      	str	r2, [sp, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f000 fb90 	bl	800509c <_sbrk_r>
 800497c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004980:	4680      	mov	r8, r0
 8004982:	d055      	beq.n	8004a30 <_malloc_r+0x39c>
 8004984:	9b00      	ldr	r3, [sp, #0]
 8004986:	9a01      	ldr	r2, [sp, #4]
 8004988:	4283      	cmp	r3, r0
 800498a:	d901      	bls.n	8004990 <_malloc_r+0x2fc>
 800498c:	45ab      	cmp	fp, r5
 800498e:	d14f      	bne.n	8004a30 <_malloc_r+0x39c>
 8004990:	4842      	ldr	r0, [pc, #264]	; (8004a9c <_malloc_r+0x408>)
 8004992:	4543      	cmp	r3, r8
 8004994:	6801      	ldr	r1, [r0, #0]
 8004996:	4682      	mov	sl, r0
 8004998:	eb07 0e01 	add.w	lr, r7, r1
 800499c:	f8c0 e000 	str.w	lr, [r0]
 80049a0:	493f      	ldr	r1, [pc, #252]	; (8004aa0 <_malloc_r+0x40c>)
 80049a2:	d113      	bne.n	80049cc <_malloc_r+0x338>
 80049a4:	420b      	tst	r3, r1
 80049a6:	d111      	bne.n	80049cc <_malloc_r+0x338>
 80049a8:	68ab      	ldr	r3, [r5, #8]
 80049aa:	443e      	add	r6, r7
 80049ac:	f046 0601 	orr.w	r6, r6, #1
 80049b0:	605e      	str	r6, [r3, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <_malloc_r+0x410>)
 80049b4:	f8da 3000 	ldr.w	r3, [sl]
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	428b      	cmp	r3, r1
 80049bc:	bf88      	it	hi
 80049be:	6013      	strhi	r3, [r2, #0]
 80049c0:	4a39      	ldr	r2, [pc, #228]	; (8004aa8 <_malloc_r+0x414>)
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf88      	it	hi
 80049c8:	6013      	strhi	r3, [r2, #0]
 80049ca:	e031      	b.n	8004a30 <_malloc_r+0x39c>
 80049cc:	6810      	ldr	r0, [r2, #0]
 80049ce:	3001      	adds	r0, #1
 80049d0:	bf1b      	ittet	ne
 80049d2:	eba8 0303 	subne.w	r3, r8, r3
 80049d6:	4473      	addne	r3, lr
 80049d8:	f8c2 8000 	streq.w	r8, [r2]
 80049dc:	f8ca 3000 	strne.w	r3, [sl]
 80049e0:	f018 0007 	ands.w	r0, r8, #7
 80049e4:	bf1c      	itt	ne
 80049e6:	f1c0 0008 	rsbne	r0, r0, #8
 80049ea:	4480      	addne	r8, r0
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <_malloc_r+0x404>)
 80049ee:	4447      	add	r7, r8
 80049f0:	4418      	add	r0, r3
 80049f2:	400f      	ands	r7, r1
 80049f4:	1bc7      	subs	r7, r0, r7
 80049f6:	4639      	mov	r1, r7
 80049f8:	4648      	mov	r0, r9
 80049fa:	f000 fb4f 	bl	800509c <_sbrk_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	bf04      	itt	eq
 8004a02:	4640      	moveq	r0, r8
 8004a04:	2700      	moveq	r7, #0
 8004a06:	f8da 3000 	ldr.w	r3, [sl]
 8004a0a:	eba0 0008 	sub.w	r0, r0, r8
 8004a0e:	443b      	add	r3, r7
 8004a10:	4407      	add	r7, r0
 8004a12:	f047 0701 	orr.w	r7, r7, #1
 8004a16:	45ab      	cmp	fp, r5
 8004a18:	f8c5 8008 	str.w	r8, [r5, #8]
 8004a1c:	f8ca 3000 	str.w	r3, [sl]
 8004a20:	f8c8 7004 	str.w	r7, [r8, #4]
 8004a24:	d0c5      	beq.n	80049b2 <_malloc_r+0x31e>
 8004a26:	2e0f      	cmp	r6, #15
 8004a28:	d810      	bhi.n	8004a4c <_malloc_r+0x3b8>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004a30:	68ab      	ldr	r3, [r5, #8]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	f022 0203 	bic.w	r2, r2, #3
 8004a38:	4294      	cmp	r4, r2
 8004a3a:	eba2 0304 	sub.w	r3, r2, r4
 8004a3e:	d801      	bhi.n	8004a44 <_malloc_r+0x3b0>
 8004a40:	2b0f      	cmp	r3, #15
 8004a42:	dc1a      	bgt.n	8004a7a <_malloc_r+0x3e6>
 8004a44:	4648      	mov	r0, r9
 8004a46:	f000 f851 	bl	8004aec <__malloc_unlock>
 8004a4a:	e630      	b.n	80046ae <_malloc_r+0x1a>
 8004a4c:	2205      	movs	r2, #5
 8004a4e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004a52:	3e0c      	subs	r6, #12
 8004a54:	f026 0607 	bic.w	r6, r6, #7
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	4333      	orrs	r3, r6
 8004a5e:	f8cb 3004 	str.w	r3, [fp, #4]
 8004a62:	2e0f      	cmp	r6, #15
 8004a64:	eb0b 0306 	add.w	r3, fp, r6
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	d9a1      	bls.n	80049b2 <_malloc_r+0x31e>
 8004a6e:	f10b 0108 	add.w	r1, fp, #8
 8004a72:	4648      	mov	r0, r9
 8004a74:	f000 fc20 	bl	80052b8 <_free_r>
 8004a78:	e79b      	b.n	80049b2 <_malloc_r+0x31e>
 8004a7a:	68ae      	ldr	r6, [r5, #8]
 8004a7c:	f044 0201 	orr.w	r2, r4, #1
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	4434      	add	r4, r6
 8004a86:	6072      	str	r2, [r6, #4]
 8004a88:	60ac      	str	r4, [r5, #8]
 8004a8a:	6063      	str	r3, [r4, #4]
 8004a8c:	e634      	b.n	80046f8 <_malloc_r+0x64>
 8004a8e:	bf00      	nop
 8004a90:	20000834 	.word	0x20000834
 8004a94:	20000508 	.word	0x20000508
 8004a98:	00000080 	.word	0x00000080
 8004a9c:	20000804 	.word	0x20000804
 8004aa0:	0000007f 	.word	0x0000007f
 8004aa4:	2000082c 	.word	0x2000082c
 8004aa8:	20000830 	.word	0x20000830

08004aac <memchr>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	b2c9      	uxtb	r1, r1
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4290      	cmp	r0, r2
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	d101      	bne.n	8004abc <memchr+0x10>
 8004ab8:	2000      	movs	r0, #0
 8004aba:	bd10      	pop	{r4, pc}
 8004abc:	781c      	ldrb	r4, [r3, #0]
 8004abe:	3001      	adds	r0, #1
 8004ac0:	428c      	cmp	r4, r1
 8004ac2:	d1f6      	bne.n	8004ab2 <memchr+0x6>
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd10      	pop	{r4, pc}

08004ac8 <memcpy>:
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	1e43      	subs	r3, r0, #1
 8004acc:	440a      	add	r2, r1
 8004ace:	4291      	cmp	r1, r2
 8004ad0:	d100      	bne.n	8004ad4 <memcpy+0xc>
 8004ad2:	bd10      	pop	{r4, pc}
 8004ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004adc:	e7f7      	b.n	8004ace <memcpy+0x6>
	...

08004ae0 <__malloc_lock>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__malloc_lock+0x8>)
 8004ae2:	f000 bca5 	b.w	8005430 <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	200008d8 	.word	0x200008d8

08004aec <__malloc_unlock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__malloc_unlock+0x8>)
 8004aee:	f000 bca0 	b.w	8005432 <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	200008d8 	.word	0x200008d8

08004af8 <_Balloc>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004afc:	4604      	mov	r4, r0
 8004afe:	460e      	mov	r6, r1
 8004b00:	b93d      	cbnz	r5, 8004b12 <_Balloc+0x1a>
 8004b02:	2010      	movs	r0, #16
 8004b04:	f7ff fdbe 	bl	8004684 <malloc>
 8004b08:	6260      	str	r0, [r4, #36]	; 0x24
 8004b0a:	6045      	str	r5, [r0, #4]
 8004b0c:	6085      	str	r5, [r0, #8]
 8004b0e:	6005      	str	r5, [r0, #0]
 8004b10:	60c5      	str	r5, [r0, #12]
 8004b12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004b14:	68eb      	ldr	r3, [r5, #12]
 8004b16:	b183      	cbz	r3, 8004b3a <_Balloc+0x42>
 8004b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004b20:	b9b8      	cbnz	r0, 8004b52 <_Balloc+0x5a>
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f506 	lsl.w	r5, r1, r6
 8004b28:	1d6a      	adds	r2, r5, #5
 8004b2a:	0092      	lsls	r2, r2, #2
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 fb3f 	bl	80051b0 <_calloc_r>
 8004b32:	b160      	cbz	r0, 8004b4e <_Balloc+0x56>
 8004b34:	6046      	str	r6, [r0, #4]
 8004b36:	6085      	str	r5, [r0, #8]
 8004b38:	e00e      	b.n	8004b58 <_Balloc+0x60>
 8004b3a:	2221      	movs	r2, #33	; 0x21
 8004b3c:	2104      	movs	r1, #4
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f000 fb36 	bl	80051b0 <_calloc_r>
 8004b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b46:	60e8      	str	r0, [r5, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e4      	bne.n	8004b18 <_Balloc+0x20>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	bd70      	pop	{r4, r5, r6, pc}
 8004b52:	6802      	ldr	r2, [r0, #0]
 8004b54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	6103      	str	r3, [r0, #16]
 8004b5c:	60c3      	str	r3, [r0, #12]
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}

08004b60 <_Bfree>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004b64:	4606      	mov	r6, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	b93c      	cbnz	r4, 8004b7a <_Bfree+0x1a>
 8004b6a:	2010      	movs	r0, #16
 8004b6c:	f7ff fd8a 	bl	8004684 <malloc>
 8004b70:	6270      	str	r0, [r6, #36]	; 0x24
 8004b72:	6044      	str	r4, [r0, #4]
 8004b74:	6084      	str	r4, [r0, #8]
 8004b76:	6004      	str	r4, [r0, #0]
 8004b78:	60c4      	str	r4, [r0, #12]
 8004b7a:	b13d      	cbz	r5, 8004b8c <_Bfree+0x2c>
 8004b7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004b7e:	686a      	ldr	r2, [r5, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b86:	6029      	str	r1, [r5, #0]
 8004b88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}

08004b8e <__multadd>:
 8004b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b92:	461f      	mov	r7, r3
 8004b94:	4606      	mov	r6, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	2300      	movs	r3, #0
 8004b9a:	690d      	ldr	r5, [r1, #16]
 8004b9c:	f101 0e14 	add.w	lr, r1, #20
 8004ba0:	f8de 0000 	ldr.w	r0, [lr]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	b281      	uxth	r1, r0
 8004ba8:	fb02 7101 	mla	r1, r2, r1, r7
 8004bac:	0c00      	lsrs	r0, r0, #16
 8004bae:	0c0f      	lsrs	r7, r1, #16
 8004bb0:	fb02 7000 	mla	r0, r2, r0, r7
 8004bb4:	b289      	uxth	r1, r1
 8004bb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004bba:	429d      	cmp	r5, r3
 8004bbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004bc0:	f84e 1b04 	str.w	r1, [lr], #4
 8004bc4:	dcec      	bgt.n	8004ba0 <__multadd+0x12>
 8004bc6:	b1d7      	cbz	r7, 8004bfe <__multadd+0x70>
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	429d      	cmp	r5, r3
 8004bcc:	db12      	blt.n	8004bf4 <__multadd+0x66>
 8004bce:	6861      	ldr	r1, [r4, #4]
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	3101      	adds	r1, #1
 8004bd4:	f7ff ff90 	bl	8004af8 <_Balloc>
 8004bd8:	4680      	mov	r8, r0
 8004bda:	6922      	ldr	r2, [r4, #16]
 8004bdc:	f104 010c 	add.w	r1, r4, #12
 8004be0:	3202      	adds	r2, #2
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	300c      	adds	r0, #12
 8004be6:	f7ff ff6f 	bl	8004ac8 <memcpy>
 8004bea:	4621      	mov	r1, r4
 8004bec:	4630      	mov	r0, r6
 8004bee:	f7ff ffb7 	bl	8004b60 <_Bfree>
 8004bf2:	4644      	mov	r4, r8
 8004bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	615f      	str	r7, [r3, #20]
 8004bfc:	6125      	str	r5, [r4, #16]
 8004bfe:	4620      	mov	r0, r4
 8004c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c04 <__hi0bits>:
 8004c04:	0c02      	lsrs	r2, r0, #16
 8004c06:	0412      	lsls	r2, r2, #16
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b9b2      	cbnz	r2, 8004c3a <__hi0bits+0x36>
 8004c0c:	0403      	lsls	r3, r0, #16
 8004c0e:	2010      	movs	r0, #16
 8004c10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004c14:	bf04      	itt	eq
 8004c16:	021b      	lsleq	r3, r3, #8
 8004c18:	3008      	addeq	r0, #8
 8004c1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004c1e:	bf04      	itt	eq
 8004c20:	011b      	lsleq	r3, r3, #4
 8004c22:	3004      	addeq	r0, #4
 8004c24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004c28:	bf04      	itt	eq
 8004c2a:	009b      	lsleq	r3, r3, #2
 8004c2c:	3002      	addeq	r0, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	db06      	blt.n	8004c40 <__hi0bits+0x3c>
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	d503      	bpl.n	8004c3e <__hi0bits+0x3a>
 8004c36:	3001      	adds	r0, #1
 8004c38:	4770      	bx	lr
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e7e8      	b.n	8004c10 <__hi0bits+0xc>
 8004c3e:	2020      	movs	r0, #32
 8004c40:	4770      	bx	lr

08004c42 <__lo0bits>:
 8004c42:	6803      	ldr	r3, [r0, #0]
 8004c44:	4601      	mov	r1, r0
 8004c46:	f013 0207 	ands.w	r2, r3, #7
 8004c4a:	d00b      	beq.n	8004c64 <__lo0bits+0x22>
 8004c4c:	07da      	lsls	r2, r3, #31
 8004c4e:	d423      	bmi.n	8004c98 <__lo0bits+0x56>
 8004c50:	0798      	lsls	r0, r3, #30
 8004c52:	bf49      	itett	mi
 8004c54:	085b      	lsrmi	r3, r3, #1
 8004c56:	089b      	lsrpl	r3, r3, #2
 8004c58:	2001      	movmi	r0, #1
 8004c5a:	600b      	strmi	r3, [r1, #0]
 8004c5c:	bf5c      	itt	pl
 8004c5e:	600b      	strpl	r3, [r1, #0]
 8004c60:	2002      	movpl	r0, #2
 8004c62:	4770      	bx	lr
 8004c64:	b298      	uxth	r0, r3
 8004c66:	b9a8      	cbnz	r0, 8004c94 <__lo0bits+0x52>
 8004c68:	2010      	movs	r0, #16
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004c70:	bf04      	itt	eq
 8004c72:	0a1b      	lsreq	r3, r3, #8
 8004c74:	3008      	addeq	r0, #8
 8004c76:	071a      	lsls	r2, r3, #28
 8004c78:	bf04      	itt	eq
 8004c7a:	091b      	lsreq	r3, r3, #4
 8004c7c:	3004      	addeq	r0, #4
 8004c7e:	079a      	lsls	r2, r3, #30
 8004c80:	bf04      	itt	eq
 8004c82:	089b      	lsreq	r3, r3, #2
 8004c84:	3002      	addeq	r0, #2
 8004c86:	07da      	lsls	r2, r3, #31
 8004c88:	d402      	bmi.n	8004c90 <__lo0bits+0x4e>
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	d006      	beq.n	8004c9c <__lo0bits+0x5a>
 8004c8e:	3001      	adds	r0, #1
 8004c90:	600b      	str	r3, [r1, #0]
 8004c92:	4770      	bx	lr
 8004c94:	4610      	mov	r0, r2
 8004c96:	e7e9      	b.n	8004c6c <__lo0bits+0x2a>
 8004c98:	2000      	movs	r0, #0
 8004c9a:	4770      	bx	lr
 8004c9c:	2020      	movs	r0, #32
 8004c9e:	4770      	bx	lr

08004ca0 <__i2b>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	f7ff ff27 	bl	8004af8 <_Balloc>
 8004caa:	2201      	movs	r2, #1
 8004cac:	6144      	str	r4, [r0, #20]
 8004cae:	6102      	str	r2, [r0, #16]
 8004cb0:	bd10      	pop	{r4, pc}

08004cb2 <__multiply>:
 8004cb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb6:	4614      	mov	r4, r2
 8004cb8:	690a      	ldr	r2, [r1, #16]
 8004cba:	6923      	ldr	r3, [r4, #16]
 8004cbc:	4689      	mov	r9, r1
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bfbe      	ittt	lt
 8004cc2:	460b      	movlt	r3, r1
 8004cc4:	46a1      	movlt	r9, r4
 8004cc6:	461c      	movlt	r4, r3
 8004cc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ccc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004cd0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004cd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004cd8:	eb07 060a 	add.w	r6, r7, sl
 8004cdc:	429e      	cmp	r6, r3
 8004cde:	bfc8      	it	gt
 8004ce0:	3101      	addgt	r1, #1
 8004ce2:	f7ff ff09 	bl	8004af8 <_Balloc>
 8004ce6:	f100 0514 	add.w	r5, r0, #20
 8004cea:	462b      	mov	r3, r5
 8004cec:	2200      	movs	r2, #0
 8004cee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cf2:	4543      	cmp	r3, r8
 8004cf4:	d316      	bcc.n	8004d24 <__multiply+0x72>
 8004cf6:	f104 0214 	add.w	r2, r4, #20
 8004cfa:	f109 0114 	add.w	r1, r9, #20
 8004cfe:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004d02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	9c01      	ldr	r4, [sp, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	4294      	cmp	r4, r2
 8004d0e:	d80c      	bhi.n	8004d2a <__multiply+0x78>
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	dd03      	ble.n	8004d1c <__multiply+0x6a>
 8004d14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d054      	beq.n	8004dc6 <__multiply+0x114>
 8004d1c:	6106      	str	r6, [r0, #16]
 8004d1e:	b003      	add	sp, #12
 8004d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d24:	f843 2b04 	str.w	r2, [r3], #4
 8004d28:	e7e3      	b.n	8004cf2 <__multiply+0x40>
 8004d2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d2e:	3204      	adds	r2, #4
 8004d30:	f1ba 0f00 	cmp.w	sl, #0
 8004d34:	d020      	beq.n	8004d78 <__multiply+0xc6>
 8004d36:	46ae      	mov	lr, r5
 8004d38:	4689      	mov	r9, r1
 8004d3a:	f04f 0c00 	mov.w	ip, #0
 8004d3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004d42:	f8be b000 	ldrh.w	fp, [lr]
 8004d46:	b2a3      	uxth	r3, r4
 8004d48:	fb0a b303 	mla	r3, sl, r3, fp
 8004d4c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004d50:	f8de 4000 	ldr.w	r4, [lr]
 8004d54:	4463      	add	r3, ip
 8004d56:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004d5a:	fb0a c40b 	mla	r4, sl, fp, ip
 8004d5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004d68:	454f      	cmp	r7, r9
 8004d6a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004d6e:	f84e 3b04 	str.w	r3, [lr], #4
 8004d72:	d8e4      	bhi.n	8004d3e <__multiply+0x8c>
 8004d74:	f8ce c000 	str.w	ip, [lr]
 8004d78:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004d7c:	f1b9 0f00 	cmp.w	r9, #0
 8004d80:	d01f      	beq.n	8004dc2 <__multiply+0x110>
 8004d82:	46ae      	mov	lr, r5
 8004d84:	468c      	mov	ip, r1
 8004d86:	f04f 0a00 	mov.w	sl, #0
 8004d8a:	682b      	ldr	r3, [r5, #0]
 8004d8c:	f8bc 4000 	ldrh.w	r4, [ip]
 8004d90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	fb09 b404 	mla	r4, r9, r4, fp
 8004d9a:	44a2      	add	sl, r4
 8004d9c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004da0:	f84e 3b04 	str.w	r3, [lr], #4
 8004da4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004da8:	f8be 4000 	ldrh.w	r4, [lr]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	fb09 4303 	mla	r3, r9, r3, r4
 8004db2:	4567      	cmp	r7, ip
 8004db4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004db8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dbc:	d8e6      	bhi.n	8004d8c <__multiply+0xda>
 8004dbe:	f8ce 3000 	str.w	r3, [lr]
 8004dc2:	3504      	adds	r5, #4
 8004dc4:	e7a0      	b.n	8004d08 <__multiply+0x56>
 8004dc6:	3e01      	subs	r6, #1
 8004dc8:	e7a2      	b.n	8004d10 <__multiply+0x5e>
	...

08004dcc <__pow5mult>:
 8004dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd0:	4615      	mov	r5, r2
 8004dd2:	f012 0203 	ands.w	r2, r2, #3
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	460f      	mov	r7, r1
 8004dda:	d007      	beq.n	8004dec <__pow5mult+0x20>
 8004ddc:	4c21      	ldr	r4, [pc, #132]	; (8004e64 <__pow5mult+0x98>)
 8004dde:	3a01      	subs	r2, #1
 8004de0:	2300      	movs	r3, #0
 8004de2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004de6:	f7ff fed2 	bl	8004b8e <__multadd>
 8004dea:	4607      	mov	r7, r0
 8004dec:	10ad      	asrs	r5, r5, #2
 8004dee:	d035      	beq.n	8004e5c <__pow5mult+0x90>
 8004df0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004df2:	b93c      	cbnz	r4, 8004e04 <__pow5mult+0x38>
 8004df4:	2010      	movs	r0, #16
 8004df6:	f7ff fc45 	bl	8004684 <malloc>
 8004dfa:	6270      	str	r0, [r6, #36]	; 0x24
 8004dfc:	6044      	str	r4, [r0, #4]
 8004dfe:	6084      	str	r4, [r0, #8]
 8004e00:	6004      	str	r4, [r0, #0]
 8004e02:	60c4      	str	r4, [r0, #12]
 8004e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e0c:	b94c      	cbnz	r4, 8004e22 <__pow5mult+0x56>
 8004e0e:	f240 2171 	movw	r1, #625	; 0x271
 8004e12:	4630      	mov	r0, r6
 8004e14:	f7ff ff44 	bl	8004ca0 <__i2b>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e20:	6003      	str	r3, [r0, #0]
 8004e22:	f04f 0800 	mov.w	r8, #0
 8004e26:	07eb      	lsls	r3, r5, #31
 8004e28:	d50a      	bpl.n	8004e40 <__pow5mult+0x74>
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7ff ff3f 	bl	8004cb2 <__multiply>
 8004e34:	4681      	mov	r9, r0
 8004e36:	4639      	mov	r1, r7
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7ff fe91 	bl	8004b60 <_Bfree>
 8004e3e:	464f      	mov	r7, r9
 8004e40:	106d      	asrs	r5, r5, #1
 8004e42:	d00b      	beq.n	8004e5c <__pow5mult+0x90>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	b938      	cbnz	r0, 8004e58 <__pow5mult+0x8c>
 8004e48:	4622      	mov	r2, r4
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f7ff ff30 	bl	8004cb2 <__multiply>
 8004e52:	6020      	str	r0, [r4, #0]
 8004e54:	f8c0 8000 	str.w	r8, [r0]
 8004e58:	4604      	mov	r4, r0
 8004e5a:	e7e4      	b.n	8004e26 <__pow5mult+0x5a>
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e62:	bf00      	nop
 8004e64:	080059d8 	.word	0x080059d8

08004e68 <__lshift>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	4607      	mov	r7, r0
 8004e70:	4616      	mov	r6, r2
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e78:	eb0a 0903 	add.w	r9, sl, r3
 8004e7c:	6849      	ldr	r1, [r1, #4]
 8004e7e:	68a3      	ldr	r3, [r4, #8]
 8004e80:	f109 0501 	add.w	r5, r9, #1
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	db31      	blt.n	8004eec <__lshift+0x84>
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff fe35 	bl	8004af8 <_Balloc>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4680      	mov	r8, r0
 8004e92:	4611      	mov	r1, r2
 8004e94:	f100 0314 	add.w	r3, r0, #20
 8004e98:	4552      	cmp	r2, sl
 8004e9a:	db2a      	blt.n	8004ef2 <__lshift+0x8a>
 8004e9c:	6920      	ldr	r0, [r4, #16]
 8004e9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ea2:	f104 0114 	add.w	r1, r4, #20
 8004ea6:	f016 021f 	ands.w	r2, r6, #31
 8004eaa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004eae:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004eb2:	d022      	beq.n	8004efa <__lshift+0x92>
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f1c2 0c20 	rsb	ip, r2, #32
 8004eba:	680e      	ldr	r6, [r1, #0]
 8004ebc:	4096      	lsls	r6, r2
 8004ebe:	4330      	orrs	r0, r6
 8004ec0:	f843 0b04 	str.w	r0, [r3], #4
 8004ec4:	f851 0b04 	ldr.w	r0, [r1], #4
 8004ec8:	458e      	cmp	lr, r1
 8004eca:	fa20 f00c 	lsr.w	r0, r0, ip
 8004ece:	d8f4      	bhi.n	8004eba <__lshift+0x52>
 8004ed0:	6018      	str	r0, [r3, #0]
 8004ed2:	b108      	cbz	r0, 8004ed8 <__lshift+0x70>
 8004ed4:	f109 0502 	add.w	r5, r9, #2
 8004ed8:	3d01      	subs	r5, #1
 8004eda:	4638      	mov	r0, r7
 8004edc:	f8c8 5010 	str.w	r5, [r8, #16]
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	f7ff fe3d 	bl	8004b60 <_Bfree>
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eec:	3101      	adds	r1, #1
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	e7c8      	b.n	8004e84 <__lshift+0x1c>
 8004ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004ef6:	3201      	adds	r2, #1
 8004ef8:	e7ce      	b.n	8004e98 <__lshift+0x30>
 8004efa:	3b04      	subs	r3, #4
 8004efc:	f851 2b04 	ldr.w	r2, [r1], #4
 8004f00:	458e      	cmp	lr, r1
 8004f02:	f843 2f04 	str.w	r2, [r3, #4]!
 8004f06:	d8f9      	bhi.n	8004efc <__lshift+0x94>
 8004f08:	e7e6      	b.n	8004ed8 <__lshift+0x70>

08004f0a <__mcmp>:
 8004f0a:	6903      	ldr	r3, [r0, #16]
 8004f0c:	690a      	ldr	r2, [r1, #16]
 8004f0e:	b530      	push	{r4, r5, lr}
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	d10c      	bne.n	8004f2e <__mcmp+0x24>
 8004f14:	0092      	lsls	r2, r2, #2
 8004f16:	3014      	adds	r0, #20
 8004f18:	3114      	adds	r1, #20
 8004f1a:	1884      	adds	r4, r0, r2
 8004f1c:	4411      	add	r1, r2
 8004f1e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f22:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f26:	4295      	cmp	r5, r2
 8004f28:	d003      	beq.n	8004f32 <__mcmp+0x28>
 8004f2a:	d305      	bcc.n	8004f38 <__mcmp+0x2e>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	bd30      	pop	{r4, r5, pc}
 8004f32:	42a0      	cmp	r0, r4
 8004f34:	d3f3      	bcc.n	8004f1e <__mcmp+0x14>
 8004f36:	e7fa      	b.n	8004f2e <__mcmp+0x24>
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f3c:	e7f7      	b.n	8004f2e <__mcmp+0x24>

08004f3e <__mdiff>:
 8004f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f42:	460d      	mov	r5, r1
 8004f44:	4607      	mov	r7, r0
 8004f46:	4611      	mov	r1, r2
 8004f48:	4628      	mov	r0, r5
 8004f4a:	4614      	mov	r4, r2
 8004f4c:	f7ff ffdd 	bl	8004f0a <__mcmp>
 8004f50:	1e06      	subs	r6, r0, #0
 8004f52:	d108      	bne.n	8004f66 <__mdiff+0x28>
 8004f54:	4631      	mov	r1, r6
 8004f56:	4638      	mov	r0, r7
 8004f58:	f7ff fdce 	bl	8004af8 <_Balloc>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	6146      	str	r6, [r0, #20]
 8004f60:	6103      	str	r3, [r0, #16]
 8004f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f66:	bfa4      	itt	ge
 8004f68:	4623      	movge	r3, r4
 8004f6a:	462c      	movge	r4, r5
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	6861      	ldr	r1, [r4, #4]
 8004f70:	bfa6      	itte	ge
 8004f72:	461d      	movge	r5, r3
 8004f74:	2600      	movge	r6, #0
 8004f76:	2601      	movlt	r6, #1
 8004f78:	f7ff fdbe 	bl	8004af8 <_Balloc>
 8004f7c:	f04f 0c00 	mov.w	ip, #0
 8004f80:	60c6      	str	r6, [r0, #12]
 8004f82:	692b      	ldr	r3, [r5, #16]
 8004f84:	6926      	ldr	r6, [r4, #16]
 8004f86:	f104 0214 	add.w	r2, r4, #20
 8004f8a:	f105 0914 	add.w	r9, r5, #20
 8004f8e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004f92:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004f96:	f100 0114 	add.w	r1, r0, #20
 8004f9a:	f852 ab04 	ldr.w	sl, [r2], #4
 8004f9e:	f859 5b04 	ldr.w	r5, [r9], #4
 8004fa2:	fa1f f38a 	uxth.w	r3, sl
 8004fa6:	4463      	add	r3, ip
 8004fa8:	b2ac      	uxth	r4, r5
 8004faa:	1b1b      	subs	r3, r3, r4
 8004fac:	0c2c      	lsrs	r4, r5, #16
 8004fae:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004fb2:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004fbc:	45c8      	cmp	r8, r9
 8004fbe:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004fc2:	4696      	mov	lr, r2
 8004fc4:	f841 4b04 	str.w	r4, [r1], #4
 8004fc8:	d8e7      	bhi.n	8004f9a <__mdiff+0x5c>
 8004fca:	45be      	cmp	lr, r7
 8004fcc:	d305      	bcc.n	8004fda <__mdiff+0x9c>
 8004fce:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004fd2:	b18b      	cbz	r3, 8004ff8 <__mdiff+0xba>
 8004fd4:	6106      	str	r6, [r0, #16]
 8004fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fda:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004fde:	b2a2      	uxth	r2, r4
 8004fe0:	4462      	add	r2, ip
 8004fe2:	1413      	asrs	r3, r2, #16
 8004fe4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004fe8:	b292      	uxth	r2, r2
 8004fea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004fee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ff2:	f841 2b04 	str.w	r2, [r1], #4
 8004ff6:	e7e8      	b.n	8004fca <__mdiff+0x8c>
 8004ff8:	3e01      	subs	r6, #1
 8004ffa:	e7e8      	b.n	8004fce <__mdiff+0x90>

08004ffc <__d2b>:
 8004ffc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005000:	461c      	mov	r4, r3
 8005002:	2101      	movs	r1, #1
 8005004:	4690      	mov	r8, r2
 8005006:	9e08      	ldr	r6, [sp, #32]
 8005008:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800500a:	f7ff fd75 	bl	8004af8 <_Balloc>
 800500e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005012:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005016:	4607      	mov	r7, r0
 8005018:	bb34      	cbnz	r4, 8005068 <__d2b+0x6c>
 800501a:	9201      	str	r2, [sp, #4]
 800501c:	f1b8 0f00 	cmp.w	r8, #0
 8005020:	d027      	beq.n	8005072 <__d2b+0x76>
 8005022:	a802      	add	r0, sp, #8
 8005024:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005028:	f7ff fe0b 	bl	8004c42 <__lo0bits>
 800502c:	9900      	ldr	r1, [sp, #0]
 800502e:	b1f0      	cbz	r0, 800506e <__d2b+0x72>
 8005030:	9a01      	ldr	r2, [sp, #4]
 8005032:	f1c0 0320 	rsb	r3, r0, #32
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	430b      	orrs	r3, r1
 800503c:	40c2      	lsrs	r2, r0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	9201      	str	r2, [sp, #4]
 8005042:	9b01      	ldr	r3, [sp, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf14      	ite	ne
 8005048:	2102      	movne	r1, #2
 800504a:	2101      	moveq	r1, #1
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	6139      	str	r1, [r7, #16]
 8005050:	b1c4      	cbz	r4, 8005084 <__d2b+0x88>
 8005052:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005056:	4404      	add	r4, r0
 8005058:	6034      	str	r4, [r6, #0]
 800505a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800505e:	6028      	str	r0, [r5, #0]
 8005060:	4638      	mov	r0, r7
 8005062:	b002      	add	sp, #8
 8005064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005068:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800506c:	e7d5      	b.n	800501a <__d2b+0x1e>
 800506e:	6179      	str	r1, [r7, #20]
 8005070:	e7e7      	b.n	8005042 <__d2b+0x46>
 8005072:	a801      	add	r0, sp, #4
 8005074:	f7ff fde5 	bl	8004c42 <__lo0bits>
 8005078:	2101      	movs	r1, #1
 800507a:	9b01      	ldr	r3, [sp, #4]
 800507c:	6139      	str	r1, [r7, #16]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	3020      	adds	r0, #32
 8005082:	e7e5      	b.n	8005050 <__d2b+0x54>
 8005084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005088:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800508c:	6030      	str	r0, [r6, #0]
 800508e:	6918      	ldr	r0, [r3, #16]
 8005090:	f7ff fdb8 	bl	8004c04 <__hi0bits>
 8005094:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005098:	e7e1      	b.n	800505e <__d2b+0x62>
	...

0800509c <_sbrk_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	2300      	movs	r3, #0
 80050a0:	4c05      	ldr	r4, [pc, #20]	; (80050b8 <_sbrk_r+0x1c>)
 80050a2:	4605      	mov	r5, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	f7fd fb72 	bl	8002790 <_sbrk>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_sbrk_r+0x1a>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_sbrk_r+0x1a>
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	200008e0 	.word	0x200008e0

080050bc <__ssprint_r>:
 80050bc:	6893      	ldr	r3, [r2, #8]
 80050be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c2:	4681      	mov	r9, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	4617      	mov	r7, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d060      	beq.n	800518e <__ssprint_r+0xd2>
 80050cc:	f04f 0b00 	mov.w	fp, #0
 80050d0:	465e      	mov	r6, fp
 80050d2:	f8d2 a000 	ldr.w	sl, [r2]
 80050d6:	b356      	cbz	r6, 800512e <__ssprint_r+0x72>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	429e      	cmp	r6, r3
 80050dc:	d344      	bcc.n	8005168 <__ssprint_r+0xac>
 80050de:	89a2      	ldrh	r2, [r4, #12]
 80050e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e4:	d03e      	beq.n	8005164 <__ssprint_r+0xa8>
 80050e6:	2302      	movs	r3, #2
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	6921      	ldr	r1, [r4, #16]
 80050ec:	eba5 0801 	sub.w	r8, r5, r1
 80050f0:	6965      	ldr	r5, [r4, #20]
 80050f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f6:	fb95 f5f3 	sdiv	r5, r5, r3
 80050fa:	f108 0301 	add.w	r3, r8, #1
 80050fe:	4433      	add	r3, r6
 8005100:	429d      	cmp	r5, r3
 8005102:	bf38      	it	cc
 8005104:	461d      	movcc	r5, r3
 8005106:	0553      	lsls	r3, r2, #21
 8005108:	d546      	bpl.n	8005198 <__ssprint_r+0xdc>
 800510a:	4629      	mov	r1, r5
 800510c:	4648      	mov	r0, r9
 800510e:	f7ff fac1 	bl	8004694 <_malloc_r>
 8005112:	b998      	cbnz	r0, 800513c <__ssprint_r+0x80>
 8005114:	230c      	movs	r3, #12
 8005116:	f8c9 3000 	str.w	r3, [r9]
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005124:	81a3      	strh	r3, [r4, #12]
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	e031      	b.n	8005192 <__ssprint_r+0xd6>
 800512e:	f8da b000 	ldr.w	fp, [sl]
 8005132:	f8da 6004 	ldr.w	r6, [sl, #4]
 8005136:	f10a 0a08 	add.w	sl, sl, #8
 800513a:	e7cc      	b.n	80050d6 <__ssprint_r+0x1a>
 800513c:	4642      	mov	r2, r8
 800513e:	6921      	ldr	r1, [r4, #16]
 8005140:	9001      	str	r0, [sp, #4]
 8005142:	f7ff fcc1 	bl	8004ac8 <memcpy>
 8005146:	89a2      	ldrh	r2, [r4, #12]
 8005148:	9b01      	ldr	r3, [sp, #4]
 800514a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800514e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005152:	81a2      	strh	r2, [r4, #12]
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	4443      	add	r3, r8
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	4633      	mov	r3, r6
 800515c:	6165      	str	r5, [r4, #20]
 800515e:	eba5 0508 	sub.w	r5, r5, r8
 8005162:	60a5      	str	r5, [r4, #8]
 8005164:	429e      	cmp	r6, r3
 8005166:	d200      	bcs.n	800516a <__ssprint_r+0xae>
 8005168:	4633      	mov	r3, r6
 800516a:	461a      	mov	r2, r3
 800516c:	4659      	mov	r1, fp
 800516e:	6820      	ldr	r0, [r4, #0]
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	f000 f971 	bl	8005458 <memmove>
 8005176:	68a2      	ldr	r2, [r4, #8]
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	60a2      	str	r2, [r4, #8]
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	4413      	add	r3, r2
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	1b9e      	subs	r6, r3, r6
 8005188:	60be      	str	r6, [r7, #8]
 800518a:	2e00      	cmp	r6, #0
 800518c:	d1cf      	bne.n	800512e <__ssprint_r+0x72>
 800518e:	2000      	movs	r0, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	b003      	add	sp, #12
 8005194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005198:	462a      	mov	r2, r5
 800519a:	4648      	mov	r0, r9
 800519c:	f000 f976 	bl	800548c <_realloc_r>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d1d6      	bne.n	8005154 <__ssprint_r+0x98>
 80051a6:	6921      	ldr	r1, [r4, #16]
 80051a8:	4648      	mov	r0, r9
 80051aa:	f000 f885 	bl	80052b8 <_free_r>
 80051ae:	e7b1      	b.n	8005114 <__ssprint_r+0x58>

080051b0 <_calloc_r>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	4351      	muls	r1, r2
 80051b4:	f7ff fa6e 	bl	8004694 <_malloc_r>
 80051b8:	4604      	mov	r4, r0
 80051ba:	b198      	cbz	r0, 80051e4 <_calloc_r+0x34>
 80051bc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80051c0:	f022 0203 	bic.w	r2, r2, #3
 80051c4:	3a04      	subs	r2, #4
 80051c6:	2a24      	cmp	r2, #36	; 0x24
 80051c8:	d81b      	bhi.n	8005202 <_calloc_r+0x52>
 80051ca:	2a13      	cmp	r2, #19
 80051cc:	d917      	bls.n	80051fe <_calloc_r+0x4e>
 80051ce:	2100      	movs	r1, #0
 80051d0:	2a1b      	cmp	r2, #27
 80051d2:	6001      	str	r1, [r0, #0]
 80051d4:	6041      	str	r1, [r0, #4]
 80051d6:	d807      	bhi.n	80051e8 <_calloc_r+0x38>
 80051d8:	f100 0308 	add.w	r3, r0, #8
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	4620      	mov	r0, r4
 80051e6:	bd10      	pop	{r4, pc}
 80051e8:	2a24      	cmp	r2, #36	; 0x24
 80051ea:	6081      	str	r1, [r0, #8]
 80051ec:	60c1      	str	r1, [r0, #12]
 80051ee:	bf11      	iteee	ne
 80051f0:	f100 0310 	addne.w	r3, r0, #16
 80051f4:	6101      	streq	r1, [r0, #16]
 80051f6:	f100 0318 	addeq.w	r3, r0, #24
 80051fa:	6141      	streq	r1, [r0, #20]
 80051fc:	e7ee      	b.n	80051dc <_calloc_r+0x2c>
 80051fe:	4603      	mov	r3, r0
 8005200:	e7ec      	b.n	80051dc <_calloc_r+0x2c>
 8005202:	2100      	movs	r1, #0
 8005204:	f7fd fbd4 	bl	80029b0 <memset>
 8005208:	e7ec      	b.n	80051e4 <_calloc_r+0x34>
	...

0800520c <_malloc_trim_r>:
 800520c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005210:	4689      	mov	r9, r1
 8005212:	4f25      	ldr	r7, [pc, #148]	; (80052a8 <_malloc_trim_r+0x9c>)
 8005214:	4606      	mov	r6, r0
 8005216:	f7ff fc63 	bl	8004ae0 <__malloc_lock>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80052b4 <_malloc_trim_r+0xa8>
 8005220:	685d      	ldr	r5, [r3, #4]
 8005222:	f1a8 0411 	sub.w	r4, r8, #17
 8005226:	f025 0503 	bic.w	r5, r5, #3
 800522a:	eba4 0409 	sub.w	r4, r4, r9
 800522e:	442c      	add	r4, r5
 8005230:	fbb4 f4f8 	udiv	r4, r4, r8
 8005234:	3c01      	subs	r4, #1
 8005236:	fb08 f404 	mul.w	r4, r8, r4
 800523a:	4544      	cmp	r4, r8
 800523c:	da05      	bge.n	800524a <_malloc_trim_r+0x3e>
 800523e:	4630      	mov	r0, r6
 8005240:	f7ff fc54 	bl	8004aec <__malloc_unlock>
 8005244:	2000      	movs	r0, #0
 8005246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800524a:	2100      	movs	r1, #0
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff ff25 	bl	800509c <_sbrk_r>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	442b      	add	r3, r5
 8005256:	4298      	cmp	r0, r3
 8005258:	d1f1      	bne.n	800523e <_malloc_trim_r+0x32>
 800525a:	4261      	negs	r1, r4
 800525c:	4630      	mov	r0, r6
 800525e:	f7ff ff1d 	bl	800509c <_sbrk_r>
 8005262:	3001      	adds	r0, #1
 8005264:	d110      	bne.n	8005288 <_malloc_trim_r+0x7c>
 8005266:	2100      	movs	r1, #0
 8005268:	4630      	mov	r0, r6
 800526a:	f7ff ff17 	bl	800509c <_sbrk_r>
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	1a83      	subs	r3, r0, r2
 8005272:	2b0f      	cmp	r3, #15
 8005274:	dde3      	ble.n	800523e <_malloc_trim_r+0x32>
 8005276:	490d      	ldr	r1, [pc, #52]	; (80052ac <_malloc_trim_r+0xa0>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	6809      	ldr	r1, [r1, #0]
 800527e:	6053      	str	r3, [r2, #4]
 8005280:	1a40      	subs	r0, r0, r1
 8005282:	490b      	ldr	r1, [pc, #44]	; (80052b0 <_malloc_trim_r+0xa4>)
 8005284:	6008      	str	r0, [r1, #0]
 8005286:	e7da      	b.n	800523e <_malloc_trim_r+0x32>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <_malloc_trim_r+0xa4>)
 800528c:	1b2d      	subs	r5, r5, r4
 800528e:	f045 0501 	orr.w	r5, r5, #1
 8005292:	605d      	str	r5, [r3, #4]
 8005294:	6813      	ldr	r3, [r2, #0]
 8005296:	4630      	mov	r0, r6
 8005298:	1b1c      	subs	r4, r3, r4
 800529a:	6014      	str	r4, [r2, #0]
 800529c:	f7ff fc26 	bl	8004aec <__malloc_unlock>
 80052a0:	2001      	movs	r0, #1
 80052a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052a6:	bf00      	nop
 80052a8:	20000100 	.word	0x20000100
 80052ac:	20000508 	.word	0x20000508
 80052b0:	20000804 	.word	0x20000804
 80052b4:	00000080 	.word	0x00000080

080052b8 <_free_r>:
 80052b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052bc:	4604      	mov	r4, r0
 80052be:	4688      	mov	r8, r1
 80052c0:	2900      	cmp	r1, #0
 80052c2:	f000 80ab 	beq.w	800541c <_free_r+0x164>
 80052c6:	f7ff fc0b 	bl	8004ae0 <__malloc_lock>
 80052ca:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80052ce:	4d54      	ldr	r5, [pc, #336]	; (8005420 <_free_r+0x168>)
 80052d0:	f022 0001 	bic.w	r0, r2, #1
 80052d4:	f1a8 0308 	sub.w	r3, r8, #8
 80052d8:	181f      	adds	r7, r3, r0
 80052da:	68a9      	ldr	r1, [r5, #8]
 80052dc:	687e      	ldr	r6, [r7, #4]
 80052de:	428f      	cmp	r7, r1
 80052e0:	f026 0603 	bic.w	r6, r6, #3
 80052e4:	f002 0201 	and.w	r2, r2, #1
 80052e8:	d11b      	bne.n	8005322 <_free_r+0x6a>
 80052ea:	4430      	add	r0, r6
 80052ec:	b93a      	cbnz	r2, 80052fe <_free_r+0x46>
 80052ee:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	4410      	add	r0, r2
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	60ca      	str	r2, [r1, #12]
 80052fc:	6091      	str	r1, [r2, #8]
 80052fe:	f040 0201 	orr.w	r2, r0, #1
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	60ab      	str	r3, [r5, #8]
 8005306:	4b47      	ldr	r3, [pc, #284]	; (8005424 <_free_r+0x16c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4298      	cmp	r0, r3
 800530c:	d304      	bcc.n	8005318 <_free_r+0x60>
 800530e:	4b46      	ldr	r3, [pc, #280]	; (8005428 <_free_r+0x170>)
 8005310:	4620      	mov	r0, r4
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	f7ff ff7a 	bl	800520c <_malloc_trim_r>
 8005318:	4620      	mov	r0, r4
 800531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	f7ff bbe5 	b.w	8004aec <__malloc_unlock>
 8005322:	607e      	str	r6, [r7, #4]
 8005324:	2a00      	cmp	r2, #0
 8005326:	d139      	bne.n	800539c <_free_r+0xe4>
 8005328:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800532c:	f105 0e08 	add.w	lr, r5, #8
 8005330:	1a5b      	subs	r3, r3, r1
 8005332:	4408      	add	r0, r1
 8005334:	6899      	ldr	r1, [r3, #8]
 8005336:	4571      	cmp	r1, lr
 8005338:	d032      	beq.n	80053a0 <_free_r+0xe8>
 800533a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800533e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005342:	f8ce 1008 	str.w	r1, [lr, #8]
 8005346:	19b9      	adds	r1, r7, r6
 8005348:	6849      	ldr	r1, [r1, #4]
 800534a:	07c9      	lsls	r1, r1, #31
 800534c:	d40a      	bmi.n	8005364 <_free_r+0xac>
 800534e:	4430      	add	r0, r6
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	bb3a      	cbnz	r2, 80053a4 <_free_r+0xec>
 8005354:	4e35      	ldr	r6, [pc, #212]	; (800542c <_free_r+0x174>)
 8005356:	42b1      	cmp	r1, r6
 8005358:	d124      	bne.n	80053a4 <_free_r+0xec>
 800535a:	2201      	movs	r2, #1
 800535c:	616b      	str	r3, [r5, #20]
 800535e:	612b      	str	r3, [r5, #16]
 8005360:	60d9      	str	r1, [r3, #12]
 8005362:	6099      	str	r1, [r3, #8]
 8005364:	f040 0101 	orr.w	r1, r0, #1
 8005368:	6059      	str	r1, [r3, #4]
 800536a:	5018      	str	r0, [r3, r0]
 800536c:	2a00      	cmp	r2, #0
 800536e:	d1d3      	bne.n	8005318 <_free_r+0x60>
 8005370:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005374:	d21a      	bcs.n	80053ac <_free_r+0xf4>
 8005376:	2201      	movs	r2, #1
 8005378:	08c0      	lsrs	r0, r0, #3
 800537a:	1081      	asrs	r1, r0, #2
 800537c:	408a      	lsls	r2, r1
 800537e:	6869      	ldr	r1, [r5, #4]
 8005380:	3001      	adds	r0, #1
 8005382:	430a      	orrs	r2, r1
 8005384:	606a      	str	r2, [r5, #4]
 8005386:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800538a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800538e:	3a08      	subs	r2, #8
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	6099      	str	r1, [r3, #8]
 8005394:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005398:	60cb      	str	r3, [r1, #12]
 800539a:	e7bd      	b.n	8005318 <_free_r+0x60>
 800539c:	2200      	movs	r2, #0
 800539e:	e7d2      	b.n	8005346 <_free_r+0x8e>
 80053a0:	2201      	movs	r2, #1
 80053a2:	e7d0      	b.n	8005346 <_free_r+0x8e>
 80053a4:	68fe      	ldr	r6, [r7, #12]
 80053a6:	60ce      	str	r6, [r1, #12]
 80053a8:	60b1      	str	r1, [r6, #8]
 80053aa:	e7db      	b.n	8005364 <_free_r+0xac>
 80053ac:	0a42      	lsrs	r2, r0, #9
 80053ae:	2a04      	cmp	r2, #4
 80053b0:	d813      	bhi.n	80053da <_free_r+0x122>
 80053b2:	0982      	lsrs	r2, r0, #6
 80053b4:	3238      	adds	r2, #56	; 0x38
 80053b6:	1c51      	adds	r1, r2, #1
 80053b8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80053bc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80053c0:	428e      	cmp	r6, r1
 80053c2:	d124      	bne.n	800540e <_free_r+0x156>
 80053c4:	2001      	movs	r0, #1
 80053c6:	1092      	asrs	r2, r2, #2
 80053c8:	fa00 f202 	lsl.w	r2, r0, r2
 80053cc:	6868      	ldr	r0, [r5, #4]
 80053ce:	4302      	orrs	r2, r0
 80053d0:	606a      	str	r2, [r5, #4]
 80053d2:	60de      	str	r6, [r3, #12]
 80053d4:	6099      	str	r1, [r3, #8]
 80053d6:	60b3      	str	r3, [r6, #8]
 80053d8:	e7de      	b.n	8005398 <_free_r+0xe0>
 80053da:	2a14      	cmp	r2, #20
 80053dc:	d801      	bhi.n	80053e2 <_free_r+0x12a>
 80053de:	325b      	adds	r2, #91	; 0x5b
 80053e0:	e7e9      	b.n	80053b6 <_free_r+0xfe>
 80053e2:	2a54      	cmp	r2, #84	; 0x54
 80053e4:	d802      	bhi.n	80053ec <_free_r+0x134>
 80053e6:	0b02      	lsrs	r2, r0, #12
 80053e8:	326e      	adds	r2, #110	; 0x6e
 80053ea:	e7e4      	b.n	80053b6 <_free_r+0xfe>
 80053ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80053f0:	d802      	bhi.n	80053f8 <_free_r+0x140>
 80053f2:	0bc2      	lsrs	r2, r0, #15
 80053f4:	3277      	adds	r2, #119	; 0x77
 80053f6:	e7de      	b.n	80053b6 <_free_r+0xfe>
 80053f8:	f240 5154 	movw	r1, #1364	; 0x554
 80053fc:	428a      	cmp	r2, r1
 80053fe:	bf9a      	itte	ls
 8005400:	0c82      	lsrls	r2, r0, #18
 8005402:	327c      	addls	r2, #124	; 0x7c
 8005404:	227e      	movhi	r2, #126	; 0x7e
 8005406:	e7d6      	b.n	80053b6 <_free_r+0xfe>
 8005408:	6889      	ldr	r1, [r1, #8]
 800540a:	428e      	cmp	r6, r1
 800540c:	d004      	beq.n	8005418 <_free_r+0x160>
 800540e:	684a      	ldr	r2, [r1, #4]
 8005410:	f022 0203 	bic.w	r2, r2, #3
 8005414:	4290      	cmp	r0, r2
 8005416:	d3f7      	bcc.n	8005408 <_free_r+0x150>
 8005418:	68ce      	ldr	r6, [r1, #12]
 800541a:	e7da      	b.n	80053d2 <_free_r+0x11a>
 800541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005420:	20000100 	.word	0x20000100
 8005424:	2000050c 	.word	0x2000050c
 8005428:	20000834 	.word	0x20000834
 800542c:	20000108 	.word	0x20000108

08005430 <__retarget_lock_acquire_recursive>:
 8005430:	4770      	bx	lr

08005432 <__retarget_lock_release_recursive>:
 8005432:	4770      	bx	lr

08005434 <__ascii_mbtowc>:
 8005434:	b082      	sub	sp, #8
 8005436:	b901      	cbnz	r1, 800543a <__ascii_mbtowc+0x6>
 8005438:	a901      	add	r1, sp, #4
 800543a:	b142      	cbz	r2, 800544e <__ascii_mbtowc+0x1a>
 800543c:	b14b      	cbz	r3, 8005452 <__ascii_mbtowc+0x1e>
 800543e:	7813      	ldrb	r3, [r2, #0]
 8005440:	600b      	str	r3, [r1, #0]
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	1c10      	adds	r0, r2, #0
 8005446:	bf18      	it	ne
 8005448:	2001      	movne	r0, #1
 800544a:	b002      	add	sp, #8
 800544c:	4770      	bx	lr
 800544e:	4610      	mov	r0, r2
 8005450:	e7fb      	b.n	800544a <__ascii_mbtowc+0x16>
 8005452:	f06f 0001 	mvn.w	r0, #1
 8005456:	e7f8      	b.n	800544a <__ascii_mbtowc+0x16>

08005458 <memmove>:
 8005458:	4288      	cmp	r0, r1
 800545a:	b510      	push	{r4, lr}
 800545c:	eb01 0302 	add.w	r3, r1, r2
 8005460:	d803      	bhi.n	800546a <memmove+0x12>
 8005462:	1e42      	subs	r2, r0, #1
 8005464:	4299      	cmp	r1, r3
 8005466:	d10c      	bne.n	8005482 <memmove+0x2a>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	4298      	cmp	r0, r3
 800546c:	d2f9      	bcs.n	8005462 <memmove+0xa>
 800546e:	1881      	adds	r1, r0, r2
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	42d3      	cmn	r3, r2
 8005474:	d100      	bne.n	8005478 <memmove+0x20>
 8005476:	bd10      	pop	{r4, pc}
 8005478:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800547c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005480:	e7f7      	b.n	8005472 <memmove+0x1a>
 8005482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005486:	f802 4f01 	strb.w	r4, [r2, #1]!
 800548a:	e7eb      	b.n	8005464 <memmove+0xc>

0800548c <_realloc_r>:
 800548c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	4682      	mov	sl, r0
 8005492:	460c      	mov	r4, r1
 8005494:	b929      	cbnz	r1, 80054a2 <_realloc_r+0x16>
 8005496:	4611      	mov	r1, r2
 8005498:	b003      	add	sp, #12
 800549a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549e:	f7ff b8f9 	b.w	8004694 <_malloc_r>
 80054a2:	9201      	str	r2, [sp, #4]
 80054a4:	f7ff fb1c 	bl	8004ae0 <__malloc_lock>
 80054a8:	9a01      	ldr	r2, [sp, #4]
 80054aa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80054ae:	f102 080b 	add.w	r8, r2, #11
 80054b2:	f1b8 0f16 	cmp.w	r8, #22
 80054b6:	f1a4 0908 	sub.w	r9, r4, #8
 80054ba:	f025 0603 	bic.w	r6, r5, #3
 80054be:	d90a      	bls.n	80054d6 <_realloc_r+0x4a>
 80054c0:	f038 0807 	bics.w	r8, r8, #7
 80054c4:	d509      	bpl.n	80054da <_realloc_r+0x4e>
 80054c6:	230c      	movs	r3, #12
 80054c8:	2700      	movs	r7, #0
 80054ca:	f8ca 3000 	str.w	r3, [sl]
 80054ce:	4638      	mov	r0, r7
 80054d0:	b003      	add	sp, #12
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d6:	f04f 0810 	mov.w	r8, #16
 80054da:	4590      	cmp	r8, r2
 80054dc:	d3f3      	bcc.n	80054c6 <_realloc_r+0x3a>
 80054de:	45b0      	cmp	r8, r6
 80054e0:	f340 8148 	ble.w	8005774 <_realloc_r+0x2e8>
 80054e4:	4ba9      	ldr	r3, [pc, #676]	; (800578c <_realloc_r+0x300>)
 80054e6:	eb09 0106 	add.w	r1, r9, r6
 80054ea:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80054ee:	469b      	mov	fp, r3
 80054f0:	4571      	cmp	r1, lr
 80054f2:	684b      	ldr	r3, [r1, #4]
 80054f4:	d005      	beq.n	8005502 <_realloc_r+0x76>
 80054f6:	f023 0001 	bic.w	r0, r3, #1
 80054fa:	4408      	add	r0, r1
 80054fc:	6840      	ldr	r0, [r0, #4]
 80054fe:	07c7      	lsls	r7, r0, #31
 8005500:	d447      	bmi.n	8005592 <_realloc_r+0x106>
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	4571      	cmp	r1, lr
 8005508:	eb06 0703 	add.w	r7, r6, r3
 800550c:	d119      	bne.n	8005542 <_realloc_r+0xb6>
 800550e:	f108 0010 	add.w	r0, r8, #16
 8005512:	4287      	cmp	r7, r0
 8005514:	db3f      	blt.n	8005596 <_realloc_r+0x10a>
 8005516:	eba7 0708 	sub.w	r7, r7, r8
 800551a:	eb09 0308 	add.w	r3, r9, r8
 800551e:	f047 0701 	orr.w	r7, r7, #1
 8005522:	f8cb 3008 	str.w	r3, [fp, #8]
 8005526:	605f      	str	r7, [r3, #4]
 8005528:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800552c:	4650      	mov	r0, sl
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	ea43 0308 	orr.w	r3, r3, r8
 8005536:	f844 3c04 	str.w	r3, [r4, #-4]
 800553a:	f7ff fad7 	bl	8004aec <__malloc_unlock>
 800553e:	4627      	mov	r7, r4
 8005540:	e7c5      	b.n	80054ce <_realloc_r+0x42>
 8005542:	45b8      	cmp	r8, r7
 8005544:	dc27      	bgt.n	8005596 <_realloc_r+0x10a>
 8005546:	68cb      	ldr	r3, [r1, #12]
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	60d3      	str	r3, [r2, #12]
 800554c:	609a      	str	r2, [r3, #8]
 800554e:	eba7 0008 	sub.w	r0, r7, r8
 8005552:	280f      	cmp	r0, #15
 8005554:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005558:	eb09 0207 	add.w	r2, r9, r7
 800555c:	f240 810c 	bls.w	8005778 <_realloc_r+0x2ec>
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	eb09 0108 	add.w	r1, r9, r8
 8005568:	ea43 0308 	orr.w	r3, r3, r8
 800556c:	f040 0001 	orr.w	r0, r0, #1
 8005570:	f8c9 3004 	str.w	r3, [r9, #4]
 8005574:	6048      	str	r0, [r1, #4]
 8005576:	6853      	ldr	r3, [r2, #4]
 8005578:	3108      	adds	r1, #8
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6053      	str	r3, [r2, #4]
 8005580:	4650      	mov	r0, sl
 8005582:	f7ff fe99 	bl	80052b8 <_free_r>
 8005586:	4650      	mov	r0, sl
 8005588:	f7ff fab0 	bl	8004aec <__malloc_unlock>
 800558c:	f109 0708 	add.w	r7, r9, #8
 8005590:	e79d      	b.n	80054ce <_realloc_r+0x42>
 8005592:	2300      	movs	r3, #0
 8005594:	4619      	mov	r1, r3
 8005596:	07e8      	lsls	r0, r5, #31
 8005598:	f100 8085 	bmi.w	80056a6 <_realloc_r+0x21a>
 800559c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80055a0:	eba9 0505 	sub.w	r5, r9, r5
 80055a4:	6868      	ldr	r0, [r5, #4]
 80055a6:	f020 0003 	bic.w	r0, r0, #3
 80055aa:	4430      	add	r0, r6
 80055ac:	2900      	cmp	r1, #0
 80055ae:	d077      	beq.n	80056a0 <_realloc_r+0x214>
 80055b0:	4571      	cmp	r1, lr
 80055b2:	d151      	bne.n	8005658 <_realloc_r+0x1cc>
 80055b4:	4403      	add	r3, r0
 80055b6:	f108 0110 	add.w	r1, r8, #16
 80055ba:	428b      	cmp	r3, r1
 80055bc:	db70      	blt.n	80056a0 <_realloc_r+0x214>
 80055be:	462f      	mov	r7, r5
 80055c0:	68ea      	ldr	r2, [r5, #12]
 80055c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80055c6:	60ca      	str	r2, [r1, #12]
 80055c8:	6091      	str	r1, [r2, #8]
 80055ca:	1f32      	subs	r2, r6, #4
 80055cc:	2a24      	cmp	r2, #36	; 0x24
 80055ce:	d83c      	bhi.n	800564a <_realloc_r+0x1be>
 80055d0:	2a13      	cmp	r2, #19
 80055d2:	d937      	bls.n	8005644 <_realloc_r+0x1b8>
 80055d4:	6821      	ldr	r1, [r4, #0]
 80055d6:	2a1b      	cmp	r2, #27
 80055d8:	60a9      	str	r1, [r5, #8]
 80055da:	6861      	ldr	r1, [r4, #4]
 80055dc:	60e9      	str	r1, [r5, #12]
 80055de:	d81c      	bhi.n	800561a <_realloc_r+0x18e>
 80055e0:	f105 0210 	add.w	r2, r5, #16
 80055e4:	f104 0108 	add.w	r1, r4, #8
 80055e8:	6808      	ldr	r0, [r1, #0]
 80055ea:	6010      	str	r0, [r2, #0]
 80055ec:	6848      	ldr	r0, [r1, #4]
 80055ee:	6050      	str	r0, [r2, #4]
 80055f0:	6889      	ldr	r1, [r1, #8]
 80055f2:	6091      	str	r1, [r2, #8]
 80055f4:	eba3 0308 	sub.w	r3, r3, r8
 80055f8:	eb05 0208 	add.w	r2, r5, r8
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	f8cb 2008 	str.w	r2, [fp, #8]
 8005604:	6053      	str	r3, [r2, #4]
 8005606:	686b      	ldr	r3, [r5, #4]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	ea43 0308 	orr.w	r3, r3, r8
 8005610:	606b      	str	r3, [r5, #4]
 8005612:	4650      	mov	r0, sl
 8005614:	f7ff fa6a 	bl	8004aec <__malloc_unlock>
 8005618:	e759      	b.n	80054ce <_realloc_r+0x42>
 800561a:	68a1      	ldr	r1, [r4, #8]
 800561c:	2a24      	cmp	r2, #36	; 0x24
 800561e:	6129      	str	r1, [r5, #16]
 8005620:	68e1      	ldr	r1, [r4, #12]
 8005622:	bf18      	it	ne
 8005624:	f105 0218 	addne.w	r2, r5, #24
 8005628:	6169      	str	r1, [r5, #20]
 800562a:	bf09      	itett	eq
 800562c:	6922      	ldreq	r2, [r4, #16]
 800562e:	f104 0110 	addne.w	r1, r4, #16
 8005632:	61aa      	streq	r2, [r5, #24]
 8005634:	6960      	ldreq	r0, [r4, #20]
 8005636:	bf02      	ittt	eq
 8005638:	f105 0220 	addeq.w	r2, r5, #32
 800563c:	f104 0118 	addeq.w	r1, r4, #24
 8005640:	61e8      	streq	r0, [r5, #28]
 8005642:	e7d1      	b.n	80055e8 <_realloc_r+0x15c>
 8005644:	463a      	mov	r2, r7
 8005646:	4621      	mov	r1, r4
 8005648:	e7ce      	b.n	80055e8 <_realloc_r+0x15c>
 800564a:	4621      	mov	r1, r4
 800564c:	4638      	mov	r0, r7
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	f7ff ff02 	bl	8005458 <memmove>
 8005654:	9b01      	ldr	r3, [sp, #4]
 8005656:	e7cd      	b.n	80055f4 <_realloc_r+0x168>
 8005658:	18c7      	adds	r7, r0, r3
 800565a:	45b8      	cmp	r8, r7
 800565c:	dc20      	bgt.n	80056a0 <_realloc_r+0x214>
 800565e:	68cb      	ldr	r3, [r1, #12]
 8005660:	688a      	ldr	r2, [r1, #8]
 8005662:	60d3      	str	r3, [r2, #12]
 8005664:	609a      	str	r2, [r3, #8]
 8005666:	4628      	mov	r0, r5
 8005668:	68eb      	ldr	r3, [r5, #12]
 800566a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800566e:	60d3      	str	r3, [r2, #12]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	1f32      	subs	r2, r6, #4
 8005674:	2a24      	cmp	r2, #36	; 0x24
 8005676:	d843      	bhi.n	8005700 <_realloc_r+0x274>
 8005678:	2a13      	cmp	r2, #19
 800567a:	d93f      	bls.n	80056fc <_realloc_r+0x270>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	2a1b      	cmp	r2, #27
 8005680:	60ab      	str	r3, [r5, #8]
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	60eb      	str	r3, [r5, #12]
 8005686:	d824      	bhi.n	80056d2 <_realloc_r+0x246>
 8005688:	f105 0010 	add.w	r0, r5, #16
 800568c:	f104 0308 	add.w	r3, r4, #8
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	6002      	str	r2, [r0, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	6042      	str	r2, [r0, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	46a9      	mov	r9, r5
 800569e:	e756      	b.n	800554e <_realloc_r+0xc2>
 80056a0:	4580      	cmp	r8, r0
 80056a2:	4607      	mov	r7, r0
 80056a4:	dddf      	ble.n	8005666 <_realloc_r+0x1da>
 80056a6:	4611      	mov	r1, r2
 80056a8:	4650      	mov	r0, sl
 80056aa:	f7fe fff3 	bl	8004694 <_malloc_r>
 80056ae:	4607      	mov	r7, r0
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d0ae      	beq.n	8005612 <_realloc_r+0x186>
 80056b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80056b8:	f1a0 0208 	sub.w	r2, r0, #8
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	444b      	add	r3, r9
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d120      	bne.n	8005708 <_realloc_r+0x27c>
 80056c6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80056ca:	f027 0703 	bic.w	r7, r7, #3
 80056ce:	4437      	add	r7, r6
 80056d0:	e73d      	b.n	800554e <_realloc_r+0xc2>
 80056d2:	68a3      	ldr	r3, [r4, #8]
 80056d4:	2a24      	cmp	r2, #36	; 0x24
 80056d6:	612b      	str	r3, [r5, #16]
 80056d8:	68e3      	ldr	r3, [r4, #12]
 80056da:	bf18      	it	ne
 80056dc:	f105 0018 	addne.w	r0, r5, #24
 80056e0:	616b      	str	r3, [r5, #20]
 80056e2:	bf09      	itett	eq
 80056e4:	6923      	ldreq	r3, [r4, #16]
 80056e6:	f104 0310 	addne.w	r3, r4, #16
 80056ea:	61ab      	streq	r3, [r5, #24]
 80056ec:	6962      	ldreq	r2, [r4, #20]
 80056ee:	bf02      	ittt	eq
 80056f0:	f105 0020 	addeq.w	r0, r5, #32
 80056f4:	f104 0318 	addeq.w	r3, r4, #24
 80056f8:	61ea      	streq	r2, [r5, #28]
 80056fa:	e7c9      	b.n	8005690 <_realloc_r+0x204>
 80056fc:	4623      	mov	r3, r4
 80056fe:	e7c7      	b.n	8005690 <_realloc_r+0x204>
 8005700:	4621      	mov	r1, r4
 8005702:	f7ff fea9 	bl	8005458 <memmove>
 8005706:	e7c9      	b.n	800569c <_realloc_r+0x210>
 8005708:	1f32      	subs	r2, r6, #4
 800570a:	2a24      	cmp	r2, #36	; 0x24
 800570c:	d82e      	bhi.n	800576c <_realloc_r+0x2e0>
 800570e:	2a13      	cmp	r2, #19
 8005710:	d929      	bls.n	8005766 <_realloc_r+0x2da>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	2a1b      	cmp	r2, #27
 8005716:	6003      	str	r3, [r0, #0]
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	6043      	str	r3, [r0, #4]
 800571c:	d80e      	bhi.n	800573c <_realloc_r+0x2b0>
 800571e:	f100 0308 	add.w	r3, r0, #8
 8005722:	f104 0208 	add.w	r2, r4, #8
 8005726:	6811      	ldr	r1, [r2, #0]
 8005728:	6019      	str	r1, [r3, #0]
 800572a:	6851      	ldr	r1, [r2, #4]
 800572c:	6059      	str	r1, [r3, #4]
 800572e:	6892      	ldr	r2, [r2, #8]
 8005730:	609a      	str	r2, [r3, #8]
 8005732:	4621      	mov	r1, r4
 8005734:	4650      	mov	r0, sl
 8005736:	f7ff fdbf 	bl	80052b8 <_free_r>
 800573a:	e76a      	b.n	8005612 <_realloc_r+0x186>
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	2a24      	cmp	r2, #36	; 0x24
 8005740:	6083      	str	r3, [r0, #8]
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	bf18      	it	ne
 8005746:	f104 0210 	addne.w	r2, r4, #16
 800574a:	60c3      	str	r3, [r0, #12]
 800574c:	bf09      	itett	eq
 800574e:	6923      	ldreq	r3, [r4, #16]
 8005750:	f100 0310 	addne.w	r3, r0, #16
 8005754:	6103      	streq	r3, [r0, #16]
 8005756:	6961      	ldreq	r1, [r4, #20]
 8005758:	bf02      	ittt	eq
 800575a:	f100 0318 	addeq.w	r3, r0, #24
 800575e:	f104 0218 	addeq.w	r2, r4, #24
 8005762:	6141      	streq	r1, [r0, #20]
 8005764:	e7df      	b.n	8005726 <_realloc_r+0x29a>
 8005766:	4603      	mov	r3, r0
 8005768:	4622      	mov	r2, r4
 800576a:	e7dc      	b.n	8005726 <_realloc_r+0x29a>
 800576c:	4621      	mov	r1, r4
 800576e:	f7ff fe73 	bl	8005458 <memmove>
 8005772:	e7de      	b.n	8005732 <_realloc_r+0x2a6>
 8005774:	4637      	mov	r7, r6
 8005776:	e6ea      	b.n	800554e <_realloc_r+0xc2>
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	431f      	orrs	r7, r3
 800577e:	f8c9 7004 	str.w	r7, [r9, #4]
 8005782:	6853      	ldr	r3, [r2, #4]
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	6053      	str	r3, [r2, #4]
 800578a:	e6fc      	b.n	8005586 <_realloc_r+0xfa>
 800578c:	20000100 	.word	0x20000100

08005790 <__ascii_wctomb>:
 8005790:	b149      	cbz	r1, 80057a6 <__ascii_wctomb+0x16>
 8005792:	2aff      	cmp	r2, #255	; 0xff
 8005794:	bf8b      	itete	hi
 8005796:	238a      	movhi	r3, #138	; 0x8a
 8005798:	700a      	strbls	r2, [r1, #0]
 800579a:	6003      	strhi	r3, [r0, #0]
 800579c:	2001      	movls	r0, #1
 800579e:	bf88      	it	hi
 80057a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80057a4:	4770      	bx	lr
 80057a6:	4608      	mov	r0, r1
 80057a8:	4770      	bx	lr
	...

080057ac <_init>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr

080057b8 <_fini>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr
